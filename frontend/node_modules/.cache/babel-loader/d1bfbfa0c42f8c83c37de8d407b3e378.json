{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureLeftNeighbor = exports.ensureSpec = exports.calculateExistenceRoot = exports.verifyNonExistence = exports.verifyExistence = exports.smtSpec = exports.tendermintSpec = exports.iavlSpec = void 0;\nvar codecimpl_1 = require(\"./generated/codecimpl\");\nvar ops_1 = require(\"./ops\");\nvar specs_1 = require(\"./specs\");\nexports.iavlSpec = {\n  leafSpec: {\n    prefix: Uint8Array.from([0]),\n    hash: codecimpl_1.ics23.HashOp.SHA256,\n    prehashValue: codecimpl_1.ics23.HashOp.SHA256,\n    prehashKey: codecimpl_1.ics23.HashOp.NO_HASH,\n    length: codecimpl_1.ics23.LengthOp.VAR_PROTO\n  },\n  innerSpec: {\n    childOrder: [0, 1],\n    minPrefixLength: 4,\n    maxPrefixLength: 12,\n    childSize: 33,\n    hash: codecimpl_1.ics23.HashOp.SHA256\n  }\n};\nexports.tendermintSpec = {\n  leafSpec: {\n    prefix: Uint8Array.from([0]),\n    hash: codecimpl_1.ics23.HashOp.SHA256,\n    prehashValue: codecimpl_1.ics23.HashOp.SHA256,\n    prehashKey: codecimpl_1.ics23.HashOp.NO_HASH,\n    length: codecimpl_1.ics23.LengthOp.VAR_PROTO\n  },\n  innerSpec: {\n    childOrder: [0, 1],\n    minPrefixLength: 1,\n    maxPrefixLength: 1,\n    childSize: 32,\n    hash: codecimpl_1.ics23.HashOp.SHA256\n  }\n};\nexports.smtSpec = {\n  leafSpec: {\n    hash: codecimpl_1.ics23.HashOp.SHA256,\n    prehashKey: codecimpl_1.ics23.HashOp.NO_HASH,\n    prehashValue: codecimpl_1.ics23.HashOp.SHA256,\n    length: codecimpl_1.ics23.LengthOp.NO_PREFIX,\n    prefix: Uint8Array.from([0])\n  },\n  innerSpec: {\n    childOrder: [0, 1],\n    childSize: 32,\n    minPrefixLength: 1,\n    maxPrefixLength: 1,\n    emptyChild: new Uint8Array(32),\n    hash: codecimpl_1.ics23.HashOp.SHA256\n  },\n  maxDepth: 256\n};\n// verifyExistence will throw an error if the proof doesn't link key, value -> root\n// or if it doesn't fulfill the spec\nfunction verifyExistence(proof, spec, root, key, value) {\n  ensureSpec(proof, spec);\n  var calc = calculateExistenceRoot(proof);\n  (0, specs_1.ensureBytesEqual)(calc, root);\n  (0, specs_1.ensureBytesEqual)(key, proof.key);\n  (0, specs_1.ensureBytesEqual)(value, proof.value);\n}\nexports.verifyExistence = verifyExistence;\n// Verify does all checks to ensure the proof has valid non-existence proofs,\n// and they ensure the given key is not in the CommitmentState,\n// throwing an error if there is an issue\nfunction verifyNonExistence(proof, spec, root, key) {\n  var leftKey;\n  var rightKey;\n  if (proof.left) {\n    verifyExistence(proof.left, spec, root, proof.left.key, proof.left.value);\n    leftKey = proof.left.key;\n  }\n  if (proof.right) {\n    verifyExistence(proof.right, spec, root, proof.right.key, proof.right.value);\n    rightKey = proof.right.key;\n  }\n  if (!leftKey && !rightKey) {\n    throw new Error(\"neither left nor right proof defined\");\n  }\n  if (leftKey) {\n    (0, specs_1.ensureBytesBefore)(leftKey, key);\n  }\n  if (rightKey) {\n    (0, specs_1.ensureBytesBefore)(key, rightKey);\n  }\n  if (!spec.innerSpec) {\n    throw new Error(\"no inner spec\");\n  }\n  if (!leftKey) {\n    ensureLeftMost(spec.innerSpec, proof.right.path);\n  } else if (!rightKey) {\n    ensureRightMost(spec.innerSpec, proof.left.path);\n  } else {\n    ensureLeftNeighbor(spec.innerSpec, proof.left.path, proof.right.path);\n  }\n  return;\n}\nexports.verifyNonExistence = verifyNonExistence;\n// Calculate determines the root hash that matches the given proof.\n// You must validate the result is what you have in a header.\n// Returns error if the calculations cannot be performed.\nfunction calculateExistenceRoot(proof) {\n  if (!proof.key || !proof.value) {\n    throw new Error(\"Existence proof needs key and value set\");\n  }\n  if (!proof.leaf) {\n    throw new Error(\"Existence proof must start with a leaf operation\");\n  }\n  var path = proof.path || [];\n  var res = (0, ops_1.applyLeaf)(proof.leaf, proof.key, proof.value);\n  var _iterator = _createForOfIteratorHelper(path),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var inner = _step.value;\n      res = (0, ops_1.applyInner)(inner, res);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return res;\n}\nexports.calculateExistenceRoot = calculateExistenceRoot;\n// ensureSpec throws an Error if proof doesn't fulfill spec\nfunction ensureSpec(proof, spec) {\n  if (!proof.leaf) {\n    throw new Error(\"Existence proof must start with a leaf operation\");\n  }\n  if (!spec.leafSpec) {\n    throw new Error(\"Spec must include leafSpec\");\n  }\n  if (!spec.innerSpec) {\n    throw new Error(\"Spec must include innerSpec\");\n  }\n  (0, specs_1.ensureLeaf)(proof.leaf, spec.leafSpec);\n  var path = proof.path || [];\n  if (spec.minDepth && path.length < spec.minDepth) {\n    throw new Error(\"Too few inner nodes \".concat(path.length));\n  }\n  if (spec.maxDepth && path.length > spec.maxDepth) {\n    throw new Error(\"Too many inner nodes \".concat(path.length));\n  }\n  var _iterator2 = _createForOfIteratorHelper(path),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var inner = _step2.value;\n      (0, specs_1.ensureInner)(inner, spec.leafSpec.prefix, spec.innerSpec);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nexports.ensureSpec = ensureSpec;\nfunction ensureLeftMost(spec, path) {\n  var _getPadding = getPadding(spec, 0),\n    minPrefix = _getPadding.minPrefix,\n    maxPrefix = _getPadding.maxPrefix,\n    suffix = _getPadding.suffix; // ensure every step has a prefix and suffix defined to be leftmost\n  var _iterator3 = _createForOfIteratorHelper(path),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var step = _step3.value;\n      if (!hasPadding(step, minPrefix, maxPrefix, suffix)) {\n        throw new Error(\"Step not leftmost\");\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}\nfunction ensureRightMost(spec, path) {\n  var len = spec.childOrder.length - 1;\n  var _getPadding2 = getPadding(spec, len),\n    minPrefix = _getPadding2.minPrefix,\n    maxPrefix = _getPadding2.maxPrefix,\n    suffix = _getPadding2.suffix; // ensure every step has a prefix and suffix defined to be leftmost\n  var _iterator4 = _createForOfIteratorHelper(path),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var step = _step4.value;\n      if (!hasPadding(step, minPrefix, maxPrefix, suffix)) {\n        throw new Error(\"Step not leftmost\");\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n}\nfunction ensureLeftNeighbor(spec, left, right) {\n  var mutleft = _toConsumableArray(left);\n  var mutright = _toConsumableArray(right);\n  var topleft = mutleft.pop();\n  var topright = mutright.pop();\n  while ((0, specs_1.bytesEqual)(topleft.prefix, topright.prefix) && (0, specs_1.bytesEqual)(topleft.suffix, topright.suffix)) {\n    topleft = mutleft.pop();\n    topright = mutright.pop();\n  }\n  // now topleft and topright are the first divergent nodes\n  // make sure they are left and right of each other\n  if (!isLeftStep(spec, topleft, topright)) {\n    throw new Error(\"Not left neightbor at first divergent step\");\n  }\n  // make sure the paths are left and right most possibilities respectively\n  ensureRightMost(spec, mutleft);\n  ensureLeftMost(spec, mutright);\n}\nexports.ensureLeftNeighbor = ensureLeftNeighbor;\n// isLeftStep assumes left and right have common parents\n// checks if left is exactly one slot to the left of right\nfunction isLeftStep(spec, left, right) {\n  var leftidx = orderFromPadding(spec, left);\n  var rightidx = orderFromPadding(spec, right);\n  return rightidx === leftidx + 1;\n}\nfunction orderFromPadding(spec, inner) {\n  for (var branch = 0; branch < spec.childOrder.length; branch++) {\n    var _getPadding3 = getPadding(spec, branch),\n      minPrefix = _getPadding3.minPrefix,\n      maxPrefix = _getPadding3.maxPrefix,\n      suffix = _getPadding3.suffix;\n    if (hasPadding(inner, minPrefix, maxPrefix, suffix)) {\n      return branch;\n    }\n  }\n  throw new Error(\"Cannot find any valid spacing for this node\");\n}\nfunction hasPadding(op, minPrefix, maxPrefix, suffix) {\n  if ((op.prefix || []).length < minPrefix) {\n    return false;\n  }\n  if ((op.prefix || []).length > maxPrefix) {\n    return false;\n  }\n  return (op.suffix || []).length === suffix;\n}\nfunction getPadding(spec, branch) {\n  var idx = getPosition(spec.childOrder, branch);\n  // count how many children are in the prefix\n  var prefix = idx * spec.childSize;\n  var minPrefix = prefix + spec.minPrefixLength;\n  var maxPrefix = prefix + spec.maxPrefixLength;\n  // count how many children are in the suffix\n  var suffix = (spec.childOrder.length - 1 - idx) * spec.childSize;\n  return {\n    minPrefix: minPrefix,\n    maxPrefix: maxPrefix,\n    suffix: suffix\n  };\n}\nfunction getPosition(order, branch) {\n  if (branch < 0 || branch >= order.length) {\n    throw new Error(\"Invalid branch: \".concat(branch));\n  }\n  return order.findIndex(function (val) {\n    return val === branch;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}