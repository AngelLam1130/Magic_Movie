{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StateSDKType = exports.State = exports.PacketState = exports.Packet = exports.OrderSDKType = exports.Order = exports.IdentifiedChannel = exports.Counterparty = exports.Channel = exports.Acknowledgement = void 0;\nexports.orderFromJSON = orderFromJSON;\nexports.orderToJSON = orderToJSON;\nexports.stateFromJSON = stateFromJSON;\nexports.stateToJSON = stateToJSON;\nvar _client = require(\"../../client/v1/client\");\nvar _helpers = require(\"../../../../helpers\");\nvar _m0 = _interopRequireWildcard(require(\"protobufjs/minimal\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n/**\n * State defines if a channel is in one of the following states:\n * CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.\n */\nvar State;\nexports.State = State;\n(function (State) {\n  State[State[\"STATE_UNINITIALIZED_UNSPECIFIED\"] = 0] = \"STATE_UNINITIALIZED_UNSPECIFIED\";\n  State[State[\"STATE_INIT\"] = 1] = \"STATE_INIT\";\n  State[State[\"STATE_TRYOPEN\"] = 2] = \"STATE_TRYOPEN\";\n  State[State[\"STATE_OPEN\"] = 3] = \"STATE_OPEN\";\n  State[State[\"STATE_CLOSED\"] = 4] = \"STATE_CLOSED\";\n  State[State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(State || (exports.State = State = {}));\nvar StateSDKType = State;\nexports.StateSDKType = StateSDKType;\nfunction stateFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"STATE_UNINITIALIZED_UNSPECIFIED\":\n      return State.STATE_UNINITIALIZED_UNSPECIFIED;\n    case 1:\n    case \"STATE_INIT\":\n      return State.STATE_INIT;\n    case 2:\n    case \"STATE_TRYOPEN\":\n      return State.STATE_TRYOPEN;\n    case 3:\n    case \"STATE_OPEN\":\n      return State.STATE_OPEN;\n    case 4:\n    case \"STATE_CLOSED\":\n      return State.STATE_CLOSED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return State.UNRECOGNIZED;\n  }\n}\nfunction stateToJSON(object) {\n  switch (object) {\n    case State.STATE_UNINITIALIZED_UNSPECIFIED:\n      return \"STATE_UNINITIALIZED_UNSPECIFIED\";\n    case State.STATE_INIT:\n      return \"STATE_INIT\";\n    case State.STATE_TRYOPEN:\n      return \"STATE_TRYOPEN\";\n    case State.STATE_OPEN:\n      return \"STATE_OPEN\";\n    case State.STATE_CLOSED:\n      return \"STATE_CLOSED\";\n    case State.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n/** Order defines if a channel is ORDERED or UNORDERED */\nvar Order;\nexports.Order = Order;\n(function (Order) {\n  Order[Order[\"ORDER_NONE_UNSPECIFIED\"] = 0] = \"ORDER_NONE_UNSPECIFIED\";\n  Order[Order[\"ORDER_UNORDERED\"] = 1] = \"ORDER_UNORDERED\";\n  Order[Order[\"ORDER_ORDERED\"] = 2] = \"ORDER_ORDERED\";\n  Order[Order[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Order || (exports.Order = Order = {}));\nvar OrderSDKType = Order;\nexports.OrderSDKType = OrderSDKType;\nfunction orderFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"ORDER_NONE_UNSPECIFIED\":\n      return Order.ORDER_NONE_UNSPECIFIED;\n    case 1:\n    case \"ORDER_UNORDERED\":\n      return Order.ORDER_UNORDERED;\n    case 2:\n    case \"ORDER_ORDERED\":\n      return Order.ORDER_ORDERED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return Order.UNRECOGNIZED;\n  }\n}\nfunction orderToJSON(object) {\n  switch (object) {\n    case Order.ORDER_NONE_UNSPECIFIED:\n      return \"ORDER_NONE_UNSPECIFIED\";\n    case Order.ORDER_UNORDERED:\n      return \"ORDER_UNORDERED\";\n    case Order.ORDER_ORDERED:\n      return \"ORDER_ORDERED\";\n    case Order.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n/**\n * Channel defines pipeline for exactly-once packet delivery between specific\n * modules on separate blockchains, which has at least one end capable of\n * sending packets and one end capable of receiving packets.\n */\n\nfunction createBaseChannel() {\n  return {\n    state: 0,\n    ordering: 0,\n    counterparty: Counterparty.fromPartial({}),\n    connectionHops: [],\n    version: \"\"\n  };\n}\nvar Channel = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.state !== 0) {\n      writer.uint32(8).int32(message.state);\n    }\n    if (message.ordering !== 0) {\n      writer.uint32(16).int32(message.ordering);\n    }\n    if (message.counterparty !== undefined) {\n      Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n    }\n    var _iterator = _createForOfIteratorHelper(message.connectionHops),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        writer.uint32(34).string(v);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (message.version !== \"\") {\n      writer.uint32(42).string(message.version);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseChannel();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.state = reader.int32();\n          break;\n        case 2:\n          message.ordering = reader.int32();\n          break;\n        case 3:\n          message.counterparty = Counterparty.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.connectionHops.push(reader.string());\n          break;\n        case 5:\n          message.version = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$state, _object$ordering, _object$connectionHop, _object$version;\n    var message = createBaseChannel();\n    message.state = (_object$state = object.state) !== null && _object$state !== void 0 ? _object$state : 0;\n    message.ordering = (_object$ordering = object.ordering) !== null && _object$ordering !== void 0 ? _object$ordering : 0;\n    message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? Counterparty.fromPartial(object.counterparty) : undefined;\n    message.connectionHops = ((_object$connectionHop = object.connectionHops) === null || _object$connectionHop === void 0 ? void 0 : _object$connectionHop.map(function (e) {\n      return e;\n    })) || [];\n    message.version = (_object$version = object.version) !== null && _object$version !== void 0 ? _object$version : \"\";\n    return message;\n  }\n};\nexports.Channel = Channel;\nfunction createBaseIdentifiedChannel() {\n  return {\n    state: 0,\n    ordering: 0,\n    counterparty: Counterparty.fromPartial({}),\n    connectionHops: [],\n    version: \"\",\n    portId: \"\",\n    channelId: \"\"\n  };\n}\nvar IdentifiedChannel = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.state !== 0) {\n      writer.uint32(8).int32(message.state);\n    }\n    if (message.ordering !== 0) {\n      writer.uint32(16).int32(message.ordering);\n    }\n    if (message.counterparty !== undefined) {\n      Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n    }\n    var _iterator2 = _createForOfIteratorHelper(message.connectionHops),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var v = _step2.value;\n        writer.uint32(34).string(v);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    if (message.version !== \"\") {\n      writer.uint32(42).string(message.version);\n    }\n    if (message.portId !== \"\") {\n      writer.uint32(50).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(58).string(message.channelId);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseIdentifiedChannel();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.state = reader.int32();\n          break;\n        case 2:\n          message.ordering = reader.int32();\n          break;\n        case 3:\n          message.counterparty = Counterparty.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.connectionHops.push(reader.string());\n          break;\n        case 5:\n          message.version = reader.string();\n          break;\n        case 6:\n          message.portId = reader.string();\n          break;\n        case 7:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$state2, _object$ordering2, _object$connectionHop2, _object$version2, _object$portId, _object$channelId;\n    var message = createBaseIdentifiedChannel();\n    message.state = (_object$state2 = object.state) !== null && _object$state2 !== void 0 ? _object$state2 : 0;\n    message.ordering = (_object$ordering2 = object.ordering) !== null && _object$ordering2 !== void 0 ? _object$ordering2 : 0;\n    message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? Counterparty.fromPartial(object.counterparty) : undefined;\n    message.connectionHops = ((_object$connectionHop2 = object.connectionHops) === null || _object$connectionHop2 === void 0 ? void 0 : _object$connectionHop2.map(function (e) {\n      return e;\n    })) || [];\n    message.version = (_object$version2 = object.version) !== null && _object$version2 !== void 0 ? _object$version2 : \"\";\n    message.portId = (_object$portId = object.portId) !== null && _object$portId !== void 0 ? _object$portId : \"\";\n    message.channelId = (_object$channelId = object.channelId) !== null && _object$channelId !== void 0 ? _object$channelId : \"\";\n    return message;\n  }\n};\nexports.IdentifiedChannel = IdentifiedChannel;\nfunction createBaseCounterparty() {\n  return {\n    portId: \"\",\n    channelId: \"\"\n  };\n}\nvar Counterparty = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseCounterparty();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId2, _object$channelId2;\n    var message = createBaseCounterparty();\n    message.portId = (_object$portId2 = object.portId) !== null && _object$portId2 !== void 0 ? _object$portId2 : \"\";\n    message.channelId = (_object$channelId2 = object.channelId) !== null && _object$channelId2 !== void 0 ? _object$channelId2 : \"\";\n    return message;\n  }\n};\nexports.Counterparty = Counterparty;\nfunction createBasePacket() {\n  return {\n    sequence: _helpers.Long.UZERO,\n    sourcePort: \"\",\n    sourceChannel: \"\",\n    destinationPort: \"\",\n    destinationChannel: \"\",\n    data: new Uint8Array(),\n    timeoutHeight: _client.Height.fromPartial({}),\n    timeoutTimestamp: _helpers.Long.UZERO\n  };\n}\nvar Packet = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (!message.sequence.isZero()) {\n      writer.uint32(8).uint64(message.sequence);\n    }\n    if (message.sourcePort !== \"\") {\n      writer.uint32(18).string(message.sourcePort);\n    }\n    if (message.sourceChannel !== \"\") {\n      writer.uint32(26).string(message.sourceChannel);\n    }\n    if (message.destinationPort !== \"\") {\n      writer.uint32(34).string(message.destinationPort);\n    }\n    if (message.destinationChannel !== \"\") {\n      writer.uint32(42).string(message.destinationChannel);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(50).bytes(message.data);\n    }\n    if (message.timeoutHeight !== undefined) {\n      _client.Height.encode(message.timeoutHeight, writer.uint32(58).fork()).ldelim();\n    }\n    if (!message.timeoutTimestamp.isZero()) {\n      writer.uint32(64).uint64(message.timeoutTimestamp);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBasePacket();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sequence = reader.uint64();\n          break;\n        case 2:\n          message.sourcePort = reader.string();\n          break;\n        case 3:\n          message.sourceChannel = reader.string();\n          break;\n        case 4:\n          message.destinationPort = reader.string();\n          break;\n        case 5:\n          message.destinationChannel = reader.string();\n          break;\n        case 6:\n          message.data = reader.bytes();\n          break;\n        case 7:\n          message.timeoutHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 8:\n          message.timeoutTimestamp = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$sourcePort, _object$sourceChannel, _object$destinationPo, _object$destinationCh, _object$data;\n    var message = createBasePacket();\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? _helpers.Long.fromValue(object.sequence) : _helpers.Long.UZERO;\n    message.sourcePort = (_object$sourcePort = object.sourcePort) !== null && _object$sourcePort !== void 0 ? _object$sourcePort : \"\";\n    message.sourceChannel = (_object$sourceChannel = object.sourceChannel) !== null && _object$sourceChannel !== void 0 ? _object$sourceChannel : \"\";\n    message.destinationPort = (_object$destinationPo = object.destinationPort) !== null && _object$destinationPo !== void 0 ? _object$destinationPo : \"\";\n    message.destinationChannel = (_object$destinationCh = object.destinationChannel) !== null && _object$destinationCh !== void 0 ? _object$destinationCh : \"\";\n    message.data = (_object$data = object.data) !== null && _object$data !== void 0 ? _object$data : new Uint8Array();\n    message.timeoutHeight = object.timeoutHeight !== undefined && object.timeoutHeight !== null ? _client.Height.fromPartial(object.timeoutHeight) : undefined;\n    message.timeoutTimestamp = object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null ? _helpers.Long.fromValue(object.timeoutTimestamp) : _helpers.Long.UZERO;\n    return message;\n  }\n};\nexports.Packet = Packet;\nfunction createBasePacketState() {\n  return {\n    portId: \"\",\n    channelId: \"\",\n    sequence: _helpers.Long.UZERO,\n    data: new Uint8Array()\n  };\n}\nvar PacketState = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(34).bytes(message.data);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBasePacketState();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        case 4:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId3, _object$channelId3, _object$data2;\n    var message = createBasePacketState();\n    message.portId = (_object$portId3 = object.portId) !== null && _object$portId3 !== void 0 ? _object$portId3 : \"\";\n    message.channelId = (_object$channelId3 = object.channelId) !== null && _object$channelId3 !== void 0 ? _object$channelId3 : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? _helpers.Long.fromValue(object.sequence) : _helpers.Long.UZERO;\n    message.data = (_object$data2 = object.data) !== null && _object$data2 !== void 0 ? _object$data2 : new Uint8Array();\n    return message;\n  }\n};\nexports.PacketState = PacketState;\nfunction createBaseAcknowledgement() {\n  return {\n    result: undefined,\n    error: undefined\n  };\n}\nvar Acknowledgement = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.result !== undefined) {\n      writer.uint32(170).bytes(message.result);\n    }\n    if (message.error !== undefined) {\n      writer.uint32(178).string(message.error);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseAcknowledgement();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 21:\n          message.result = reader.bytes();\n          break;\n        case 22:\n          message.error = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$result, _object$error;\n    var message = createBaseAcknowledgement();\n    message.result = (_object$result = object.result) !== null && _object$result !== void 0 ? _object$result : undefined;\n    message.error = (_object$error = object.error) !== null && _object$error !== void 0 ? _object$error : undefined;\n    return message;\n  }\n};\nexports.Acknowledgement = Acknowledgement;","map":null,"metadata":{},"sourceType":"script"}