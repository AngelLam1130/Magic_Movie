{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst query_1 = require(\"cosmjs-types/cosmwasm/wasm/v1/query\");\nconst long_1 = __importDefault(require(\"long\"));\nfunction setupWasmExtension(base) {\n  const rpc = (0, stargate_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    wasm: {\n      listCodeInfo: async paginationKey => {\n        const request = {\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.Codes(request);\n      },\n      getCode: async id => {\n        const request = {\n          codeId: long_1.default.fromNumber(id)\n        };\n        return queryService.Code(request);\n      },\n      listContractsByCodeId: async (id, paginationKey) => {\n        const request = {\n          codeId: long_1.default.fromNumber(id),\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.ContractsByCode(request);\n      },\n      getContractInfo: async address => {\n        const request = {\n          address: address\n        };\n        return queryService.ContractInfo(request);\n      },\n      getContractCodeHistory: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.ContractHistory(request);\n      },\n      getAllContractState: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.AllContractState(request);\n      },\n      queryContractRaw: async (address, key) => {\n        const request = {\n          address: address,\n          queryData: key\n        };\n        return queryService.RawContractState(request);\n      },\n      queryContractSmart: async (address, query) => {\n        const request = {\n          address: address,\n          queryData: (0, encoding_1.toUtf8)(JSON.stringify(query))\n        };\n        const {\n          data\n        } = await queryService.SmartContractState(request);\n        // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n        let responseText;\n        try {\n          responseText = (0, encoding_1.fromUtf8)(data);\n        } catch (error) {\n          throw new Error(`Could not UTF-8 decode smart query response from contract: ${error}`);\n        }\n        try {\n          return JSON.parse(responseText);\n        } catch (error) {\n          throw new Error(`Could not JSON parse smart query response from contract: ${error}`);\n        }\n      }\n    }\n  };\n}\nexports.setupWasmExtension = setupWasmExtension;","map":{"version":3,"names":["encoding_1","require","stargate_1","query_1","long_1","__importDefault","setupWasmExtension","base","rpc","createProtobufRpcClient","queryService","QueryClientImpl","wasm","listCodeInfo","paginationKey","request","pagination","createPagination","Codes","getCode","id","codeId","default","fromNumber","Code","listContractsByCodeId","ContractsByCode","getContractInfo","address","ContractInfo","getContractCodeHistory","ContractHistory","getAllContractState","AllContractState","queryContractRaw","key","queryData","RawContractState","queryContractSmart","query","toUtf8","JSON","stringify","data","SmartContractState","responseText","fromUtf8","error","Error","parse","exports"],"sources":["../../../src/modules/wasm/queries.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}