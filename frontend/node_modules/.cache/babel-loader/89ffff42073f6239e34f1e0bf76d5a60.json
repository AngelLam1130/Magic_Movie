{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryClient = void 0;\n/* eslint-disable no-dupe-class-members, @typescript-eslint/ban-types, @typescript-eslint/naming-convention */\nvar ics23_1 = require(\"@confio/ics23\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar stream_1 = require(\"@cosmjs/stream\");\nvar utils_1 = require(\"@cosmjs/utils\");\nfunction checkAndParseOp(op, kind, key) {\n  if (op.type !== kind) {\n    throw new Error(\"Op expected to be \".concat(kind, \", got \\\"\").concat(op.type));\n  }\n  if (!(0, utils_1.arrayContentEquals)(key, op.key)) {\n    throw new Error(\"Proven key different than queried key.\\nQuery: \".concat((0, encoding_1.toHex)(key), \"\\nProven: \").concat((0, encoding_1.toHex)(op.key)));\n  }\n  return ics23_1.ics23.CommitmentProof.decode(op.data);\n}\nvar QueryClient = /*#__PURE__*/function (_queryVerified, _queryStoreVerified, _queryRawProof, _queryUnverified, _queryAbci, _getNextHeader) {\n  function QueryClient(tmClient) {\n    _classCallCheck(this, QueryClient);\n    this.tmClient = tmClient;\n  }\n  _createClass(QueryClient, [{\n    key: \"queryVerified\",\n    /**\n     * @deprecated use queryStoreVerified instead\n     */\n    value: function queryVerified(_x, _x2, _x3) {\n      return (_queryVerified = _queryVerified || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(store, queryKey, desiredHeight) {\n        var _yield$this$queryStor, value;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.queryStoreVerified(store, queryKey, desiredHeight);\n            case 2:\n              _yield$this$queryStor = _context.sent;\n              value = _yield$this$queryStor.value;\n              return _context.abrupt(\"return\", value);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Queries the database store with a proof, which is then verified.\n     *\n     * Please note: the current implementation trusts block headers it gets from the PRC endpoint.\n     */\n  }, {\n    key: \"queryStoreVerified\",\n    value: function queryStoreVerified(_x4, _x5, _x6) {\n      return (_queryStoreVerified = _queryStoreVerified || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(store, queryKey, desiredHeight) {\n        var _yield$this$queryRawP, height, proof, key, value, subProof, storeProof, header;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.queryRawProof(store, queryKey, desiredHeight);\n            case 2:\n              _yield$this$queryRawP = _context2.sent;\n              height = _yield$this$queryRawP.height;\n              proof = _yield$this$queryRawP.proof;\n              key = _yield$this$queryRawP.key;\n              value = _yield$this$queryRawP.value;\n              subProof = checkAndParseOp(proof.ops[0], \"ics23:iavl\", queryKey);\n              storeProof = checkAndParseOp(proof.ops[1], \"ics23:simple\", (0, encoding_1.toAscii)(store)); // this must always be existence, if the store is not a typo\n              (0, utils_1.assert)(storeProof.exist);\n              (0, utils_1.assert)(storeProof.exist.value);\n              // this may be exist or non-exist, depends on response\n              if (!value || value.length === 0) {\n                // non-existence check\n                (0, utils_1.assert)(subProof.nonexist);\n                // the subproof must map the desired key to the \"value\" of the storeProof\n                (0, ics23_1.verifyNonExistence)(subProof.nonexist, ics23_1.iavlSpec, storeProof.exist.value, queryKey);\n              } else {\n                // existence check\n                (0, utils_1.assert)(subProof.exist);\n                (0, utils_1.assert)(subProof.exist.value);\n                // the subproof must map the desired key to the \"value\" of the storeProof\n                (0, ics23_1.verifyExistence)(subProof.exist, ics23_1.iavlSpec, storeProof.exist.value, queryKey, value);\n              }\n              // the store proof must map its declared value (root of subProof) to the appHash of the next block\n              _context2.next = 14;\n              return this.getNextHeader(height);\n            case 14:\n              header = _context2.sent;\n              (0, ics23_1.verifyExistence)(storeProof.exist, ics23_1.tendermintSpec, header.appHash, (0, encoding_1.toAscii)(store), storeProof.exist.value);\n              return _context2.abrupt(\"return\", {\n                key: key,\n                value: value,\n                height: height\n              });\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"queryRawProof\",\n    value: function queryRawProof(_x7, _x8, _x9) {\n      return (_queryRawProof = _queryRawProof || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(store, queryKey, desiredHeight) {\n        var _a, _yield$this$tmClient$, key, value, height, proof, code, log;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.tmClient.abciQuery({\n                // we need the StoreKey for the module, not the module name\n                // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L12\n                path: \"/store/\".concat(store, \"/key\"),\n                data: queryKey,\n                prove: true,\n                height: desiredHeight\n              });\n            case 2:\n              _yield$this$tmClient$ = _context3.sent;\n              key = _yield$this$tmClient$.key;\n              value = _yield$this$tmClient$.value;\n              height = _yield$this$tmClient$.height;\n              proof = _yield$this$tmClient$.proof;\n              code = _yield$this$tmClient$.code;\n              log = _yield$this$tmClient$.log;\n              if (!code) {\n                _context3.next = 11;\n                break;\n              }\n              throw new Error(\"Query failed with (\".concat(code, \"): \").concat(log));\n            case 11:\n              if ((0, utils_1.arrayContentEquals)(queryKey, key)) {\n                _context3.next = 13;\n                break;\n              }\n              throw new Error(\"Response key \".concat((0, encoding_1.toHex)(key), \" doesn't match query key \").concat((0, encoding_1.toHex)(queryKey)));\n            case 13:\n              if (height) {\n                _context3.next = 15;\n                break;\n              }\n              throw new Error(\"No query height returned\");\n            case 15:\n              if (!(!proof || proof.ops.length !== 2)) {\n                _context3.next = 17;\n                break;\n              }\n              throw new Error(\"Expected 2 proof ops, got \".concat((_a = proof === null || proof === void 0 ? void 0 : proof.ops.length) !== null && _a !== void 0 ? _a : 0, \". Are you using stargate?\"));\n            case 17:\n              // we don't need the results, but we can ensure the data is the proper format\n              checkAndParseOp(proof.ops[0], \"ics23:iavl\", key);\n              checkAndParseOp(proof.ops[1], \"ics23:simple\", (0, encoding_1.toAscii)(store));\n              return _context3.abrupt(\"return\", {\n                key: key,\n                value: value,\n                height: height,\n                // need to clone this: readonly input / writeable output\n                proof: {\n                  ops: _toConsumableArray(proof.ops)\n                }\n              });\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Performs an ABCI query to Tendermint without requesting a proof.\n     *\n     * @deprecated use queryAbci instead\n     */\n  }, {\n    key: \"queryUnverified\",\n    value: function queryUnverified(_x10, _x11, _x12) {\n      return (_queryUnverified = _queryUnverified || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(path, request, desiredHeight) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.queryAbci(path, request, desiredHeight);\n            case 2:\n              response = _context4.sent;\n              return _context4.abrupt(\"return\", response.value);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Performs an ABCI query to Tendermint without requesting a proof.\n     *\n     * If the `desiredHeight` is set, a particular height is requested. Otherwise\n     * the latest height is requested. The response contains the actual height of\n     * the query.\n     */\n  }, {\n    key: \"queryAbci\",\n    value: function queryAbci(_x13, _x14, _x15) {\n      return (_queryAbci = _queryAbci || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(path, request, desiredHeight) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.tmClient.abciQuery({\n                path: path,\n                data: request,\n                prove: false,\n                height: desiredHeight\n              });\n            case 2:\n              response = _context5.sent;\n              if (!response.code) {\n                _context5.next = 5;\n                break;\n              }\n              throw new Error(\"Query failed with (\".concat(response.code, \"): \").concat(response.log));\n            case 5:\n              if (response.height) {\n                _context5.next = 7;\n                break;\n              }\n              throw new Error(\"No query height returned\");\n            case 7:\n              return _context5.abrupt(\"return\", {\n                value: response.value,\n                height: response.height\n              });\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    } // this must return the header for height+1\n    // throws an error if height is 0 or undefined\n  }, {\n    key: \"getNextHeader\",\n    value: function getNextHeader(_x16) {\n      return (_getNextHeader = _getNextHeader || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(height) {\n        var searchHeight, nextHeader, headersSubscription, firstHeader, correctHeader;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              (0, utils_1.assertDefined)(height);\n              if (!(height === 0)) {\n                _context6.next = 3;\n                break;\n              }\n              throw new Error(\"Query returned height 0, cannot prove it\");\n            case 3:\n              searchHeight = height + 1;\n              try {\n                headersSubscription = this.tmClient.subscribeNewBlockHeader();\n              } catch (_a) {\n                // Ignore exception caused by non-WebSocket Tendermint clients\n              }\n              if (!headersSubscription) {\n                _context6.next = 10;\n                break;\n              }\n              _context6.next = 8;\n              return (0, stream_1.firstEvent)(headersSubscription);\n            case 8:\n              firstHeader = _context6.sent;\n              // The first header we get might not be n+1 but n+2 or even higher. In such cases we fall back on a query.\n              if (firstHeader.height === searchHeight) {\n                nextHeader = firstHeader;\n              }\n            case 10:\n              if (nextHeader) {\n                _context6.next = 22;\n                break;\n              }\n              _context6.next = 13;\n              return this.tmClient.blockchain(height, searchHeight);\n            case 13:\n              correctHeader = _context6.sent.blockMetas.map(function (meta) {\n                return meta.header;\n              }).find(function (h) {\n                return h.height === searchHeight;\n              });\n              if (!correctHeader) {\n                _context6.next = 18;\n                break;\n              }\n              nextHeader = correctHeader;\n              _context6.next = 20;\n              break;\n            case 18:\n              _context6.next = 20;\n              return (0, utils_1.sleep)(1000);\n            case 20:\n              _context6.next = 10;\n              break;\n            case 22:\n              (0, utils_1.assert)(nextHeader.height === searchHeight, \"Got wrong header. This is a bug in the logic above.\");\n              return _context6.abrupt(\"return\", nextHeader);\n            case 24:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }))).apply(this, arguments);\n    }\n  }], [{\n    key: \"withExtensions\",\n    value: function withExtensions(tmClient) {\n      var client = new QueryClient(tmClient);\n      for (var _len = arguments.length, extensionSetups = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        extensionSetups[_key - 1] = arguments[_key];\n      }\n      var extensions = extensionSetups.map(function (setupExtension) {\n        return setupExtension(client);\n      });\n      var _iterator = _createForOfIteratorHelper(extensions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var extension = _step.value;\n          (0, utils_1.assert)((0, utils_1.isNonNullObject)(extension), \"Extension must be a non-null object\");\n          for (var _i = 0, _Object$entries = Object.entries(extension); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              moduleKey = _Object$entries$_i[0],\n              moduleValue = _Object$entries$_i[1];\n            (0, utils_1.assert)((0, utils_1.isNonNullObject)(moduleValue), \"Module must be a non-null object. Found type \".concat(typeof moduleValue, \" for module \\\"\").concat(moduleKey, \"\\\".\"));\n            var current = client[moduleKey] || {};\n            client[moduleKey] = _objectSpread({}, current, moduleValue);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return client;\n    }\n  }]);\n  return QueryClient;\n}();\nexports.QueryClient = QueryClient;","map":null,"metadata":{},"sourceType":"script"}