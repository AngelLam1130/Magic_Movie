{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCoins = exports.parseCoins = exports.coins = exports.coin = void 0;\nvar math_1 = require(\"@cosmjs/math\");\n/**\n * Creates a coin.\n *\n * If your values do not exceed the safe integer range of JS numbers (53 bit),\n * you can use the number type here. This is the case for all typical Cosmos SDK\n * chains that use the default 6 decimals.\n *\n * In case you need to supportr larger values, use unsigned integer strings instead.\n */\nfunction coin(amount, denom) {\n  var outAmount;\n  if (typeof amount === \"number\") {\n    try {\n      outAmount = new math_1.Uint53(amount).toString();\n    } catch (_err) {\n      throw new Error(\"Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.\");\n    }\n  } else {\n    if (!amount.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid unsigned integer string format\");\n    }\n    outAmount = amount.replace(/^0*/, \"\") || \"0\";\n  }\n  return {\n    amount: outAmount,\n    denom: denom\n  };\n}\nexports.coin = coin;\n/**\n * Creates a list of coins with one element.\n */\nfunction coins(amount, denom) {\n  return [coin(amount, denom)];\n}\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * A Stargate-ready variant of this function is available via:\n *\n * ```\n * import { parseCoins } from \"@cosmjs/proto-signing\";\n * // or\n * import { parseCoins } from \"@cosmjs/stargate\";\n * ```\n */\nfunction parseCoins(input) {\n  return input.replace(/\\s/g, \"\").split(\",\").filter(Boolean).map(function (part) {\n    var match = part.match(/^([0-9]+)([a-zA-Z]+)/);\n    if (!match) throw new Error(\"Got an invalid coin string\");\n    return {\n      amount: match[1].replace(/^0+/, \"\") || \"0\",\n      denom: match[2]\n    };\n  });\n}\nexports.parseCoins = parseCoins;\n/**\n * Function to sum up coins with type Coin\n */\nfunction addCoins(lhs, rhs) {\n  if (lhs.denom !== rhs.denom) throw new Error(\"Trying to add two coins with different denoms\");\n  return {\n    amount: math_1.Decimal.fromAtomics(lhs.amount, 0).plus(math_1.Decimal.fromAtomics(rhs.amount, 0)).atomics,\n    denom: lhs.denom\n  };\n}\nexports.addCoins = addCoins;","map":null,"metadata":{},"sourceType":"script"}