{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.smallIntToApi = exports.apiToBigInt = exports.apiToSmallInt = void 0;\nvar math_1 = require(\"@cosmjs/math\");\nvar encodings_1 = require(\"./tendermint34/encodings\");\n/**\n * Takes an integer value from the Tendermint RPC API and\n * returns it as number.\n *\n * Only works within the safe integer range.\n */\nfunction apiToSmallInt(input) {\n  var asInt = typeof input === \"number\" ? new math_1.Int53(input) : math_1.Int53.fromString(input);\n  return asInt.toNumber();\n}\nexports.apiToSmallInt = apiToSmallInt;\n/**\n * Takes an integer value from the Tendermint RPC API and\n * returns it as BigInt.\n *\n * This supports the full uint64 and int64 ranges.\n */\nfunction apiToBigInt(input) {\n  (0, encodings_1.assertString)(input); // Runtime check on top of TypeScript just to be safe for semi-trusted API types\n  if (!input.match(/^-?[0-9]+$/)) {\n    throw new Error(\"Invalid string format\");\n  }\n  return BigInt(input);\n}\nexports.apiToBigInt = apiToBigInt;\n/**\n * Takes an integer in the safe integer range and returns\n * a string representation to be used in the Tendermint RPC API.\n */\nfunction smallIntToApi(num) {\n  return new math_1.Int53(num).toString();\n}\nexports.smallIntToApi = smallIntToApi;","map":null,"metadata":{},"sourceType":"script"}