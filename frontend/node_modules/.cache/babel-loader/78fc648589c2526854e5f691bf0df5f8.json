{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = void 0;\nvar _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));\nvar _asyncToGenerator2 = _interopRequireDefault(require('@babel/runtime/helpers/asyncToGenerator'));\nvar _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));\nvar _react = require('react');\nvar _core = require('@sei-js/core');\nvar _provider = require('../../provider');\nvar useCosmWasmClient = function useCosmWasmClient(customRpcUrl) {\n  var _useContext = (0, _react.useContext)(_provider.SeiWalletContext),\n    rpcUrl = _useContext.rpcUrl,\n    chainId = _useContext.chainId;\n  var _useState = (0, _react.useState)(true),\n    _useState2 = (0, _slicedToArray2['default'])(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = (0, _react.useState)(),\n    _useState4 = (0, _slicedToArray2['default'])(_useState3, 2),\n    cosmWasmClient = _useState4[0],\n    setCosmWasmClient = _useState4[1];\n  (0, _react.useEffect)(function () {\n    var getClient = /*#__PURE__*/function () {\n      var _ref = (0, _asyncToGenerator2['default'])( /*#__PURE__*/_regenerator['default'].mark(function _callee() {\n        var client;\n        return _regenerator['default'].wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              if (!(!rpcUrl || !chainId)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt('return');\n            case 3:\n              setIsLoading(true);\n              _context.next = 6;\n              return (0, _core.getCosmWasmClient)(customRpcUrl || rpcUrl);\n            case 6:\n              client = _context.sent;\n              setCosmWasmClient(client);\n              setIsLoading(false);\n              _context.next = 14;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context['catch'](0);\n              console.error('Error creating cosmwasm client');\n            case 14:\n            case 'end':\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 11]]);\n      }));\n      return function getClient() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    getClient();\n  }, [customRpcUrl, rpcUrl, chainId]);\n  return {\n    isLoading: isLoading,\n    cosmWasmClient: cosmWasmClient\n  };\n};\nvar _default = useCosmWasmClient;\nexports['default'] = _default;","map":{"version":3,"names":["_react","require","_core","_provider","useCosmWasmClient","customRpcUrl","_useContext","useContext","SeiWalletContext","rpcUrl","chainId","_useState","useState","_slicedToArray2","_useState2","_useState3","_useState4","useEffect","getClient","_ref","_asyncToGenerator2","_regenerator","mark","_callee","client","wrap","_callee$","_context","prev","next","abrupt","getCosmWasmClient","sent","t0","console","error","stop","apply","arguments"],"sources":["../../../../src/lib/hooks/useCosmWasmClient/useCosmWasmClient.ts"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { getCosmWasmClient } from '@sei-js/core';\nimport { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';\n\nimport { SeiWalletContext } from '../../provider';\n\nexport type UseCosmWasmClient = {\n\tisLoading: boolean;\n\tcosmWasmClient?: CosmWasmClient;\n};\n\nconst useCosmWasmClient = (customRpcUrl?: string): UseCosmWasmClient => {\n\tconst { rpcUrl, chainId } = useContext(SeiWalletContext);\n\n\tconst [isLoading, setIsLoading] = useState<boolean>(true);\n\tconst [cosmWasmClient, setCosmWasmClient] = useState<CosmWasmClient>();\n\n\tuseEffect(() => {\n\t\tconst getClient = async () => {\n\t\t\ttry {\n\t\t\t\tif (!rpcUrl || !chainId) return;\n\t\t\t\tsetIsLoading(true);\n\t\t\t\tconst client = await getCosmWasmClient(customRpcUrl || rpcUrl);\n\t\t\t\tsetCosmWasmClient(client);\n\t\t\t\tsetIsLoading(false);\n\t\t\t} catch {\n\t\t\t\tconsole.error('Error creating cosmwasm client');\n\t\t\t}\n\t\t};\n\n\t\tgetClient();\n\t}, [customRpcUrl, rpcUrl, chainId]);\n\n\treturn { isLoading, cosmWasmClient };\n};\n\nexport default useCosmWasmClient;\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAGA,IAAAE,SAAA,GAAAF,OAAA;AAOA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,YAAqB,EAAwB;MACvEC,WAAA,IAA4B,GAAAN,MAAA,CAAAO,UAAA,EAAUJ,SAAC,CAAAK,gBAAA,CAAgB;UAA/C,GAAMF,WAAA,CAAAG,MAAN;WAAQ,GAAOH,WAAA,CAAAI,OAAP;MAEhBC,SAAA,IAAkC,GAAAX,MAAA,CAAAY,QAAA,EAAQ,IAAU,CAAI;cAAC,OAAAC,eAAA,aAAAF,SAAA;aAAlD,GAASG,UAAA;gBAAE,GAAYA,UAAA;MAC9BC,UAAA,IAA4C,GAAAf,MAAA,CAAAY,QAAA,EAAQ;cAAkB,OAAAC,eAAA,aAAAE,UAAA;kBAA/D,GAAcC,UAAA;qBAAE,GAAiBA,UAAA;GAExC,GAAAhB,MAAA,CAAAiB,SAAA,E,YACO;QAASC,SAAA;UAAGC,IAAA,OAAAC,kBAAA,c,aAAAC,YAAA,YAAAC,IAAA,UAAAC,QAAA;YAAAC,MAAA;eAAAH,YAAA,YAAAI,IAAA,C,SAAAC,SAAAC,QAAA;iBAAA,G,QAEOA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;kBAAA;sBAAA,CAAAD,IAAA;kBAAA,GAAAnB,MAAA,KAAAC,OAAA;gBAAAiB,QAAA,CAAAE,IAAA;;;qBACJF,QACE,CAAAG,MAAA;iBAAyC;0BAAlD;sBACZ,CAAAD,IAAA;qBACA,IAAA3B,KAAa,CAAA6B,iBAAM,EAAA1B,YAAA,IAAAI,MAAA;iBAAC;oBAAA,GAAAkB,QAAA,CAAAK,IAAA;+BAAA,CAAAR,MAAA;0BAAA;sBAAA,CAAAK,IAAA;;iBAE4B;sBAAA,CAAAD,IAAA;sBAAA,CAAAK,EAAA,GAAAN,QAAA;cAAAO,OAAA,CAAAC,KAAA;YAAA;YAEjD;cAAA,OAAAR,QAVK,CAAAS,IAAS;UAAA;QAAA,GAUdb,OAAA,EAED,MACG,SAEJ;MAAS,EAAW;MAAgB,gBAAAL,UAAA;QACpC,OAAAC,IAAA,CAAAkB,KAAA,OAAAC,SAAA;MAAC;IAE8B"},"metadata":{},"sourceType":"script"}