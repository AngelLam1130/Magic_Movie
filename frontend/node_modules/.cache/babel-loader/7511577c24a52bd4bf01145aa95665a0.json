{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LCDQueryClient = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar LCDQueryClient = /*#__PURE__*/function () {\n  function LCDQueryClient(_ref) {\n    var requestClient = _ref.requestClient;\n    (0, _classCallCheck2[\"default\"])(this, LCDQueryClient);\n    (0, _defineProperty2[\"default\"])(this, \"req\", void 0);\n    this.req = requestClient;\n    this.params = this.params.bind(this);\n    this.denomAuthorityMetadata = this.denomAuthorityMetadata.bind(this);\n    this.denomsFromCreator = this.denomsFromCreator.bind(this);\n  }\n  /* Params defines a gRPC query method that returns the tokenfactory module's\n   parameters. */\n  (0, _createClass2[\"default\"])(LCDQueryClient, [{\n    key: \"params\",\n    value: function () {\n      var _params2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var _params,\n          endpoint,\n          _args = arguments;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              endpoint = \"sei-protocol/seichain/tokenfactory/params\";\n              _context.next = 4;\n              return this.req.get(endpoint);\n            case 4:\n              return _context.abrupt(\"return\", _context.sent);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function params() {\n        return _params2.apply(this, arguments);\n      }\n      return params;\n    }()\n    /* DenomAuthorityMetadata defines a gRPC query method for fetching\n     DenomAuthorityMetadata for a particular denom. */\n  }, {\n    key: \"denomAuthorityMetadata\",\n    value: function () {\n      var _denomAuthorityMetadata = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              endpoint = \"sei-protocol/seichain/tokenfactory/denoms/\".concat(params.denom, \"/authority_metadata\");\n              _context2.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function denomAuthorityMetadata(_x) {\n        return _denomAuthorityMetadata.apply(this, arguments);\n      }\n      return denomAuthorityMetadata;\n    }()\n    /* DenomsFromCreator defines a gRPC query method for fetching all\n     denominations created by a specific admin/creator. */\n  }, {\n    key: \"denomsFromCreator\",\n    value: function () {\n      var _denomsFromCreator = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              endpoint = \"sei-protocol/seichain/tokenfactory/denoms_from_creator/\".concat(params.creator);\n              _context3.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function denomsFromCreator(_x2) {\n        return _denomsFromCreator.apply(this, arguments);\n      }\n      return denomsFromCreator;\n    }()\n  }]);\n  return LCDQueryClient;\n}();\nexports.LCDQueryClient = LCDQueryClient;","map":null,"metadata":{},"sourceType":"script"}