{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StargateClient = exports.BroadcastTxError = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst accounts_1 = require(\"./accounts\");\nconst events_1 = require(\"./events\");\nconst modules_1 = require(\"./modules\");\nconst queryclient_1 = require(\"./queryclient\");\nconst search_1 = require(\"./search\");\nclass TimeoutError extends Error {\n  constructor(message, txId) {\n    super(message);\n    this.txId = txId;\n  }\n}\nexports.TimeoutError = TimeoutError;\nfunction isDeliverTxFailure(result) {\n  return !!result.code;\n}\nexports.isDeliverTxFailure = isDeliverTxFailure;\nfunction isDeliverTxSuccess(result) {\n  return !isDeliverTxFailure(result);\n}\nexports.isDeliverTxSuccess = isDeliverTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxSuccess(result) {\n  if (isDeliverTxFailure(result)) {\n    throw new Error(`Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\nexports.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;\n/**\n * Ensures the given result is a failure. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxFailure(result) {\n  if (isDeliverTxSuccess(result)) {\n    throw new Error(`Transaction ${result.transactionHash} did not fail at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\nexports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;\n/**\n * An error when broadcasting the transaction. This contains the CheckTx errors\n * from the blockchain. Once a transaction is included in a block no BroadcastTxError\n * is thrown, even if the execution fails (DeliverTx errors).\n */\nclass BroadcastTxError extends Error {\n  constructor(code, codespace, log) {\n    super(`Broadcasting transaction failed with code ${code} (codespace: ${codespace}). Log: ${log}`);\n    this.code = code;\n    this.codespace = codespace;\n    this.log = log;\n  }\n}\nexports.BroadcastTxError = BroadcastTxError;\nclass StargateClient {\n  constructor(tmClient, options) {\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = queryclient_1.QueryClient.withExtensions(tmClient, modules_1.setupAuthExtension, modules_1.setupBankExtension, modules_1.setupStakingExtension, modules_1.setupTxExtension);\n    }\n    const {\n      accountParser = accounts_1.accountFromAny\n    } = options;\n    this.accountParser = accountParser;\n  }\n  static async connect(endpoint, options = {}) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new StargateClient(tmClient, options);\n  }\n  getTmClient() {\n    return this.tmClient;\n  }\n  forceGetTmClient() {\n    if (!this.tmClient) {\n      throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n    }\n    return this.tmClient;\n  }\n  getQueryClient() {\n    return this.queryClient;\n  }\n  forceGetQueryClient() {\n    if (!this.queryClient) {\n      throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n    }\n    return this.queryClient;\n  }\n  async getChainId() {\n    if (!this.chainId) {\n      const response = await this.forceGetTmClient().status();\n      const chainId = response.nodeInfo.network;\n      if (!chainId) throw new Error(\"Chain ID must not be empty\");\n      this.chainId = chainId;\n    }\n    return this.chainId;\n  }\n  async getHeight() {\n    const status = await this.forceGetTmClient().status();\n    return status.syncInfo.latestBlockHeight;\n  }\n  async getAccount(searchAddress) {\n    try {\n      const account = await this.forceGetQueryClient().auth.account(searchAddress);\n      return account ? this.accountParser(account) : null;\n    } catch (error) {\n      if (/rpc error: code = NotFound/i.test(error.toString())) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  async getSequence(address) {\n    const account = await this.getAccount(address);\n    if (!account) {\n      throw new Error(`Account '${address}' does not exist on chain. Send some tokens there before trying to query sequence.`);\n    }\n    return {\n      accountNumber: account.accountNumber,\n      sequence: account.sequence\n    };\n  }\n  async getBlock(height) {\n    const response = await this.forceGetTmClient().block(height);\n    return {\n      id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n      header: {\n        version: {\n          block: new math_1.Uint53(response.block.header.version.block).toString(),\n          app: new math_1.Uint53(response.block.header.version.app).toString()\n        },\n        height: response.block.header.height,\n        chainId: response.block.header.chainId,\n        time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time)\n      },\n      txs: response.block.txs\n    };\n  }\n  async getBalance(address, searchDenom) {\n    return this.forceGetQueryClient().bank.balance(address, searchDenom);\n  }\n  /**\n   * Queries all balances for all denoms that belong to this address.\n   *\n   * Uses the grpc queries (which iterates over the store internally), and we cannot get\n   * proofs from such a method.\n   */\n  async getAllBalances(address) {\n    return this.forceGetQueryClient().bank.allBalances(address);\n  }\n  async getBalanceStaked(address) {\n    const allDelegations = [];\n    let startAtKey = undefined;\n    do {\n      const {\n        delegationResponses,\n        pagination\n      } = await this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);\n      const loadedDelegations = delegationResponses || [];\n      allDelegations.push(...loadedDelegations);\n      startAtKey = pagination === null || pagination === void 0 ? void 0 : pagination.nextKey;\n    } while (startAtKey !== undefined && startAtKey.length !== 0);\n    const sumValues = allDelegations.reduce((previousValue, currentValue) => {\n      // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)\n      (0, utils_1.assert)(currentValue.balance);\n      return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;\n    }, null);\n    return sumValues;\n  }\n  async getDelegation(delegatorAddress, validatorAddress) {\n    var _a;\n    let delegatedAmount;\n    try {\n      delegatedAmount = (_a = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse) === null || _a === void 0 ? void 0 : _a.balance;\n    } catch (e) {\n      if (e.toString().includes(\"key not found\")) {\n        // ignore, `delegatedAmount` remains undefined\n      } else {\n        throw e;\n      }\n    }\n    return delegatedAmount || null;\n  }\n  async getTx(id) {\n    var _a;\n    const results = await this.txsQuery(`tx.hash='${id}'`);\n    return (_a = results[0]) !== null && _a !== void 0 ? _a : null;\n  }\n  async searchTx(query, filter = {}) {\n    const minHeight = filter.minHeight || 0;\n    const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n    if (maxHeight < minHeight) return []; // optional optimization\n    function withFilters(originalQuery) {\n      return `${originalQuery} AND tx.height>=${minHeight} AND tx.height<=${maxHeight}`;\n    }\n    let txs;\n    if ((0, search_1.isSearchByHeightQuery)(query)) {\n      txs = query.height >= minHeight && query.height <= maxHeight ? await this.txsQuery(`tx.height=${query.height}`) : [];\n    } else if ((0, search_1.isSearchBySentFromOrToQuery)(query)) {\n      const sentQuery = withFilters(`message.module='bank' AND transfer.sender='${query.sentFromOrTo}'`);\n      const receivedQuery = withFilters(`message.module='bank' AND transfer.recipient='${query.sentFromOrTo}'`);\n      const [sent, received] = await Promise.all([sentQuery, receivedQuery].map(rawQuery => this.txsQuery(rawQuery)));\n      const sentHashes = sent.map(t => t.hash);\n      txs = [...sent, ...received.filter(t => !sentHashes.includes(t.hash))];\n    } else if ((0, search_1.isSearchByTagsQuery)(query)) {\n      const rawQuery = withFilters(query.tags.map(t => `${t.key}='${t.value}'`).join(\" AND \"));\n      txs = await this.txsQuery(rawQuery);\n    } else {\n      throw new Error(\"Unknown query type\");\n    }\n    const filtered = txs.filter(tx => tx.height >= minHeight && tx.height <= maxHeight);\n    return filtered;\n  }\n  disconnect() {\n    if (this.tmClient) this.tmClient.disconnect();\n  }\n  /**\n   * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n   *\n   * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n   * an error is thrown.\n   *\n   * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n   *\n   * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n   * usually needs to check for execution success or failure.\n   */\n  async broadcastTx(tx, timeoutMs = 60000, pollIntervalMs = 3000) {\n    var _a;\n    let timedOut = false;\n    const txPollTimeout = setTimeout(() => {\n      timedOut = true;\n    }, timeoutMs);\n    const pollForTx = async txId => {\n      if (timedOut) {\n        throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 1000} seconds.`, txId);\n      }\n      await (0, utils_1.sleep)(pollIntervalMs);\n      const result = await this.getTx(txId);\n      return result ? {\n        code: result.code,\n        height: result.height,\n        events: result.events,\n        rawLog: result.rawLog,\n        transactionHash: txId,\n        gasUsed: result.gasUsed,\n        gasWanted: result.gasWanted\n      } : pollForTx(txId);\n    };\n    const broadcasted = await this.forceGetTmClient().broadcastTxSync({\n      tx\n    });\n    if (broadcasted.code) {\n      return Promise.reject(new BroadcastTxError(broadcasted.code, (_a = broadcasted.codespace) !== null && _a !== void 0 ? _a : \"\", broadcasted.log));\n    }\n    const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n    return new Promise((resolve, reject) => pollForTx(transactionId).then(value => {\n      clearTimeout(txPollTimeout);\n      resolve(value);\n    }, error => {\n      clearTimeout(txPollTimeout);\n      reject(error);\n    }));\n  }\n  async txsQuery(query) {\n    const results = await this.forceGetTmClient().txSearchAll({\n      query: query\n    });\n    return results.txs.map(tx => {\n      return {\n        height: tx.height,\n        hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n        code: tx.result.code,\n        events: tx.result.events.map(events_1.fromTendermint34Event),\n        rawLog: tx.result.log || \"\",\n        tx: tx.tx,\n        gasUsed: tx.result.gasUsed,\n        gasWanted: tx.result.gasWanted\n      };\n    });\n  }\n}\nexports.StargateClient = StargateClient;","map":{"version":3,"names":["amino_1","require","encoding_1","math_1","tendermint_rpc_1","utils_1","accounts_1","events_1","modules_1","queryclient_1","search_1","TimeoutError","Error","constructor","message","txId","exports","isDeliverTxFailure","result","code","isDeliverTxSuccess","assertIsDeliverTxSuccess","transactionHash","height","rawLog","assertIsDeliverTxFailure","BroadcastTxError","codespace","log","StargateClient","tmClient","options","queryClient","QueryClient","withExtensions","setupAuthExtension","setupBankExtension","setupStakingExtension","setupTxExtension","accountParser","accountFromAny","connect","endpoint","Tendermint34Client","getTmClient","forceGetTmClient","getQueryClient","forceGetQueryClient","getChainId","chainId","response","status","nodeInfo","network","getHeight","syncInfo","latestBlockHeight","getAccount","searchAddress","account","auth","error","test","toString","getSequence","address","accountNumber","sequence","getBlock","block","id","toHex","blockId","hash","toUpperCase","header","version","Uint53","app","time","toRfc3339WithNanoseconds","txs","getBalance","searchDenom","bank","balance","getAllBalances","allBalances","getBalanceStaked","allDelegations","startAtKey","undefined","delegationResponses","pagination","staking","delegatorDelegations","loadedDelegations","push","nextKey","length","sumValues","reduce","previousValue","currentValue","assert","addCoins","getDelegation","delegatorAddress","validatorAddress","delegatedAmount","_a","delegation","delegationResponse","e","includes","getTx","results","txsQuery","searchTx","query","filter","minHeight","maxHeight","Number","MAX_SAFE_INTEGER","withFilters","originalQuery","isSearchByHeightQuery","isSearchBySentFromOrToQuery","sentQuery","sentFromOrTo","receivedQuery","sent","received","Promise","all","map","rawQuery","sentHashes","t","isSearchByTagsQuery","tags","key","value","join","filtered","tx","disconnect","broadcastTx","timeoutMs","pollIntervalMs","timedOut","txPollTimeout","setTimeout","pollForTx","sleep","events","gasUsed","gasWanted","broadcasted","broadcastTxSync","reject","transactionId","resolve","then","clearTimeout","txSearchAll","fromTendermint34Event"],"sources":["../src/stargateclient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}