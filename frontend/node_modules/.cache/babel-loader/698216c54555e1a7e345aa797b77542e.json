{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StargateClient = exports.BroadcastTxError = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nvar amino_1 = require(\"@cosmjs/amino\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nvar tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar accounts_1 = require(\"./accounts\");\nvar events_1 = require(\"./events\");\nvar modules_1 = require(\"./modules\");\nvar queryclient_1 = require(\"./queryclient\");\nvar search_1 = require(\"./search\");\nvar TimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(TimeoutError, _Error);\n  function TimeoutError(message, txId) {\n    var _this;\n    _classCallCheck(this, TimeoutError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeoutError).call(this, message));\n    _this.txId = txId;\n    return _this;\n  }\n  return TimeoutError;\n}(_wrapNativeSuper(Error));\nexports.TimeoutError = TimeoutError;\nfunction isDeliverTxFailure(result) {\n  return !!result.code;\n}\nexports.isDeliverTxFailure = isDeliverTxFailure;\nfunction isDeliverTxSuccess(result) {\n  return !isDeliverTxFailure(result);\n}\nexports.isDeliverTxSuccess = isDeliverTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxSuccess(result) {\n  if (isDeliverTxFailure(result)) {\n    throw new Error(\"Error when broadcasting tx \".concat(result.transactionHash, \" at height \").concat(result.height, \". Code: \").concat(result.code, \"; Raw log: \").concat(result.rawLog));\n  }\n}\nexports.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;\n/**\n * Ensures the given result is a failure. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxFailure(result) {\n  if (isDeliverTxSuccess(result)) {\n    throw new Error(\"Transaction \".concat(result.transactionHash, \" did not fail at height \").concat(result.height, \". Code: \").concat(result.code, \"; Raw log: \").concat(result.rawLog));\n  }\n}\nexports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;\n/**\n * An error when broadcasting the transaction. This contains the CheckTx errors\n * from the blockchain. Once a transaction is included in a block no BroadcastTxError\n * is thrown, even if the execution fails (DeliverTx errors).\n */\nvar BroadcastTxError = /*#__PURE__*/function (_Error2) {\n  _inherits(BroadcastTxError, _Error2);\n  function BroadcastTxError(code, codespace, log) {\n    var _this2;\n    _classCallCheck(this, BroadcastTxError);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(BroadcastTxError).call(this, \"Broadcasting transaction failed with code \".concat(code, \" (codespace: \").concat(codespace, \"). Log: \").concat(log)));\n    _this2.code = code;\n    _this2.codespace = codespace;\n    _this2.log = log;\n    return _this2;\n  }\n  return BroadcastTxError;\n}(_wrapNativeSuper(Error));\nexports.BroadcastTxError = BroadcastTxError;\nvar StargateClient = /*#__PURE__*/function (_getChainId, _getHeight, _getAccount, _getSequence, _getBlock, _getBalance, _getAllBalances, _getBalanceStaked, _getDelegation, _getTx, _searchTx, _broadcastTx, _txsQuery, _connect) {\n  function StargateClient(tmClient, options) {\n    _classCallCheck(this, StargateClient);\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = queryclient_1.QueryClient.withExtensions(tmClient, modules_1.setupAuthExtension, modules_1.setupBankExtension, modules_1.setupStakingExtension, modules_1.setupTxExtension);\n    }\n    var _options$accountParse = options.accountParser,\n      accountParser = _options$accountParse === void 0 ? accounts_1.accountFromAny : _options$accountParse;\n    this.accountParser = accountParser;\n  }\n  _createClass(StargateClient, [{\n    key: \"getTmClient\",\n    value: function getTmClient() {\n      return this.tmClient;\n    }\n  }, {\n    key: \"forceGetTmClient\",\n    value: function forceGetTmClient() {\n      if (!this.tmClient) {\n        throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n      }\n      return this.tmClient;\n    }\n  }, {\n    key: \"getQueryClient\",\n    value: function getQueryClient() {\n      return this.queryClient;\n    }\n  }, {\n    key: \"forceGetQueryClient\",\n    value: function forceGetQueryClient() {\n      if (!this.queryClient) {\n        throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n      }\n      return this.queryClient;\n    }\n  }, {\n    key: \"getChainId\",\n    value: function getChainId() {\n      return (_getChainId = _getChainId || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, chainId;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.chainId) {\n                _context.next = 8;\n                break;\n              }\n              _context.next = 3;\n              return this.forceGetTmClient().status();\n            case 3:\n              response = _context.sent;\n              chainId = response.nodeInfo.network;\n              if (chainId) {\n                _context.next = 7;\n                break;\n              }\n              throw new Error(\"Chain ID must not be empty\");\n            case 7:\n              this.chainId = chainId;\n            case 8:\n              return _context.abrupt(\"return\", this.chainId);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return (_getHeight = _getHeight || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var status;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.forceGetTmClient().status();\n            case 2:\n              status = _context2.sent;\n              return _context2.abrupt(\"return\", status.syncInfo.latestBlockHeight);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getAccount\",\n    value: function getAccount(_x) {\n      return (_getAccount = _getAccount || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(searchAddress) {\n        var account;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return this.forceGetQueryClient().auth.account(searchAddress);\n            case 3:\n              account = _context3.sent;\n              return _context3.abrupt(\"return\", account ? this.accountParser(account) : null);\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              if (!/rpc error: code = NotFound/i.test(_context3.t0.toString())) {\n                _context3.next = 11;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 11:\n              throw _context3.t0;\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 7]]);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getSequence\",\n    value: function getSequence(_x2) {\n      return (_getSequence = _getSequence || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address) {\n        var account;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.getAccount(address);\n            case 2:\n              account = _context4.sent;\n              if (account) {\n                _context4.next = 5;\n                break;\n              }\n              throw new Error(\"Account '\".concat(address, \"' does not exist on chain. Send some tokens there before trying to query sequence.\"));\n            case 5:\n              return _context4.abrupt(\"return\", {\n                accountNumber: account.accountNumber,\n                sequence: account.sequence\n              });\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(_x3) {\n      return (_getBlock = _getBlock || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(height) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.forceGetTmClient().block(height);\n            case 2:\n              response = _context5.sent;\n              return _context5.abrupt(\"return\", {\n                id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n                header: {\n                  version: {\n                    block: new math_1.Uint53(response.block.header.version.block).toString(),\n                    app: new math_1.Uint53(response.block.header.version.app).toString()\n                  },\n                  height: response.block.header.height,\n                  chainId: response.block.header.chainId,\n                  time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time)\n                },\n                txs: response.block.txs\n              });\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(_x4, _x5) {\n      return (_getBalance = _getBalance || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(address, searchDenom) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this.forceGetQueryClient().bank.balance(address, searchDenom));\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Queries all balances for all denoms that belong to this address.\n     *\n     * Uses the grpc queries (which iterates over the store internally), and we cannot get\n     * proofs from such a method.\n     */\n  }, {\n    key: \"getAllBalances\",\n    value: function getAllBalances(_x6) {\n      return (_getAllBalances = _getAllBalances || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(address) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", this.forceGetQueryClient().bank.allBalances(address));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getBalanceStaked\",\n    value: function getBalanceStaked(_x7) {\n      return (_getBalanceStaked = _getBalanceStaked || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(address) {\n        var allDelegations, startAtKey, _yield$this$forceGetQ, delegationResponses, pagination, loadedDelegations, sumValues;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              allDelegations = [];\n              startAtKey = undefined;\n            case 2:\n              _context8.next = 4;\n              return this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);\n            case 4:\n              _yield$this$forceGetQ = _context8.sent;\n              delegationResponses = _yield$this$forceGetQ.delegationResponses;\n              pagination = _yield$this$forceGetQ.pagination;\n              loadedDelegations = delegationResponses || [];\n              allDelegations.push.apply(allDelegations, _toConsumableArray(loadedDelegations));\n              startAtKey = pagination === null || pagination === void 0 ? void 0 : pagination.nextKey;\n            case 10:\n              if (startAtKey !== undefined && startAtKey.length !== 0) {\n                _context8.next = 2;\n                break;\n              }\n            case 11:\n              sumValues = allDelegations.reduce(function (previousValue, currentValue) {\n                // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)\n                (0, utils_1.assert)(currentValue.balance);\n                return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;\n              }, null);\n              return _context8.abrupt(\"return\", sumValues);\n            case 13:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getDelegation\",\n    value: function getDelegation(_x8, _x9) {\n      return (_getDelegation = _getDelegation || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(delegatorAddress, validatorAddress) {\n        var _a, delegatedAmount;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress);\n            case 3:\n              _context9.t1 = _a = _context9.sent.delegationResponse;\n              _context9.t0 = _context9.t1 === null;\n              if (_context9.t0) {\n                _context9.next = 7;\n                break;\n              }\n              _context9.t0 = _a === void 0;\n            case 7:\n              if (!_context9.t0) {\n                _context9.next = 11;\n                break;\n              }\n              _context9.t2 = void 0;\n              _context9.next = 12;\n              break;\n            case 11:\n              _context9.t2 = _a.balance;\n            case 12:\n              delegatedAmount = _context9.t2;\n              _context9.next = 21;\n              break;\n            case 15:\n              _context9.prev = 15;\n              _context9.t3 = _context9[\"catch\"](0);\n              if (!_context9.t3.toString().includes(\"key not found\")) {\n                _context9.next = 20;\n                break;\n              }\n              _context9.next = 21;\n              break;\n            case 20:\n              throw _context9.t3;\n            case 21:\n              return _context9.abrupt(\"return\", delegatedAmount || null);\n            case 22:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 15]]);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getTx\",\n    value: function getTx(_x10) {\n      return (_getTx = _getTx || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(id) {\n        var _a, results;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.txsQuery(\"tx.hash='\".concat(id, \"'\"));\n            case 2:\n              results = _context10.sent;\n              return _context10.abrupt(\"return\", (_a = results[0]) !== null && _a !== void 0 ? _a : null);\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"searchTx\",\n    value: function searchTx(_x11) {\n      return (_searchTx = _searchTx || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(query) {\n        var _this3 = this;\n        var filter,\n          minHeight,\n          maxHeight,\n          withFilters,\n          txs,\n          sentQuery,\n          receivedQuery,\n          _yield$Promise$all,\n          _yield$Promise$all2,\n          sent,\n          received,\n          sentHashes,\n          rawQuery,\n          filtered,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              withFilters = function _withFilters(originalQuery) {\n                return \"\".concat(originalQuery, \" AND tx.height>=\").concat(minHeight, \" AND tx.height<=\").concat(maxHeight);\n              };\n              filter = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};\n              minHeight = filter.minHeight || 0;\n              maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n              if (!(maxHeight < minHeight)) {\n                _context11.next = 6;\n                break;\n              }\n              return _context11.abrupt(\"return\", []);\n            case 6:\n              if (!(0, search_1.isSearchByHeightQuery)(query)) {\n                _context11.next = 17;\n                break;\n              }\n              if (!(query.height >= minHeight && query.height <= maxHeight)) {\n                _context11.next = 13;\n                break;\n              }\n              _context11.next = 10;\n              return this.txsQuery(\"tx.height=\".concat(query.height));\n            case 10:\n              _context11.t0 = _context11.sent;\n              _context11.next = 14;\n              break;\n            case 13:\n              _context11.t0 = [];\n            case 14:\n              txs = _context11.t0;\n              _context11.next = 38;\n              break;\n            case 17:\n              if (!(0, search_1.isSearchBySentFromOrToQuery)(query)) {\n                _context11.next = 30;\n                break;\n              }\n              sentQuery = withFilters(\"message.module='bank' AND transfer.sender='\".concat(query.sentFromOrTo, \"'\"));\n              receivedQuery = withFilters(\"message.module='bank' AND transfer.recipient='\".concat(query.sentFromOrTo, \"'\"));\n              _context11.next = 22;\n              return Promise.all([sentQuery, receivedQuery].map(function (rawQuery) {\n                return _this3.txsQuery(rawQuery);\n              }));\n            case 22:\n              _yield$Promise$all = _context11.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              sent = _yield$Promise$all2[0];\n              received = _yield$Promise$all2[1];\n              sentHashes = sent.map(function (t) {\n                return t.hash;\n              });\n              txs = [].concat(_toConsumableArray(sent), _toConsumableArray(received.filter(function (t) {\n                return !sentHashes.includes(t.hash);\n              })));\n              _context11.next = 38;\n              break;\n            case 30:\n              if (!(0, search_1.isSearchByTagsQuery)(query)) {\n                _context11.next = 37;\n                break;\n              }\n              rawQuery = withFilters(query.tags.map(function (t) {\n                return \"\".concat(t.key, \"='\").concat(t.value, \"'\");\n              }).join(\" AND \"));\n              _context11.next = 34;\n              return this.txsQuery(rawQuery);\n            case 34:\n              txs = _context11.sent;\n              _context11.next = 38;\n              break;\n            case 37:\n              throw new Error(\"Unknown query type\");\n            case 38:\n              filtered = txs.filter(function (tx) {\n                return tx.height >= minHeight && tx.height <= maxHeight;\n              });\n              return _context11.abrupt(\"return\", filtered);\n            case 40:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.tmClient) this.tmClient.disconnect();\n    }\n    /**\n     * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n     *\n     * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n     * an error is thrown.\n     *\n     * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n     *\n     * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n     * usually needs to check for execution success or failure.\n     */\n  }, {\n    key: \"broadcastTx\",\n    value: function broadcastTx(_x12) {\n      return (_broadcastTx = _broadcastTx || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(tx) {\n        var _this4 = this,\n          _ref;\n        var timeoutMs,\n          pollIntervalMs,\n          _a,\n          timedOut,\n          txPollTimeout,\n          pollForTx,\n          broadcasted,\n          transactionId,\n          _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              timeoutMs = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : 60000;\n              pollIntervalMs = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : 3000;\n              timedOut = false;\n              txPollTimeout = setTimeout(function () {\n                timedOut = true;\n              }, timeoutMs);\n              pollForTx = function pollForTx(_x13) {\n                return (_ref = _ref || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(txId) {\n                  var result;\n                  return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                    while (1) switch (_context12.prev = _context12.next) {\n                      case 0:\n                        if (!timedOut) {\n                          _context12.next = 2;\n                          break;\n                        }\n                        throw new TimeoutError(\"Transaction with ID \".concat(txId, \" was submitted but was not yet found on the chain. You might want to check later. There was a wait of \").concat(timeoutMs / 1000, \" seconds.\"), txId);\n                      case 2:\n                        _context12.next = 4;\n                        return (0, utils_1.sleep)(pollIntervalMs);\n                      case 4:\n                        _context12.next = 6;\n                        return _this4.getTx(txId);\n                      case 6:\n                        result = _context12.sent;\n                        return _context12.abrupt(\"return\", result ? {\n                          code: result.code,\n                          height: result.height,\n                          events: result.events,\n                          rawLog: result.rawLog,\n                          transactionHash: txId,\n                          gasUsed: result.gasUsed,\n                          gasWanted: result.gasWanted\n                        } : pollForTx(txId));\n                      case 8:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }, _callee12);\n                }))).apply(this, arguments);\n              };\n              _context13.next = 7;\n              return this.forceGetTmClient().broadcastTxSync({\n                tx: tx\n              });\n            case 7:\n              broadcasted = _context13.sent;\n              if (!broadcasted.code) {\n                _context13.next = 10;\n                break;\n              }\n              return _context13.abrupt(\"return\", Promise.reject(new BroadcastTxError(broadcasted.code, (_a = broadcasted.codespace) !== null && _a !== void 0 ? _a : \"\", broadcasted.log)));\n            case 10:\n              transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n              return _context13.abrupt(\"return\", new Promise(function (resolve, reject) {\n                return pollForTx(transactionId).then(function (value) {\n                  clearTimeout(txPollTimeout);\n                  resolve(value);\n                }, function (error) {\n                  clearTimeout(txPollTimeout);\n                  reject(error);\n                });\n              }));\n            case 12:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"txsQuery\",\n    value: function txsQuery(_x14) {\n      return (_txsQuery = _txsQuery || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(query) {\n        var results;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.forceGetTmClient().txSearchAll({\n                query: query\n              });\n            case 2:\n              results = _context14.sent;\n              return _context14.abrupt(\"return\", results.txs.map(function (tx) {\n                return {\n                  height: tx.height,\n                  hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n                  code: tx.result.code,\n                  events: tx.result.events.map(events_1.fromTendermint34Event),\n                  rawLog: tx.result.log || \"\",\n                  tx: tx.tx,\n                  gasUsed: tx.result.gasUsed,\n                  gasWanted: tx.result.gasWanted\n                };\n              }));\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }))).apply(this, arguments);\n    }\n  }], [{\n    key: \"connect\",\n    value: function connect(_x15) {\n      return (_connect = _connect || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(endpoint) {\n        var options,\n          tmClient,\n          _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};\n              _context15.next = 3;\n              return tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n            case 3:\n              tmClient = _context15.sent;\n              return _context15.abrupt(\"return\", new StargateClient(tmClient, options));\n            case 5:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return StargateClient;\n}();\nexports.StargateClient = StargateClient;","map":null,"metadata":{},"sourceType":"script"}