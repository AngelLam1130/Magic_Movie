{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Acknowledgement = exports.PacketState = exports.Packet = exports.Counterparty = exports.IdentifiedChannel = exports.Channel = exports.orderToJSON = exports.orderFromJSON = exports.Order = exports.stateToJSON = exports.stateFromJSON = exports.State = exports.protobufPackage = void 0;\n/* eslint-disable */\nvar long_1 = __importDefault(require(\"long\"));\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nvar client_1 = require(\"../../client/v1/client\");\nexports.protobufPackage = \"ibc.core.channel.v1\";\n/**\n * State defines if a channel is in one of the following states:\n * CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.\n */\nvar State;\n(function (State) {\n  /** STATE_UNINITIALIZED_UNSPECIFIED - Default State */\n  State[State[\"STATE_UNINITIALIZED_UNSPECIFIED\"] = 0] = \"STATE_UNINITIALIZED_UNSPECIFIED\";\n  /** STATE_INIT - A channel has just started the opening handshake. */\n  State[State[\"STATE_INIT\"] = 1] = \"STATE_INIT\";\n  /** STATE_TRYOPEN - A channel has acknowledged the handshake step on the counterparty chain. */\n  State[State[\"STATE_TRYOPEN\"] = 2] = \"STATE_TRYOPEN\";\n  /**\n   * STATE_OPEN - A channel has completed the handshake. Open channels are\n   * ready to send and receive packets.\n   */\n  State[State[\"STATE_OPEN\"] = 3] = \"STATE_OPEN\";\n  /**\n   * STATE_CLOSED - A channel has been closed and can no longer be used to send or receive\n   * packets.\n   */\n  State[State[\"STATE_CLOSED\"] = 4] = \"STATE_CLOSED\";\n  State[State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(State = exports.State || (exports.State = {}));\nfunction stateFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"STATE_UNINITIALIZED_UNSPECIFIED\":\n      return State.STATE_UNINITIALIZED_UNSPECIFIED;\n    case 1:\n    case \"STATE_INIT\":\n      return State.STATE_INIT;\n    case 2:\n    case \"STATE_TRYOPEN\":\n      return State.STATE_TRYOPEN;\n    case 3:\n    case \"STATE_OPEN\":\n      return State.STATE_OPEN;\n    case 4:\n    case \"STATE_CLOSED\":\n      return State.STATE_CLOSED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return State.UNRECOGNIZED;\n  }\n}\nexports.stateFromJSON = stateFromJSON;\nfunction stateToJSON(object) {\n  switch (object) {\n    case State.STATE_UNINITIALIZED_UNSPECIFIED:\n      return \"STATE_UNINITIALIZED_UNSPECIFIED\";\n    case State.STATE_INIT:\n      return \"STATE_INIT\";\n    case State.STATE_TRYOPEN:\n      return \"STATE_TRYOPEN\";\n    case State.STATE_OPEN:\n      return \"STATE_OPEN\";\n    case State.STATE_CLOSED:\n      return \"STATE_CLOSED\";\n    case State.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\nexports.stateToJSON = stateToJSON;\n/** Order defines if a channel is ORDERED or UNORDERED */\nvar Order;\n(function (Order) {\n  /** ORDER_NONE_UNSPECIFIED - zero-value for channel ordering */\n  Order[Order[\"ORDER_NONE_UNSPECIFIED\"] = 0] = \"ORDER_NONE_UNSPECIFIED\";\n  /**\n   * ORDER_UNORDERED - packets can be delivered in any order, which may differ from the order in\n   * which they were sent.\n   */\n  Order[Order[\"ORDER_UNORDERED\"] = 1] = \"ORDER_UNORDERED\";\n  /** ORDER_ORDERED - packets are delivered exactly in the order which they were sent */\n  Order[Order[\"ORDER_ORDERED\"] = 2] = \"ORDER_ORDERED\";\n  Order[Order[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Order = exports.Order || (exports.Order = {}));\nfunction orderFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"ORDER_NONE_UNSPECIFIED\":\n      return Order.ORDER_NONE_UNSPECIFIED;\n    case 1:\n    case \"ORDER_UNORDERED\":\n      return Order.ORDER_UNORDERED;\n    case 2:\n    case \"ORDER_ORDERED\":\n      return Order.ORDER_ORDERED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return Order.UNRECOGNIZED;\n  }\n}\nexports.orderFromJSON = orderFromJSON;\nfunction orderToJSON(object) {\n  switch (object) {\n    case Order.ORDER_NONE_UNSPECIFIED:\n      return \"ORDER_NONE_UNSPECIFIED\";\n    case Order.ORDER_UNORDERED:\n      return \"ORDER_UNORDERED\";\n    case Order.ORDER_ORDERED:\n      return \"ORDER_ORDERED\";\n    case Order.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\nexports.orderToJSON = orderToJSON;\nfunction createBaseChannel() {\n  return {\n    state: 0,\n    ordering: 0,\n    counterparty: undefined,\n    connectionHops: [],\n    version: \"\"\n  };\n}\nexports.Channel = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.state !== 0) {\n      writer.uint32(8).int32(message.state);\n    }\n    if (message.ordering !== 0) {\n      writer.uint32(16).int32(message.ordering);\n    }\n    if (message.counterparty !== undefined) {\n      exports.Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n    }\n    var _iterator = _createForOfIteratorHelper(message.connectionHops),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        writer.uint32(34).string(v);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (message.version !== \"\") {\n      writer.uint32(42).string(message.version);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseChannel();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.state = reader.int32();\n          break;\n        case 2:\n          message.ordering = reader.int32();\n          break;\n        case 3:\n          message.counterparty = exports.Counterparty.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.connectionHops.push(reader.string());\n          break;\n        case 5:\n          message.version = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      state: isSet(object.state) ? stateFromJSON(object.state) : 0,\n      ordering: isSet(object.ordering) ? orderFromJSON(object.ordering) : 0,\n      counterparty: isSet(object.counterparty) ? exports.Counterparty.fromJSON(object.counterparty) : undefined,\n      connectionHops: Array.isArray(object === null || object === void 0 ? void 0 : object.connectionHops) ? object.connectionHops.map(function (e) {\n        return String(e);\n      }) : [],\n      version: isSet(object.version) ? String(object.version) : \"\"\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.state !== undefined && (obj.state = stateToJSON(message.state));\n    message.ordering !== undefined && (obj.ordering = orderToJSON(message.ordering));\n    message.counterparty !== undefined && (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);\n    if (message.connectionHops) {\n      obj.connectionHops = message.connectionHops.map(function (e) {\n        return e;\n      });\n    } else {\n      obj.connectionHops = [];\n    }\n    message.version !== undefined && (obj.version = message.version);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d;\n    var message = createBaseChannel();\n    message.state = (_a = object.state) !== null && _a !== void 0 ? _a : 0;\n    message.ordering = (_b = object.ordering) !== null && _b !== void 0 ? _b : 0;\n    message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? exports.Counterparty.fromPartial(object.counterparty) : undefined;\n    message.connectionHops = ((_c = object.connectionHops) === null || _c === void 0 ? void 0 : _c.map(function (e) {\n      return e;\n    })) || [];\n    message.version = (_d = object.version) !== null && _d !== void 0 ? _d : \"\";\n    return message;\n  }\n};\nfunction createBaseIdentifiedChannel() {\n  return {\n    state: 0,\n    ordering: 0,\n    counterparty: undefined,\n    connectionHops: [],\n    version: \"\",\n    portId: \"\",\n    channelId: \"\"\n  };\n}\nexports.IdentifiedChannel = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.state !== 0) {\n      writer.uint32(8).int32(message.state);\n    }\n    if (message.ordering !== 0) {\n      writer.uint32(16).int32(message.ordering);\n    }\n    if (message.counterparty !== undefined) {\n      exports.Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n    }\n    var _iterator2 = _createForOfIteratorHelper(message.connectionHops),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var v = _step2.value;\n        writer.uint32(34).string(v);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    if (message.version !== \"\") {\n      writer.uint32(42).string(message.version);\n    }\n    if (message.portId !== \"\") {\n      writer.uint32(50).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(58).string(message.channelId);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseIdentifiedChannel();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.state = reader.int32();\n          break;\n        case 2:\n          message.ordering = reader.int32();\n          break;\n        case 3:\n          message.counterparty = exports.Counterparty.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.connectionHops.push(reader.string());\n          break;\n        case 5:\n          message.version = reader.string();\n          break;\n        case 6:\n          message.portId = reader.string();\n          break;\n        case 7:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      state: isSet(object.state) ? stateFromJSON(object.state) : 0,\n      ordering: isSet(object.ordering) ? orderFromJSON(object.ordering) : 0,\n      counterparty: isSet(object.counterparty) ? exports.Counterparty.fromJSON(object.counterparty) : undefined,\n      connectionHops: Array.isArray(object === null || object === void 0 ? void 0 : object.connectionHops) ? object.connectionHops.map(function (e) {\n        return String(e);\n      }) : [],\n      version: isSet(object.version) ? String(object.version) : \"\",\n      portId: isSet(object.portId) ? String(object.portId) : \"\",\n      channelId: isSet(object.channelId) ? String(object.channelId) : \"\"\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.state !== undefined && (obj.state = stateToJSON(message.state));\n    message.ordering !== undefined && (obj.ordering = orderToJSON(message.ordering));\n    message.counterparty !== undefined && (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);\n    if (message.connectionHops) {\n      obj.connectionHops = message.connectionHops.map(function (e) {\n        return e;\n      });\n    } else {\n      obj.connectionHops = [];\n    }\n    message.version !== undefined && (obj.version = message.version);\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d, _e, _f;\n    var message = createBaseIdentifiedChannel();\n    message.state = (_a = object.state) !== null && _a !== void 0 ? _a : 0;\n    message.ordering = (_b = object.ordering) !== null && _b !== void 0 ? _b : 0;\n    message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? exports.Counterparty.fromPartial(object.counterparty) : undefined;\n    message.connectionHops = ((_c = object.connectionHops) === null || _c === void 0 ? void 0 : _c.map(function (e) {\n      return e;\n    })) || [];\n    message.version = (_d = object.version) !== null && _d !== void 0 ? _d : \"\";\n    message.portId = (_e = object.portId) !== null && _e !== void 0 ? _e : \"\";\n    message.channelId = (_f = object.channelId) !== null && _f !== void 0 ? _f : \"\";\n    return message;\n  }\n};\nfunction createBaseCounterparty() {\n  return {\n    portId: \"\",\n    channelId: \"\"\n  };\n}\nexports.Counterparty = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseCounterparty();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      portId: isSet(object.portId) ? String(object.portId) : \"\",\n      channelId: isSet(object.channelId) ? String(object.channelId) : \"\"\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = createBaseCounterparty();\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nfunction createBasePacket() {\n  return {\n    sequence: long_1.default.UZERO,\n    sourcePort: \"\",\n    sourceChannel: \"\",\n    destinationPort: \"\",\n    destinationChannel: \"\",\n    data: new Uint8Array(),\n    timeoutHeight: undefined,\n    timeoutTimestamp: long_1.default.UZERO\n  };\n}\nexports.Packet = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (!message.sequence.isZero()) {\n      writer.uint32(8).uint64(message.sequence);\n    }\n    if (message.sourcePort !== \"\") {\n      writer.uint32(18).string(message.sourcePort);\n    }\n    if (message.sourceChannel !== \"\") {\n      writer.uint32(26).string(message.sourceChannel);\n    }\n    if (message.destinationPort !== \"\") {\n      writer.uint32(34).string(message.destinationPort);\n    }\n    if (message.destinationChannel !== \"\") {\n      writer.uint32(42).string(message.destinationChannel);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(50).bytes(message.data);\n    }\n    if (message.timeoutHeight !== undefined) {\n      client_1.Height.encode(message.timeoutHeight, writer.uint32(58).fork()).ldelim();\n    }\n    if (!message.timeoutTimestamp.isZero()) {\n      writer.uint32(64).uint64(message.timeoutTimestamp);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBasePacket();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sequence = reader.uint64();\n          break;\n        case 2:\n          message.sourcePort = reader.string();\n          break;\n        case 3:\n          message.sourceChannel = reader.string();\n          break;\n        case 4:\n          message.destinationPort = reader.string();\n          break;\n        case 5:\n          message.destinationChannel = reader.string();\n          break;\n        case 6:\n          message.data = reader.bytes();\n          break;\n        case 7:\n          message.timeoutHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 8:\n          message.timeoutTimestamp = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      sequence: isSet(object.sequence) ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO,\n      sourcePort: isSet(object.sourcePort) ? String(object.sourcePort) : \"\",\n      sourceChannel: isSet(object.sourceChannel) ? String(object.sourceChannel) : \"\",\n      destinationPort: isSet(object.destinationPort) ? String(object.destinationPort) : \"\",\n      destinationChannel: isSet(object.destinationChannel) ? String(object.destinationChannel) : \"\",\n      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),\n      timeoutHeight: isSet(object.timeoutHeight) ? client_1.Height.fromJSON(object.timeoutHeight) : undefined,\n      timeoutTimestamp: isSet(object.timeoutTimestamp) ? long_1.default.fromValue(object.timeoutTimestamp) : long_1.default.UZERO\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);\n    message.sourceChannel !== undefined && (obj.sourceChannel = message.sourceChannel);\n    message.destinationPort !== undefined && (obj.destinationPort = message.destinationPort);\n    message.destinationChannel !== undefined && (obj.destinationChannel = message.destinationChannel);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.timeoutHeight !== undefined && (obj.timeoutHeight = message.timeoutHeight ? client_1.Height.toJSON(message.timeoutHeight) : undefined);\n    message.timeoutTimestamp !== undefined && (obj.timeoutTimestamp = (message.timeoutTimestamp || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d, _e;\n    var message = createBasePacket();\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO;\n    message.sourcePort = (_a = object.sourcePort) !== null && _a !== void 0 ? _a : \"\";\n    message.sourceChannel = (_b = object.sourceChannel) !== null && _b !== void 0 ? _b : \"\";\n    message.destinationPort = (_c = object.destinationPort) !== null && _c !== void 0 ? _c : \"\";\n    message.destinationChannel = (_d = object.destinationChannel) !== null && _d !== void 0 ? _d : \"\";\n    message.data = (_e = object.data) !== null && _e !== void 0 ? _e : new Uint8Array();\n    message.timeoutHeight = object.timeoutHeight !== undefined && object.timeoutHeight !== null ? client_1.Height.fromPartial(object.timeoutHeight) : undefined;\n    message.timeoutTimestamp = object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null ? long_1.default.fromValue(object.timeoutTimestamp) : long_1.default.UZERO;\n    return message;\n  }\n};\nfunction createBasePacketState() {\n  return {\n    portId: \"\",\n    channelId: \"\",\n    sequence: long_1.default.UZERO,\n    data: new Uint8Array()\n  };\n}\nexports.PacketState = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(34).bytes(message.data);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBasePacketState();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        case 4:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      portId: isSet(object.portId) ? String(object.portId) : \"\",\n      channelId: isSet(object.channelId) ? String(object.channelId) : \"\",\n      sequence: isSet(object.sequence) ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO,\n      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array()\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n    var message = createBasePacketState();\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO;\n    message.data = (_c = object.data) !== null && _c !== void 0 ? _c : new Uint8Array();\n    return message;\n  }\n};\nfunction createBaseAcknowledgement() {\n  return {\n    result: undefined,\n    error: undefined\n  };\n}\nexports.Acknowledgement = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.result !== undefined) {\n      writer.uint32(170).bytes(message.result);\n    }\n    if (message.error !== undefined) {\n      writer.uint32(178).string(message.error);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseAcknowledgement();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 21:\n          message.result = reader.bytes();\n          break;\n        case 22:\n          message.error = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      result: isSet(object.result) ? bytesFromBase64(object.result) : undefined,\n      error: isSet(object.error) ? String(object.error) : undefined\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.result !== undefined && (obj.result = message.result !== undefined ? base64FromBytes(message.result) : undefined);\n    message.error !== undefined && (obj.error = message.error);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = createBaseAcknowledgement();\n    message.result = (_a = object.result) !== null && _a !== void 0 ? _a : undefined;\n    message.error = (_b = object.error) !== null && _b !== void 0 ? _b : undefined;\n    return message;\n  }\n};\nvar globalThis = function () {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw \"Unable to locate global object\";\n}();\nfunction bytesFromBase64(b64) {\n  if (globalThis.Buffer) {\n    return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n  } else {\n    var bin = globalThis.atob(b64);\n    var arr = new Uint8Array(bin.length);\n    for (var i = 0; i < bin.length; ++i) {\n      arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n  }\n}\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    var bin = [];\n    arr.forEach(function (byte) {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\nfunction isSet(value) {\n  return value !== null && value !== undefined;\n}","map":null,"metadata":{},"sourceType":"script"}