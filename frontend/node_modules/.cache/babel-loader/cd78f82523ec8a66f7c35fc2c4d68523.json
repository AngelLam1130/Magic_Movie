{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.verifyArbitrary = void 0;\nvar _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));\nvar _asyncToGenerator2 = _interopRequireDefault(require('@babel/runtime/helpers/asyncToGenerator'));\nvar _amino = require('@cosmjs/amino');\nvar _encoding = require('@cosmjs/encoding');\nvar _bech = require('./bech32');\nvar _address = require('./address');\nvar _hash = require('./hash');\nfunction checkAndValidateADR36AminoSignDoc(signDoc) {\n  var hasOnlyMsgSignData = function () {\n    if (signDoc && signDoc.msgs && Array.isArray(signDoc.msgs) && signDoc.msgs.length === 1) {\n      var _msg = signDoc.msgs[0];\n      return _msg.type === 'sign/MsgSignData';\n    } else {\n      return false;\n    }\n  }();\n  if (!hasOnlyMsgSignData) {\n    return false;\n  }\n  if (signDoc.chain_id !== '') {\n    throw new Error('Chain id should be empty string for ADR-36 signing');\n  }\n  if (signDoc.memo !== '') {\n    throw new Error('Memo should be empty string for ADR-36 signing');\n  }\n  if (signDoc.account_number !== '0') {\n    throw new Error('Account number should be \"0\" for ADR-36 signing');\n  }\n  if (signDoc.sequence !== '0') {\n    throw new Error('Sequence should be \"0\" for ADR-36 signing');\n  }\n  if (signDoc.fee.gas !== '0') {\n    throw new Error('Gas should be \"0\" for ADR-36 signing');\n  }\n  if (signDoc.fee.amount.length !== 0) {\n    throw new Error('Fee amount should be empty array for ADR-36 signing');\n  }\n  var msg = signDoc.msgs[0];\n  if (msg.type !== 'sign/MsgSignData') {\n    throw new Error('Invalid type of ADR-36 sign msg: '.concat(msg.type));\n  }\n  if (!msg.value) {\n    throw new Error('Empty value in the msg');\n  }\n  var signer = msg.value.signer;\n  if (!signer) {\n    throw new Error('Empty signer in the ADR-36 msg');\n  }\n  (0, _address.isValidSeiAddress)(signer);\n  var data = msg.value.data;\n  if (!data) {\n    throw new Error('Empty data in the ADR-36 msg');\n  }\n  var rawData = Buffer.from(data, 'base64');\n  // Validate the data is encoded as base64.\n  if (rawData.toString('base64') !== data) {\n    throw new Error('Data is not encoded by base64');\n  }\n  if (rawData.length === 0) {\n    throw new Error('Empty data in the ADR-36 msg');\n  }\n  return true;\n}\nfunction makeADR36AminoSignDoc(signer, data) {\n  // If data is already a base64 string, convert it to a Buffer and back to a string.\n  data = Buffer.from(data).toString('base64');\n\n  //According to ADR-36 specifications https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-036-arbitrary-signature.md\n  return {\n    // chain-id must be equal to “”\n    chain_id: '',\n    // must be invalid value\n    account_number: '0',\n    // nonce, sequence number must be equal to 0\n    sequence: '0',\n    fee: {\n      // fee gas must be equal to 0\n      gas: '0',\n      //fee amount must be an empty array\n      amount: []\n    },\n    msgs: [{\n      type: 'sign/MsgSignData',\n      value: {\n        signer: signer,\n        // Data is arbitrary bytes which can represent text, files, objects. It's applications developers decision how Data should be deserialized, serialized and the object it can represent in their context\n        // It's applications developers decision how Data should be treated, by treated we mean the serialization and deserialization process and the Object Data should represent.\n        data: data\n      }\n    }],\n    // the memo must be empty\n    memo: ''\n  };\n}\nfunction verifyADR36AminoSignDoc(signDoc, pubKey, signature) {\n  if (!checkAndValidateADR36AminoSignDoc(signDoc)) {\n    throw new Error('Invalid sign doc for ADR-36');\n  }\n  var pubKeyAddress = (0, _address.getAddressFromPubKey)(pubKey);\n  var expectedSigner = (0, _bech.toBech32)(pubKeyAddress);\n  var signer = signDoc.msgs[0].value.signer;\n  if (expectedSigner !== signer) {\n    throw new Error('Unmatched signer');\n  }\n  var msg = (0, _amino.serializeSignDoc)(signDoc);\n  return (0, _address.verifyDigest32)((0, _hash.sha256)(msg), signature, pubKey);\n}\nfunction verifyADR36Amino(signer, data, pubKey, signature) {\n  var signDoc = makeADR36AminoSignDoc(signer, data);\n  return verifyADR36AminoSignDoc(signDoc, pubKey, signature);\n}\nvar verifyArbitrary = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2['default'])( /*#__PURE__*/_regenerator['default'].mark(function _callee(signerAddress, expectedMessage, signatureToVerify) {\n    var pubKey, signature;\n    return _regenerator['default'].wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          pubKey = signatureToVerify.pub_key, signature = signatureToVerify.signature;\n          return _context.abrupt('return', verifyADR36Amino(signerAddress, expectedMessage, (0, _encoding.fromBase64)(pubKey.value), (0, _encoding.fromBase64)(signature)));\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context['catch'](0);\n          console.log('error verifying signature', _context.t0);\n          return _context.abrupt('return', false);\n        case 9:\n        case 'end':\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 5]]);\n  }));\n  return function verifyArbitrary(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.verifyArbitrary = verifyArbitrary;","map":null,"metadata":{},"sourceType":"script"}