{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LCDQueryClient = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _helpers = require(\"../../../../helpers\");\nvar LCDQueryClient = /*#__PURE__*/function () {\n  function LCDQueryClient(_ref) {\n    var requestClient = _ref.requestClient;\n    (0, _classCallCheck2[\"default\"])(this, LCDQueryClient);\n    (0, _defineProperty2[\"default\"])(this, \"req\", void 0);\n    this.req = requestClient;\n    this.channel = this.channel.bind(this);\n    this.channels = this.channels.bind(this);\n    this.connectionChannels = this.connectionChannels.bind(this);\n    this.channelClientState = this.channelClientState.bind(this);\n    this.channelConsensusState = this.channelConsensusState.bind(this);\n    this.packetCommitment = this.packetCommitment.bind(this);\n    this.packetCommitments = this.packetCommitments.bind(this);\n    this.packetReceipt = this.packetReceipt.bind(this);\n    this.packetAcknowledgement = this.packetAcknowledgement.bind(this);\n    this.packetAcknowledgements = this.packetAcknowledgements.bind(this);\n    this.unreceivedPackets = this.unreceivedPackets.bind(this);\n    this.unreceivedAcks = this.unreceivedAcks.bind(this);\n    this.nextSequenceReceive = this.nextSequenceReceive.bind(this);\n  }\n  /* Channel queries an IBC Channel. */\n  (0, _createClass2[\"default\"])(LCDQueryClient, [{\n    key: \"channel\",\n    value: function () {\n      var _channel = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId);\n              _context.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function channel(_x) {\n        return _channel.apply(this, arguments);\n      }\n      return channel;\n    }() /* Channels queries all the IBC channels of a chain. */\n  }, {\n    key: \"channels\",\n    value: function () {\n      var _channels = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        var params,\n          options,\n          endpoint,\n          _args2 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              params = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {\n                pagination: undefined\n              };\n              options = {\n                params: {}\n              };\n              if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== \"undefined\") {\n                (0, _helpers.setPaginationParams)(options, params.pagination);\n              }\n              endpoint = \"ibc/core/channel/v1/channels\";\n              _context2.next = 6;\n              return this.req.get(endpoint, options);\n            case 6:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function channels() {\n        return _channels.apply(this, arguments);\n      }\n      return channels;\n    }()\n    /* ConnectionChannels queries all the channels associated with a connection\n     end. */\n  }, {\n    key: \"connectionChannels\",\n    value: function () {\n      var _connectionChannels = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(params) {\n        var options, endpoint;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = {\n                params: {}\n              };\n              if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== \"undefined\") {\n                (0, _helpers.setPaginationParams)(options, params.pagination);\n              }\n              endpoint = \"ibc/core/channel/v1/connections/\".concat(params.connection, \"/channels\");\n              _context3.next = 5;\n              return this.req.get(endpoint, options);\n            case 5:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function connectionChannels(_x2) {\n        return _connectionChannels.apply(this, arguments);\n      }\n      return connectionChannels;\n    }()\n    /* ChannelClientState queries for the client state for the channel associated\n     with the provided channel identifiers. */\n  }, {\n    key: \"channelClientState\",\n    value: function () {\n      var _channelClientState = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/client_state\");\n              _context4.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function channelClientState(_x3) {\n        return _channelClientState.apply(this, arguments);\n      }\n      return channelClientState;\n    }()\n    /* ChannelConsensusState queries for the consensus state for the channel\n     associated with the provided channel identifiers. */\n  }, {\n    key: \"channelConsensusState\",\n    value: function () {\n      var _channelConsensusState = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/consensus_state/revision/\").concat(params.revisionNumber, \"/height/\").concat(params.revisionHeight);\n              _context5.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function channelConsensusState(_x4) {\n        return _channelConsensusState.apply(this, arguments);\n      }\n      return channelConsensusState;\n    }() /* PacketCommitment queries a stored packet commitment hash. */\n  }, {\n    key: \"packetCommitment\",\n    value: function () {\n      var _packetCommitment = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/packet_commitments/\").concat(params.sequence);\n              _context6.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function packetCommitment(_x5) {\n        return _packetCommitment.apply(this, arguments);\n      }\n      return packetCommitment;\n    }()\n    /* PacketCommitments returns all the packet commitments hashes associated\n     with a channel. */\n  }, {\n    key: \"packetCommitments\",\n    value: function () {\n      var _packetCommitments = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee7(params) {\n        var options, endpoint;\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              options = {\n                params: {}\n              };\n              if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== \"undefined\") {\n                (0, _helpers.setPaginationParams)(options, params.pagination);\n              }\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/packet_commitments\");\n              _context7.next = 5;\n              return this.req.get(endpoint, options);\n            case 5:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function packetCommitments(_x6) {\n        return _packetCommitments.apply(this, arguments);\n      }\n      return packetCommitments;\n    }()\n    /* PacketReceipt queries if a given packet sequence has been received on the\n     queried chain */\n  }, {\n    key: \"packetReceipt\",\n    value: function () {\n      var _packetReceipt = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee8(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/packet_receipts/\").concat(params.sequence);\n              _context8.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function packetReceipt(_x7) {\n        return _packetReceipt.apply(this, arguments);\n      }\n      return packetReceipt;\n    }() /* PacketAcknowledgement queries a stored packet acknowledgement hash. */\n  }, {\n    key: \"packetAcknowledgement\",\n    value: function () {\n      var _packetAcknowledgement = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee9(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/packet_acks/\").concat(params.sequence);\n              _context9.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function packetAcknowledgement(_x8) {\n        return _packetAcknowledgement.apply(this, arguments);\n      }\n      return packetAcknowledgement;\n    }()\n    /* PacketAcknowledgements returns all the packet acknowledgements associated\n     with a channel. */\n  }, {\n    key: \"packetAcknowledgements\",\n    value: function () {\n      var _packetAcknowledgements = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee10(params) {\n        var options, endpoint;\n        return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              options = {\n                params: {}\n              };\n              if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== \"undefined\") {\n                (0, _helpers.setPaginationParams)(options, params.pagination);\n              }\n              if (typeof (params === null || params === void 0 ? void 0 : params.packetCommitmentSequences) !== \"undefined\") {\n                options.params.packet_commitment_sequences = params.packetCommitmentSequences;\n              }\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/packet_acknowledgements\");\n              _context10.next = 6;\n              return this.req.get(endpoint, options);\n            case 6:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function packetAcknowledgements(_x9) {\n        return _packetAcknowledgements.apply(this, arguments);\n      }\n      return packetAcknowledgements;\n    }()\n    /* UnreceivedPackets returns all the unreceived IBC packets associated with a\n     channel and sequences. */\n  }, {\n    key: \"unreceivedPackets\",\n    value: function () {\n      var _unreceivedPackets = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee11(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/packet_commitments/\").concat(params.packetCommitmentSequences, \"/unreceived_packets\");\n              _context11.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context11.abrupt(\"return\", _context11.sent);\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function unreceivedPackets(_x10) {\n        return _unreceivedPackets.apply(this, arguments);\n      }\n      return unreceivedPackets;\n    }()\n    /* UnreceivedAcks returns all the unreceived IBC acknowledgements associated\n     with a channel and sequences. */\n  }, {\n    key: \"unreceivedAcks\",\n    value: function () {\n      var _unreceivedAcks = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee12(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/packet_commitments/\").concat(params.packetAckSequences, \"/unreceived_acks\");\n              _context12.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context12.abrupt(\"return\", _context12.sent);\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function unreceivedAcks(_x11) {\n        return _unreceivedAcks.apply(this, arguments);\n      }\n      return unreceivedAcks;\n    }() /* NextSequenceReceive returns the next receive sequence for a given channel. */\n  }, {\n    key: \"nextSequenceReceive\",\n    value: function () {\n      var _nextSequenceReceive = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee13(params) {\n        var endpoint;\n        return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              endpoint = \"ibc/core/channel/v1/channels/\".concat(params.channelId, \"/ports/\").concat(params.portId, \"/next_sequence\");\n              _context13.next = 3;\n              return this.req.get(endpoint);\n            case 3:\n              return _context13.abrupt(\"return\", _context13.sent);\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function nextSequenceReceive(_x12) {\n        return _nextSequenceReceive.apply(this, arguments);\n      }\n      return nextSequenceReceive;\n    }()\n  }]);\n  return LCDQueryClient;\n}();\nexports.LCDQueryClient = LCDQueryClient;","map":null,"metadata":{},"sourceType":"script"}