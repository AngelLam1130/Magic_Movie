{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bech32 = exports.normalizeBech32 = exports.fromBech32 = exports.toBech32 = void 0;\nvar bech32 = __importStar(require(\"bech32\"));\nfunction toBech32(prefix, data, limit) {\n  var address = bech32.encode(prefix, bech32.toWords(data), limit);\n  return address;\n}\nexports.toBech32 = toBech32;\nfunction fromBech32(address) {\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var decodedAddress = bech32.decode(address, limit);\n  return {\n    prefix: decodedAddress.prefix,\n    data: new Uint8Array(bech32.fromWords(decodedAddress.words))\n  };\n}\nexports.fromBech32 = fromBech32;\n/**\n * Takes a bech32 address and returns a normalized (i.e. lower case) representation of it.\n *\n * The input is validated along the way, which makes this significantly safer than\n * using `address.toLowerCase()`.\n */\nfunction normalizeBech32(address) {\n  var _fromBech = fromBech32(address),\n    prefix = _fromBech.prefix,\n    data = _fromBech.data;\n  return toBech32(prefix, data);\n}\nexports.normalizeBech32 = normalizeBech32;\n/**\n * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n */\nvar Bech32 = /*#__PURE__*/function () {\n  function Bech32() {\n    _classCallCheck(this, Bech32);\n  }\n  _createClass(Bech32, null, [{\n    key: \"encode\",\n    /**\n     * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n     */\n    value: function encode(prefix, data, limit) {\n      return toBech32(prefix, data, limit);\n    }\n    /**\n     * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n     */\n  }, {\n    key: \"decode\",\n    value: function decode(address) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n      return fromBech32(address, limit);\n    }\n  }]);\n  return Bech32;\n}();\nexports.Bech32 = Bech32;","map":null,"metadata":{},"sourceType":"script"}