{"ast":null,"code":"\"use strict\";\n\n// See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pubkeyToAddress = exports.pubkeyToRawAddress = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = void 0;\nvar crypto_1 = require(\"@cosmjs/crypto\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar encoding_2 = require(\"./encoding\");\nvar pubkeys_1 = require(\"./pubkeys\");\nfunction rawEd25519PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 32) {\n    throw new Error(\"Invalid Ed25519 pubkey length: \".concat(pubkeyData.length));\n  }\n  return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n}\nexports.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;\nfunction rawSecp256k1PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 33) {\n    throw new Error(\"Invalid Secp256k1 pubkey length (compressed): \".concat(pubkeyData.length));\n  }\n  return (0, crypto_1.ripemd160)((0, crypto_1.sha256)(pubkeyData));\n}\nexports.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress;\n// For secp256k1 this assumes we already have a compressed pubkey.\nfunction pubkeyToRawAddress(pubkey) {\n  if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n    var pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n    return rawSecp256k1PubkeyToRawAddress(pubkeyData);\n  } else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n    var _pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n    return rawEd25519PubkeyToRawAddress(_pubkeyData);\n  } else if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n    // https://github.com/tendermint/tendermint/blob/38b401657e4ad7a7eeb3c30a3cbf512037df3740/crypto/multisig/threshold_pubkey.go#L71-L74\n    var _pubkeyData2 = (0, encoding_2.encodeAminoPubkey)(pubkey);\n    return (0, crypto_1.sha256)(_pubkeyData2).slice(0, 20);\n  } else {\n    throw new Error(\"Unsupported public key type\");\n  }\n}\nexports.pubkeyToRawAddress = pubkeyToRawAddress;\nfunction pubkeyToAddress(pubkey, prefix) {\n  return (0, encoding_1.toBech32)(prefix, pubkeyToRawAddress(pubkey));\n}\nexports.pubkeyToAddress = pubkeyToAddress;","map":null,"metadata":{},"sourceType":"script"}