{"ast":null,"code":"var _jsxFileName = \"/Users/linanqi/Hackathon/RKA-808/frontend/src/components/Toolbar.js\";\nimport React, { useContext, memo } from 'react';\nimport { sequenceList } from '../constants/config';\nimport { Context } from '../hooks/useStore';\nimport './Toolbar.css';\n\nconst ToolBar = ({\n  setStartTime,\n  setPastLapse,\n  setBPM,\n  isSequencePlaying,\n  startTime,\n  BPM\n}) => {\n  const _useContext = useContext(Context),\n        selectedSequenceID = _useContext.sequence.id,\n        selectSequence = _useContext.selectSequence;\n\n  function togglePlayback() {\n    if (isSequencePlaying) {\n      setPastLapse(l => l + performance.now() - startTime);\n      setStartTime(null);\n    } else {\n      setStartTime(performance.now());\n    }\n  }\n\n  function stopPlayback() {\n    setPastLapse(0);\n    setStartTime(null);\n  }\n\n  function updateBPM(e) {\n    setBPM(e.target.value);\n  }\n\n  function convertSequenceListToMatrix(list) {\n    const matrices = {};\n\n    for (const sequence of list) {\n      const title = sequence.title;\n      const matrix = [];\n\n      for (const track of sequence.trackList) {\n        let zeroArray = new Array(sequence.noteCount).fill(0);\n        const notes = track.onNotes;\n\n        for (const note of notes) {\n          zeroArray[note] = 1;\n        }\n\n        matrix.push(zeroArray);\n      }\n\n      matrices[title] = matrix;\n    }\n\n    return matrices;\n  }\n\n  function generateFromMusic() {\n    let matrices = convertSequenceListToMatrix(sequenceList);\n    console.log(matrices); // fetch('/myserver.endpoint', {\n    //     method: 'POST',\n    //     body: JSON.stringify({\n    //       // matrices: matrices\n    //     })\n    //     headers: {\n    //       'Content-type': 'application/json; charset=UTF-8',\n    //     },\n    //   })\n    //      .then((response) => response.json())\n    //      .then((data) => {\n    //         console.log(data);\n    //         // Handle data\n    //      })\n    //      .catch((err) => {\n    //         console.log(err.message);\n    //      });\n  }\n\n  console.log(sequenceList);\n  return React.createElement(\"div\", {\n    className: \"toolbar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"form_element button_play_pause\",\n    onClick: generateFromMusic,\n    \"aria-label\": \"Generate From Matrix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Generate from Matrix\"), React.createElement(\"button\", {\n    className: \"form_element button_stop\",\n    onClick: stopPlayback,\n    \"aria-label\": \"Stop\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    width: \"14\",\n    height: \"14\",\n    viewBox: \"0 0 14 14\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"rect\", {\n    className: \"button_icon_path\",\n    x: \"2\",\n    y: \"2\",\n    width: \"10\",\n    height: \"10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }))), React.createElement(\"button\", {\n    className: \"form_element button_play_pause\",\n    onClick: togglePlayback,\n    \"aria-label\": \"Play / Pause\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    width: \"14\",\n    height: \"14\",\n    viewBox: \"8 8 20 20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, isSequencePlaying && React.createElement(\"path\", {\n    className: \"button_icon_path\",\n    id: \"pause-icon\",\n    \"data-state\": \"playing\",\n    d: \"M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), !isSequencePlaying && React.createElement(\"path\", {\n    className: \"button_icon_path\",\n    id: \"play-icon\",\n    \"data-state\": \"paused\",\n    d: \"M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }))), React.createElement(\"input\", {\n    className: \"form_element input_bpm\",\n    id: \"bpm\",\n    type: \"text\",\n    value: BPM,\n    onChange: updateBPM,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label_bpm\",\n    htmlFor: \"bpm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"BPM\"), React.createElement(\"select\", {\n    className: \"form_element select_sequence\",\n    value: selectedSequenceID,\n    onChange: e => selectSequence(+e.target.value),\n    \"aria-label\": \"Select sequence\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, sequenceList.map(seq => {\n    return React.createElement(\"option\", {\n      key: seq.id,\n      value: seq.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, seq.title);\n  })));\n};\n\nexport default memo(ToolBar);","map":{"version":3,"sources":["/Users/linanqi/Hackathon/RKA-808/frontend/src/components/Toolbar.js"],"names":["React","useContext","memo","sequenceList","Context","ToolBar","setStartTime","setPastLapse","setBPM","isSequencePlaying","startTime","BPM","selectedSequenceID","sequence","id","selectSequence","togglePlayback","l","performance","now","stopPlayback","updateBPM","e","target","value","convertSequenceListToMatrix","list","matrices","title","matrix","track","trackList","zeroArray","Array","noteCount","fill","notes","onNotes","note","push","generateFromMusic","console","log","map","seq"],"mappings":"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","sourcesContent":["import React, { useContext, memo } from 'react'\nimport { sequenceList } from '../constants/config'\nimport { Context } from '../hooks/useStore'\nimport './Toolbar.css'\n\nconst ToolBar = ({\n    setStartTime,\n    setPastLapse,\n    setBPM,\n    isSequencePlaying,\n    startTime,\n    BPM\n}) => {\n    \n    const { sequence: { id: selectedSequenceID }, selectSequence } = useContext(Context)\n\n    function togglePlayback() {\n        if (isSequencePlaying) {\n            setPastLapse(l => l + performance.now() - startTime)\n            setStartTime(null)\n        } else {\n            setStartTime(performance.now())\n        }\n    }\n\n    function stopPlayback() {\n        setPastLapse(0)\n        setStartTime(null)\n    }\n\n    function updateBPM(e) {\n        setBPM(e.target.value)\n    }\n\n    function convertSequenceListToMatrix(list) {\n        const matrices = {};\n\n        for (const sequence of list) {\n            const title = sequence.title;\n            const matrix = [];\n            for (const track of sequence.trackList) {\n                let zeroArray = new Array(sequence.noteCount).fill(0);\n                const notes = track.onNotes;\n                for (const note of notes) {\n                    zeroArray[note] = 1;\n                }\n                matrix.push(zeroArray);\n            }\n            matrices[title] = matrix;\n        }\n        return matrices;\n    }\n\n    function generateFromMusic() {\n\n        let matrices = convertSequenceListToMatrix(sequenceList);\n        console.log(matrices);\n\n        // fetch('/myserver.endpoint', {\n        //     method: 'POST',\n        //     body: JSON.stringify({\n        //       // matrices: matrices\n        //     })\n        //     headers: {\n        //       'Content-type': 'application/json; charset=UTF-8',\n        //     },\n        //   })\n        //      .then((response) => response.json())\n        //      .then((data) => {\n        //         console.log(data);\n        //         // Handle data\n        //      })\n        //      .catch((err) => {\n        //         console.log(err.message);\n        //      });\n    }\n    console.log(sequenceList)\n\n    return (\n        <div className=\"toolbar\">\n            <button className=\"form_element button_play_pause\" onClick={generateFromMusic} aria-label=\"Generate From Matrix\">\n                Generate from Matrix\n            </button>\n            <button className=\"form_element button_stop\" onClick={stopPlayback} aria-label=\"Stop\">\n                <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\n                    <rect className=\"button_icon_path\" x=\"2\" y=\"2\" width=\"10\" height=\"10\" />\n                </svg>\n            </button>\n            <button className=\"form_element button_play_pause\" onClick={togglePlayback} aria-label=\"Play / Pause\">\n                <svg width=\"14\" height=\"14\" viewBox=\"8 8 20 20\">\n                    {isSequencePlaying && <path className=\"button_icon_path\" id=\"pause-icon\" data-state=\"playing\" d=\"M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26\" />}\n                    {!isSequencePlaying && <path className=\"button_icon_path\" id=\"play-icon\" data-state=\"paused\" d=\"M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28\" />}\n                </svg>\n            </button>\n\n            <input className=\"form_element input_bpm\" id=\"bpm\" type=\"text\" value={BPM} onChange={updateBPM} />\n            <label className=\"label_bpm\" htmlFor=\"bpm\">BPM</label>\n            <select\n                className=\"form_element select_sequence\"\n                value={selectedSequenceID}\n                onChange={e => selectSequence(+e.target.value)}\n                aria-label=\"Select sequence\"\n            >\n                {\n                    sequenceList.map(seq => {\n                        return (\n                            <option\n                                key={seq.id}\n                                value={seq.id}\n                            >\n                                {seq.title}\n                            </option>\n                        )\n                    })\n                }\n            </select>\n        </div>\n    )\n}\n\nexport default memo(ToolBar)\n"]},"metadata":{},"sourceType":"module"}