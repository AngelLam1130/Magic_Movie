{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromBinary = exports.toBinary = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\n/**\n * Takes a value, serializes it to JSON and encodes it as base64.\n *\n * This can be used for creating values of fields that have the CosmWasm Binary type.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction toBinary(obj) {\n  return (0, encoding_1.toBase64)((0, encoding_1.toUtf8)(JSON.stringify(obj)));\n}\nexports.toBinary = toBinary;\n/**\n * Takes a base64 string, decodes it and parses the content from JSON to an object.\n *\n * This can be used for parsing the values of a CosmWasm Binary field.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction fromBinary(base64) {\n  return JSON.parse((0, encoding_1.fromUtf8)((0, encoding_1.fromBase64)(base64)));\n}\nexports.fromBinary = fromBinary;","map":{"version":3,"names":["encoding_1","require","toBinary","obj","toBase64","toUtf8","JSON","stringify","exports","fromBinary","base64","parse","fromUtf8","fromBase64"],"sources":["../src/encoding.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AAEA;;;;;AAKA;AACA,SAAgBC,QAAQA,CAACC,GAAQ;EAC/B,OAAO,IAAAH,UAAA,CAAAI,QAAQ,EAAC,IAAAJ,UAAA,CAAAK,MAAM,EAACC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC,CAAC;AAC9C;AAFAK,OAAA,CAAAN,QAAA,GAAAA,QAAA;AAIA;;;;;AAKA;AACA,SAAgBO,UAAUA,CAACC,MAAc;EACvC,OAAOJ,IAAI,CAACK,KAAK,CAAC,IAAAX,UAAA,CAAAY,QAAQ,EAAC,IAAAZ,UAAA,CAAAa,UAAU,EAACH,MAAM,CAAC,CAAC,CAAC;AACjD;AAFAF,OAAA,CAAAC,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script"}