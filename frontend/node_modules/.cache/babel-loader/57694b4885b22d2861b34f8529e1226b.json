{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryClient = void 0;\n/* eslint-disable no-dupe-class-members, @typescript-eslint/ban-types, @typescript-eslint/naming-convention */\nconst ics23_1 = require(\"@confio/ics23\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst stream_1 = require(\"@cosmjs/stream\");\nconst utils_1 = require(\"@cosmjs/utils\");\nfunction checkAndParseOp(op, kind, key) {\n  if (op.type !== kind) {\n    throw new Error(`Op expected to be ${kind}, got \"${op.type}`);\n  }\n  if (!(0, utils_1.arrayContentEquals)(key, op.key)) {\n    throw new Error(`Proven key different than queried key.\\nQuery: ${(0, encoding_1.toHex)(key)}\\nProven: ${(0, encoding_1.toHex)(op.key)}`);\n  }\n  return ics23_1.ics23.CommitmentProof.decode(op.data);\n}\nclass QueryClient {\n  constructor(tmClient) {\n    this.tmClient = tmClient;\n  }\n  static withExtensions(tmClient, ...extensionSetups) {\n    const client = new QueryClient(tmClient);\n    const extensions = extensionSetups.map(setupExtension => setupExtension(client));\n    for (const extension of extensions) {\n      (0, utils_1.assert)((0, utils_1.isNonNullObject)(extension), `Extension must be a non-null object`);\n      for (const [moduleKey, moduleValue] of Object.entries(extension)) {\n        (0, utils_1.assert)((0, utils_1.isNonNullObject)(moduleValue), `Module must be a non-null object. Found type ${typeof moduleValue} for module \"${moduleKey}\".`);\n        const current = client[moduleKey] || {};\n        client[moduleKey] = {\n          ...current,\n          ...moduleValue\n        };\n      }\n    }\n    return client;\n  }\n  /**\n   * @deprecated use queryStoreVerified instead\n   */\n  async queryVerified(store, queryKey, desiredHeight) {\n    const {\n      value\n    } = await this.queryStoreVerified(store, queryKey, desiredHeight);\n    return value;\n  }\n  /**\n   * Queries the database store with a proof, which is then verified.\n   *\n   * Please note: the current implementation trusts block headers it gets from the PRC endpoint.\n   */\n  async queryStoreVerified(store, queryKey, desiredHeight) {\n    const {\n      height,\n      proof,\n      key,\n      value\n    } = await this.queryRawProof(store, queryKey, desiredHeight);\n    const subProof = checkAndParseOp(proof.ops[0], \"ics23:iavl\", queryKey);\n    const storeProof = checkAndParseOp(proof.ops[1], \"ics23:simple\", (0, encoding_1.toAscii)(store));\n    // this must always be existence, if the store is not a typo\n    (0, utils_1.assert)(storeProof.exist);\n    (0, utils_1.assert)(storeProof.exist.value);\n    // this may be exist or non-exist, depends on response\n    if (!value || value.length === 0) {\n      // non-existence check\n      (0, utils_1.assert)(subProof.nonexist);\n      // the subproof must map the desired key to the \"value\" of the storeProof\n      (0, ics23_1.verifyNonExistence)(subProof.nonexist, ics23_1.iavlSpec, storeProof.exist.value, queryKey);\n    } else {\n      // existence check\n      (0, utils_1.assert)(subProof.exist);\n      (0, utils_1.assert)(subProof.exist.value);\n      // the subproof must map the desired key to the \"value\" of the storeProof\n      (0, ics23_1.verifyExistence)(subProof.exist, ics23_1.iavlSpec, storeProof.exist.value, queryKey, value);\n    }\n    // the store proof must map its declared value (root of subProof) to the appHash of the next block\n    const header = await this.getNextHeader(height);\n    (0, ics23_1.verifyExistence)(storeProof.exist, ics23_1.tendermintSpec, header.appHash, (0, encoding_1.toAscii)(store), storeProof.exist.value);\n    return {\n      key,\n      value,\n      height\n    };\n  }\n  async queryRawProof(store, queryKey, desiredHeight) {\n    var _a;\n    const {\n      key,\n      value,\n      height,\n      proof,\n      code,\n      log\n    } = await this.tmClient.abciQuery({\n      // we need the StoreKey for the module, not the module name\n      // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L12\n      path: `/store/${store}/key`,\n      data: queryKey,\n      prove: true,\n      height: desiredHeight\n    });\n    if (code) {\n      throw new Error(`Query failed with (${code}): ${log}`);\n    }\n    if (!(0, utils_1.arrayContentEquals)(queryKey, key)) {\n      throw new Error(`Response key ${(0, encoding_1.toHex)(key)} doesn't match query key ${(0, encoding_1.toHex)(queryKey)}`);\n    }\n    if (!height) {\n      throw new Error(\"No query height returned\");\n    }\n    if (!proof || proof.ops.length !== 2) {\n      throw new Error(`Expected 2 proof ops, got ${(_a = proof === null || proof === void 0 ? void 0 : proof.ops.length) !== null && _a !== void 0 ? _a : 0}. Are you using stargate?`);\n    }\n    // we don't need the results, but we can ensure the data is the proper format\n    checkAndParseOp(proof.ops[0], \"ics23:iavl\", key);\n    checkAndParseOp(proof.ops[1], \"ics23:simple\", (0, encoding_1.toAscii)(store));\n    return {\n      key: key,\n      value: value,\n      height: height,\n      // need to clone this: readonly input / writeable output\n      proof: {\n        ops: [...proof.ops]\n      }\n    };\n  }\n  /**\n   * Performs an ABCI query to Tendermint without requesting a proof.\n   *\n   * @deprecated use queryAbci instead\n   */\n  async queryUnverified(path, request, desiredHeight) {\n    const response = await this.queryAbci(path, request, desiredHeight);\n    return response.value;\n  }\n  /**\n   * Performs an ABCI query to Tendermint without requesting a proof.\n   *\n   * If the `desiredHeight` is set, a particular height is requested. Otherwise\n   * the latest height is requested. The response contains the actual height of\n   * the query.\n   */\n  async queryAbci(path, request, desiredHeight) {\n    const response = await this.tmClient.abciQuery({\n      path: path,\n      data: request,\n      prove: false,\n      height: desiredHeight\n    });\n    if (response.code) {\n      throw new Error(`Query failed with (${response.code}): ${response.log}`);\n    }\n    if (!response.height) {\n      throw new Error(\"No query height returned\");\n    }\n    return {\n      value: response.value,\n      height: response.height\n    };\n  }\n  // this must return the header for height+1\n  // throws an error if height is 0 or undefined\n  async getNextHeader(height) {\n    (0, utils_1.assertDefined)(height);\n    if (height === 0) {\n      throw new Error(\"Query returned height 0, cannot prove it\");\n    }\n    const searchHeight = height + 1;\n    let nextHeader;\n    let headersSubscription;\n    try {\n      headersSubscription = this.tmClient.subscribeNewBlockHeader();\n    } catch (_a) {\n      // Ignore exception caused by non-WebSocket Tendermint clients\n    }\n    if (headersSubscription) {\n      const firstHeader = await (0, stream_1.firstEvent)(headersSubscription);\n      // The first header we get might not be n+1 but n+2 or even higher. In such cases we fall back on a query.\n      if (firstHeader.height === searchHeight) {\n        nextHeader = firstHeader;\n      }\n    }\n    while (!nextHeader) {\n      // start from current height to avoid backend error for minHeight in the future\n      const correctHeader = (await this.tmClient.blockchain(height, searchHeight)).blockMetas.map(meta => meta.header).find(h => h.height === searchHeight);\n      if (correctHeader) {\n        nextHeader = correctHeader;\n      } else {\n        await (0, utils_1.sleep)(1000);\n      }\n    }\n    (0, utils_1.assert)(nextHeader.height === searchHeight, \"Got wrong header. This is a bug in the logic above.\");\n    return nextHeader;\n  }\n}\nexports.QueryClient = QueryClient;","map":{"version":3,"names":["ics23_1","require","encoding_1","stream_1","utils_1","checkAndParseOp","op","kind","key","type","Error","arrayContentEquals","toHex","ics23","CommitmentProof","decode","data","QueryClient","constructor","tmClient","withExtensions","extensionSetups","client","extensions","map","setupExtension","extension","assert","isNonNullObject","moduleKey","moduleValue","Object","entries","current","queryVerified","store","queryKey","desiredHeight","value","queryStoreVerified","height","proof","queryRawProof","subProof","ops","storeProof","toAscii","exist","length","nonexist","verifyNonExistence","iavlSpec","verifyExistence","header","getNextHeader","tendermintSpec","appHash","code","log","abciQuery","path","prove","_a","queryUnverified","request","response","queryAbci","assertDefined","searchHeight","nextHeader","headersSubscription","subscribeNewBlockHeader","firstHeader","firstEvent","correctHeader","blockchain","blockMetas","meta","find","h","sleep","exports"],"sources":["../../src/queryclient/queryclient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}