{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pubkeyToAddress = exports.pubkeyToRawAddress = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = void 0;\nvar crypto_1 = require(\"@cosmjs/crypto\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nfunction rawEd25519PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 32) {\n    throw new Error(\"Invalid Ed25519 pubkey length: \".concat(pubkeyData.length));\n  }\n  return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n}\nexports.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;\nfunction rawSecp256k1PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 33) {\n    throw new Error(\"Invalid Secp256k1 pubkey length (compressed): \".concat(pubkeyData.length));\n  }\n  return (0, crypto_1.ripemd160)((0, crypto_1.sha256)(pubkeyData));\n}\nexports.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress;\n/**\n * Returns Tendermint address as bytes.\n *\n * This is for addresses that are derived by the Tendermint keypair (typically Ed25519).\n * Sometimes those addresses are bech32-encoded and contain the term \"cons\" in the presix\n * (\"cosmosvalcons1...\").\n *\n * For secp256k1 this assumes we already have a compressed pubkey, which is the default in Cosmos.\n */\nfunction pubkeyToRawAddress(type, data) {\n  switch (type) {\n    case \"ed25519\":\n      return rawEd25519PubkeyToRawAddress(data);\n    case \"secp256k1\":\n      return rawSecp256k1PubkeyToRawAddress(data);\n    default:\n      // Keep this case here to guard against new types being added but not handled\n      throw new Error(\"Pubkey type \".concat(type, \" not supported\"));\n  }\n}\nexports.pubkeyToRawAddress = pubkeyToRawAddress;\n/**\n * Returns Tendermint address in uppercase hex format.\n *\n * This is for addresses that are derived by the Tendermint keypair (typically Ed25519).\n * Sometimes those addresses are bech32-encoded and contain the term \"cons\" in the presix\n * (\"cosmosvalcons1...\").\n *\n * For secp256k1 this assumes we already have a compressed pubkey, which is the default in Cosmos.\n */\nfunction pubkeyToAddress(type, data) {\n  return (0, encoding_1.toHex)(pubkeyToRawAddress(type, data)).toUpperCase();\n}\nexports.pubkeyToAddress = pubkeyToAddress;","map":null,"metadata":{},"sourceType":"script"}