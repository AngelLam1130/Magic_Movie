{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nconst tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst tx_4 = require(\"cosmjs-types/cosmwasm/wasm/v1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst pako_1 = __importDefault(require(\"pako\"));\nconst cosmwasmclient_1 = require(\"./cosmwasmclient\");\nconst modules_1 = require(\"./modules\");\nfunction createDeliverTxResponseErrorMessage(result) {\n  return `Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`;\n}\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes, ...modules_1.wasmTypes]);\n}\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n  constructor(tmClient, signer, options) {\n    super(tmClient);\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new stargate_1.AminoTypes({\n        ...(0, modules_1.createWasmAminoConverters)(),\n        ...(0, stargate_1.createBankAminoConverters)()\n      })\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    this.gasPrice = options.gasPrice;\n  }\n  static async connectWithSigner(endpoint, signer, options = {}) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningCosmWasmClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n  static async offline(signer, options = {}) {\n    return new SigningCosmWasmClient(undefined, signer, options);\n  }\n  async simulate(signerAddress, messages, memo) {\n    const anyMsgs = messages.map(m => this.registry.encodeAsAny(m));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n    const {\n      sequence\n    } = await this.getSequence(signerAddress);\n    const {\n      gasInfo\n    } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n    (0, utils_1.assertDefined)(gasInfo);\n    return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n  }\n  /** Uploads code and returns a receipt, including the code ID */\n  async upload(senderAddress, wasmCode, fee, memo = \"\") {\n    const compressed = pako_1.default.gzip(wasmCode, {\n      level: 9\n    });\n    const storeCodeMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n      value: tx_4.MsgStoreCode.fromPartial({\n        sender: senderAddress,\n        wasmByteCode: compressed\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [storeCodeMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n    const codeIdAttr = stargate_1.logs.findAttribute(parsedLogs, \"store_code\", \"code_id\");\n    return {\n      originalSize: wasmCode.length,\n      originalChecksum: (0, encoding_1.toHex)((0, crypto_1.sha256)(wasmCode)),\n      compressedSize: compressed.length,\n      compressedChecksum: (0, encoding_1.toHex)((0, crypto_1.sha256)(compressed)),\n      codeId: Number.parseInt(codeIdAttr.value, 10),\n      logs: parsedLogs,\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async instantiate(senderAddress, codeId, msg, label, fee, options = {}) {\n    const instantiateContractMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n      value: tx_4.MsgInstantiateContract.fromPartial({\n        sender: senderAddress,\n        codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n        label: label,\n        msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n        funds: [...(options.funds || [])],\n        admin: options.admin\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [instantiateContractMsg], fee, options.memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n    const contractAddressAttr = stargate_1.logs.findAttribute(parsedLogs, \"instantiate\", \"_contract_address\");\n    return {\n      contractAddress: contractAddressAttr.value,\n      logs: parsedLogs,\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async updateAdmin(senderAddress, contractAddress, newAdmin, fee, memo = \"\") {\n    const updateAdminMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n      value: tx_4.MsgUpdateAdmin.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress,\n        newAdmin: newAdmin\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [updateAdminMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async clearAdmin(senderAddress, contractAddress, fee, memo = \"\") {\n    const clearAdminMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n      value: tx_4.MsgClearAdmin.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [clearAdminMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async migrate(senderAddress, contractAddress, codeId, migrateMsg, fee, memo = \"\") {\n    const migrateContractMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n      value: tx_4.MsgMigrateContract.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress,\n        codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n        msg: (0, encoding_1.toUtf8)(JSON.stringify(migrateMsg))\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [migrateContractMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async execute(senderAddress, contractAddress, msg, fee, memo = \"\", funds) {\n    const instruction = {\n      contractAddress: contractAddress,\n      msg: msg,\n      funds: funds\n    };\n    return this.executeMultiple(senderAddress, [instruction], fee, memo);\n  }\n  /**\n   * Like `execute` but allows executing multiple messages in one transaction.\n   */\n  async executeMultiple(senderAddress, instructions, fee, memo = \"\") {\n    const msgs = instructions.map(i => ({\n      typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n      value: tx_4.MsgExecuteContract.fromPartial({\n        sender: senderAddress,\n        contract: i.contractAddress,\n        msg: (0, encoding_1.toUtf8)(JSON.stringify(i.msg)),\n        funds: [...(i.funds || [])]\n      })\n    }));\n    const result = await this.signAndBroadcast(senderAddress, msgs, fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async sendTokens(senderAddress, recipientAddress, amount, fee, memo = \"\") {\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_2.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress,\n        amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_2.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress,\n        amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n  async withdrawRewards(delegatorAddress, validatorAddress, fee, memo = \"\") {\n    const withdrawDelegatorRewardMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawDelegatorRewardMsg], fee, memo);\n  }\n  /**\n   * Creates a transaction with the given messages, fee and memo. Then signs and broadcasts the transaction.\n   *\n   * @param signerAddress The address that will sign transactions using this instance. The signer must be able to sign with this address.\n   * @param messages\n   * @param fee\n   * @param memo\n   */\n  async signAndBroadcast(signerAddress, messages, fee, memo = \"\") {\n    let usedFee;\n    if (fee == \"auto\" || typeof fee === \"number\") {\n      (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n      const gasEstimation = await this.simulate(signerAddress, messages, memo);\n      const multiplier = typeof fee === \"number\" ? fee : 1.3;\n      usedFee = (0, stargate_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n    } else {\n      usedFee = fee;\n    }\n    const txRaw = await this.sign(signerAddress, messages, usedFee, memo);\n    const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n    return (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n  async signAmino(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n        memo: signed.memo\n      }\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBody);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n  async signDirect(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const txBody = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBody);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit, fee.granter, fee.payer);\n    const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n}\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":{"version":3,"names":["amino_1","require","crypto_1","encoding_1","math_1","proto_signing_1","stargate_1","tendermint_rpc_1","utils_1","tx_1","tx_2","signing_1","tx_3","tx_4","long_1","__importDefault","pako_1","cosmwasmclient_1","modules_1","createDeliverTxResponseErrorMessage","result","transactionHash","height","code","rawLog","createDefaultRegistry","Registry","defaultRegistryTypes","wasmTypes","SigningCosmWasmClient","CosmWasmClient","constructor","tmClient","signer","options","registry","aminoTypes","AminoTypes","createWasmAminoConverters","createBankAminoConverters","broadcastTimeoutMs","broadcastPollIntervalMs","gasPrice","connectWithSigner","endpoint","Tendermint34Client","connect","offline","undefined","simulate","signerAddress","messages","memo","anyMsgs","map","m","encodeAsAny","accountFromSigner","getAccounts","find","account","address","Error","pubkey","encodeSecp256k1Pubkey","sequence","getSequence","gasInfo","forceGetQueryClient","tx","assertDefined","Uint53","fromString","gasUsed","toString","toNumber","upload","senderAddress","wasmCode","fee","compressed","default","gzip","level","storeCodeMsg","typeUrl","value","MsgStoreCode","fromPartial","sender","wasmByteCode","signAndBroadcast","isDeliverTxFailure","parsedLogs","logs","parseRawLog","codeIdAttr","findAttribute","originalSize","length","originalChecksum","toHex","sha256","compressedSize","compressedChecksum","codeId","Number","parseInt","events","gasWanted","instantiate","msg","label","instantiateContractMsg","MsgInstantiateContract","toUtf8","JSON","stringify","funds","admin","contractAddressAttr","contractAddress","updateAdmin","newAdmin","updateAdminMsg","MsgUpdateAdmin","contract","clearAdmin","clearAdminMsg","MsgClearAdmin","migrate","migrateMsg","migrateContractMsg","MsgMigrateContract","execute","instruction","executeMultiple","instructions","msgs","i","MsgExecuteContract","sendTokens","recipientAddress","amount","sendMsg","fromAddress","toAddress","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","MsgDelegate","undelegateTokens","undelegateMsg","MsgUndelegate","withdrawRewards","withdrawDelegatorRewardMsg","MsgWithdrawDelegatorReward","usedFee","gasEstimation","multiplier","calculateFee","Math","round","txRaw","sign","txBytes","TxRaw","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","chainId","getChainId","isOfflineDirectSigner","signDirect","signAmino","assert","encodePubkey","signMode","SignMode","SIGN_MODE_LEGACY_AMINO_JSON","toAmino","signDoc","makeSignDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyBytes","signedGasLimit","Int53","gas","signedSequence","signedAuthInfoBytes","makeAuthInfoBytes","granter","payer","bodyBytes","authInfoBytes","signatures","fromBase64","txBody","txBodyBytes","gasLimit","exports"],"sources":["../src/signingcosmwasmclient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}