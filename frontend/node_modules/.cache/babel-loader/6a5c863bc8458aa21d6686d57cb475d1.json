{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\nvar math_1 = require(\"@cosmjs/math\");\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\nvar vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\nfunction accountFromBaseAccount(input) {\n  var address = input.address,\n    pubKey = input.pubKey,\n    accountNumber = input.accountNumber,\n    sequence = input.sequence;\n  var pubkey = (0, proto_signing_1.decodePubkey)(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Basic implementation of AccountParser. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\nfunction accountFromAny(input) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  var typeUrl = input.typeUrl,\n    value = input.value;\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        var baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        var _baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n        (0, utils_1.assert)(_baseAccount);\n        return accountFromBaseAccount(_baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        var _baseAccount2 = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n        (0, utils_1.assert)(_baseAccount2);\n        return accountFromBaseAccount(_baseAccount2);\n      }\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        var _baseAccount3 = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n        (0, utils_1.assert)(_baseAccount3);\n        return accountFromBaseAccount(_baseAccount3);\n      }\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        var _baseAccount4 = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n        (0, utils_1.assert)(_baseAccount4);\n        return accountFromBaseAccount(_baseAccount4);\n      }\n    default:\n      throw new Error(\"Unsupported type: '\".concat(typeUrl, \"'\"));\n  }\n}\nexports.accountFromAny = accountFromAny;","map":null,"metadata":{},"sourceType":"script"}