{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nconst tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nconst tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst tx_4 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst aminotypes_1 = require(\"./aminotypes\");\nconst fee_1 = require(\"./fee\");\nconst modules_1 = require(\"./modules\");\nconst modules_2 = require(\"./modules\");\nconst stargateclient_1 = require(\"./stargateclient\");\nexports.defaultRegistryTypes = [[\"/cosmos.base.v1beta1.Coin\", coin_1.Coin], ...modules_1.authzTypes, ...modules_1.bankTypes, ...modules_1.distributionTypes, ...modules_1.feegrantTypes, ...modules_1.govTypes, ...modules_1.stakingTypes, ...modules_1.ibcTypes, ...modules_1.vestingTypes];\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\nfunction createDefaultTypes(prefix) {\n  return {\n    ...(0, modules_2.createAuthzAminoConverters)(),\n    ...(0, modules_2.createBankAminoConverters)(),\n    ...(0, modules_2.createDistributionAminoConverters)(),\n    ...(0, modules_2.createGovAminoConverters)(),\n    ...(0, modules_2.createStakingAminoConverters)(prefix),\n    ...(0, modules_2.createIbcAminoConverters)(),\n    ...(0, modules_2.createFeegrantAminoConverters)(),\n    ...(0, modules_2.createVestingAminoConverters)()\n  };\n}\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n  constructor(tmClient, signer, options) {\n    var _a;\n    super(tmClient, options);\n    // TODO: do we really want to set a default here? Ideally we could get it from the signer such that users only have to set it once.\n    const prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : \"cosmos\";\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new aminotypes_1.AminoTypes(createDefaultTypes(prefix))\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    this.gasPrice = options.gasPrice;\n  }\n  static async connectWithSigner(endpoint, signer, options = {}) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningStargateClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n  static async offline(signer, options = {}) {\n    return new SigningStargateClient(undefined, signer, options);\n  }\n  async simulate(signerAddress, messages, memo) {\n    const anyMsgs = messages.map(m => this.registry.encodeAsAny(m));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n    const {\n      sequence\n    } = await this.getSequence(signerAddress);\n    const {\n      gasInfo\n    } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n    (0, utils_1.assertDefined)(gasInfo);\n    return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n  }\n  async sendTokens(senderAddress, recipientAddress, amount, fee, memo = \"\") {\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_2.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_2.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n  async withdrawRewards(delegatorAddress, validatorAddress, fee, memo = \"\") {\n    const withdrawMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo);\n  }\n  async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, /** timeout in seconds */\n  timeoutTimestamp, fee, memo = \"\") {\n    const timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n    const transferMsg = {\n      typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n      value: tx_4.MsgTransfer.fromPartial({\n        sourcePort: sourcePort,\n        sourceChannel: sourceChannel,\n        sender: senderAddress,\n        receiver: recipientAddress,\n        token: transferAmount,\n        timeoutHeight: timeoutHeight,\n        timeoutTimestamp: timeoutTimestampNanoseconds\n      })\n    };\n    return this.signAndBroadcast(senderAddress, [transferMsg], fee, memo);\n  }\n  async signAndBroadcast(signerAddress, messages, fee, memo = \"\") {\n    let usedFee;\n    if (fee == \"auto\" || typeof fee === \"number\") {\n      (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n      const gasEstimation = await this.simulate(signerAddress, messages, memo);\n      const multiplier = typeof fee === \"number\" ? fee : 1.3;\n      usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n    } else {\n      usedFee = fee;\n    }\n    const txRaw = await this.sign(signerAddress, messages, usedFee, memo);\n    const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and assembles the signed transaction.\n   *\n   * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n   *\n   * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n   * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n   * (See the SigningStargateClient.offline constructor).\n   */\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n    return (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n  async signAmino(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n      memo: signed.memo\n    };\n    const signedTxBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: signedTxBody\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n  async signDirect(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const txBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit, fee.granter, fee.payer);\n    const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n}\nexports.SigningStargateClient = SigningStargateClient;","map":{"version":3,"names":["amino_1","require","encoding_1","math_1","proto_signing_1","tendermint_rpc_1","utils_1","coin_1","tx_1","tx_2","signing_1","tx_3","tx_4","long_1","__importDefault","aminotypes_1","fee_1","modules_1","modules_2","stargateclient_1","exports","defaultRegistryTypes","Coin","authzTypes","bankTypes","distributionTypes","feegrantTypes","govTypes","stakingTypes","ibcTypes","vestingTypes","createDefaultRegistry","Registry","createDefaultTypes","prefix","createAuthzAminoConverters","createBankAminoConverters","createDistributionAminoConverters","createGovAminoConverters","createStakingAminoConverters","createIbcAminoConverters","createFeegrantAminoConverters","createVestingAminoConverters","SigningStargateClient","StargateClient","constructor","tmClient","signer","options","_a","registry","aminoTypes","AminoTypes","broadcastTimeoutMs","broadcastPollIntervalMs","gasPrice","connectWithSigner","endpoint","Tendermint34Client","connect","offline","undefined","simulate","signerAddress","messages","memo","anyMsgs","map","m","encodeAsAny","accountFromSigner","getAccounts","find","account","address","Error","pubkey","encodeSecp256k1Pubkey","sequence","getSequence","gasInfo","forceGetQueryClient","tx","assertDefined","Uint53","fromString","gasUsed","toString","toNumber","sendTokens","senderAddress","recipientAddress","amount","fee","sendMsg","typeUrl","value","fromAddress","toAddress","signAndBroadcast","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","MsgDelegate","fromPartial","undelegateTokens","undelegateMsg","MsgUndelegate","withdrawRewards","withdrawMsg","MsgWithdrawDelegatorReward","sendIbcTokens","transferAmount","sourcePort","sourceChannel","timeoutHeight","timeoutTimestamp","timeoutTimestampNanoseconds","default","fromNumber","multiply","transferMsg","MsgTransfer","sender","receiver","token","usedFee","gasEstimation","multiplier","calculateFee","Math","round","txRaw","sign","txBytes","TxRaw","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","chainId","getChainId","isOfflineDirectSigner","signDirect","signAmino","assert","encodePubkey","signMode","SignMode","SIGN_MODE_LEGACY_AMINO_JSON","msgs","msg","toAmino","signDoc","makeSignDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyEncodeObject","signedTxBodyBytes","signedGasLimit","Int53","gas","signedSequence","signedAuthInfoBytes","makeAuthInfoBytes","granter","payer","bodyBytes","authInfoBytes","signatures","fromBase64","txBodyEncodeObject","txBodyBytes","gasLimit"],"sources":["../src/signingstargateclient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}