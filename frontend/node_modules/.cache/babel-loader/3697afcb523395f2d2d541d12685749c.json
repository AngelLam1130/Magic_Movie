{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/inherits\");\nvar _objectSpread = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\nvar amino_1 = require(\"@cosmjs/amino\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\nvar tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nvar tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nvar tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nvar signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nvar tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nvar tx_4 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\nvar long_1 = __importDefault(require(\"long\"));\nvar aminotypes_1 = require(\"./aminotypes\");\nvar fee_1 = require(\"./fee\");\nvar modules_1 = require(\"./modules\");\nvar modules_2 = require(\"./modules\");\nvar stargateclient_1 = require(\"./stargateclient\");\nexports.defaultRegistryTypes = [[\"/cosmos.base.v1beta1.Coin\", coin_1.Coin]].concat(_toConsumableArray(modules_1.authzTypes), _toConsumableArray(modules_1.bankTypes), _toConsumableArray(modules_1.distributionTypes), _toConsumableArray(modules_1.feegrantTypes), _toConsumableArray(modules_1.govTypes), _toConsumableArray(modules_1.stakingTypes), _toConsumableArray(modules_1.ibcTypes), _toConsumableArray(modules_1.vestingTypes));\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\nfunction createDefaultTypes(prefix) {\n  return _objectSpread({}, (0, modules_2.createAuthzAminoConverters)(), (0, modules_2.createBankAminoConverters)(), (0, modules_2.createDistributionAminoConverters)(), (0, modules_2.createGovAminoConverters)(), (0, modules_2.createStakingAminoConverters)(prefix), (0, modules_2.createIbcAminoConverters)(), (0, modules_2.createFeegrantAminoConverters)(), (0, modules_2.createVestingAminoConverters)());\n}\nvar SigningStargateClient = /*#__PURE__*/function (_stargateclient_1$Sta, _simulate, _sendTokens, _delegateTokens, _undelegateTokens, _withdrawRewards, _sendIbcTokens, _signAndBroadcast, _sign, _signAmino, _signDirect, _connectWithSigner, _offline) {\n  _inherits(SigningStargateClient, _stargateclient_1$Sta);\n  function SigningStargateClient(tmClient, signer, options) {\n    var _this;\n    _classCallCheck(this, SigningStargateClient);\n    var _a;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SigningStargateClient).call(this, tmClient, options));\n    // TODO: do we really want to set a default here? Ideally we could get it from the signer such that users only have to set it once.\n    var prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : \"cosmos\";\n    var _options$registry = options.registry,\n      registry = _options$registry === void 0 ? createDefaultRegistry() : _options$registry,\n      _options$aminoTypes = options.aminoTypes,\n      aminoTypes = _options$aminoTypes === void 0 ? new aminotypes_1.AminoTypes(createDefaultTypes(prefix)) : _options$aminoTypes;\n    _this.registry = registry;\n    _this.aminoTypes = aminoTypes;\n    _this.signer = signer;\n    _this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    _this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    _this.gasPrice = options.gasPrice;\n    return _this;\n  }\n  _createClass(SigningStargateClient, [{\n    key: \"simulate\",\n    value: function simulate(_x, _x2, _x3) {\n      return (_simulate = _simulate || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signerAddress, messages, memo) {\n        var _this2 = this;\n        var anyMsgs, accountFromSigner, pubkey, _yield$this$getSequen, sequence, _yield$this$forceGetQ, gasInfo;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              anyMsgs = messages.map(function (m) {\n                return _this2.registry.encodeAsAny(m);\n              });\n              _context.next = 3;\n              return this.signer.getAccounts();\n            case 3:\n              accountFromSigner = _context.sent.find(function (account) {\n                return account.address === signerAddress;\n              });\n              if (accountFromSigner) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error(\"Failed to retrieve account from signer\");\n            case 6:\n              pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n              _context.next = 9;\n              return this.getSequence(signerAddress);\n            case 9:\n              _yield$this$getSequen = _context.sent;\n              sequence = _yield$this$getSequen.sequence;\n              _context.next = 13;\n              return this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n            case 13:\n              _yield$this$forceGetQ = _context.sent;\n              gasInfo = _yield$this$forceGetQ.gasInfo;\n              (0, utils_1.assertDefined)(gasInfo);\n              return _context.abrupt(\"return\", math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber());\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"sendTokens\",\n    value: function sendTokens(_x4, _x5, _x6, _x7) {\n      return (_sendTokens = _sendTokens || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(senderAddress, recipientAddress, amount, fee) {\n        var memo,\n          sendMsg,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              memo = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : \"\";\n              sendMsg = {\n                typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n                value: {\n                  fromAddress: senderAddress,\n                  toAddress: recipientAddress,\n                  amount: _toConsumableArray(amount)\n                }\n              };\n              return _context2.abrupt(\"return\", this.signAndBroadcast(senderAddress, [sendMsg], fee, memo));\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"delegateTokens\",\n    value: function delegateTokens(_x8, _x9, _x10, _x11) {\n      return (_delegateTokens = _delegateTokens || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(delegatorAddress, validatorAddress, amount, fee) {\n        var memo,\n          delegateMsg,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              memo = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : \"\";\n              delegateMsg = {\n                typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n                value: tx_2.MsgDelegate.fromPartial({\n                  delegatorAddress: delegatorAddress,\n                  validatorAddress: validatorAddress,\n                  amount: amount\n                })\n              };\n              return _context3.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo));\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"undelegateTokens\",\n    value: function undelegateTokens(_x12, _x13, _x14, _x15) {\n      return (_undelegateTokens = _undelegateTokens || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(delegatorAddress, validatorAddress, amount, fee) {\n        var memo,\n          undelegateMsg,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              memo = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : \"\";\n              undelegateMsg = {\n                typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n                value: tx_2.MsgUndelegate.fromPartial({\n                  delegatorAddress: delegatorAddress,\n                  validatorAddress: validatorAddress,\n                  amount: amount\n                })\n              };\n              return _context4.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo));\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"withdrawRewards\",\n    value: function withdrawRewards(_x16, _x17, _x18) {\n      return (_withdrawRewards = _withdrawRewards || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(delegatorAddress, validatorAddress, fee) {\n        var memo,\n          withdrawMsg,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              memo = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : \"\";\n              withdrawMsg = {\n                typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n                value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n                  delegatorAddress: delegatorAddress,\n                  validatorAddress: validatorAddress\n                })\n              };\n              return _context5.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo));\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"sendIbcTokens\",\n    value: function sendIbcTokens(_x19, _x20, _x21, _x22, _x23, _x24, _x25, _x26) {\n      return (_sendIbcTokens = _sendIbcTokens || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, /** timeout in seconds */\n      timeoutTimestamp, fee) {\n        var memo,\n          timeoutTimestampNanoseconds,\n          transferMsg,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              memo = _args6.length > 8 && _args6[8] !== undefined ? _args6[8] : \"\";\n              timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n              transferMsg = {\n                typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n                value: tx_4.MsgTransfer.fromPartial({\n                  sourcePort: sourcePort,\n                  sourceChannel: sourceChannel,\n                  sender: senderAddress,\n                  receiver: recipientAddress,\n                  token: transferAmount,\n                  timeoutHeight: timeoutHeight,\n                  timeoutTimestamp: timeoutTimestampNanoseconds\n                })\n              };\n              return _context6.abrupt(\"return\", this.signAndBroadcast(senderAddress, [transferMsg], fee, memo));\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"signAndBroadcast\",\n    value: function signAndBroadcast(_x27, _x28, _x29) {\n      return (_signAndBroadcast = _signAndBroadcast || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(signerAddress, messages, fee) {\n        var memo,\n          usedFee,\n          gasEstimation,\n          multiplier,\n          txRaw,\n          txBytes,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              memo = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : \"\";\n              if (!(fee == \"auto\" || typeof fee === \"number\")) {\n                _context7.next = 10;\n                break;\n              }\n              (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n              _context7.next = 5;\n              return this.simulate(signerAddress, messages, memo);\n            case 5:\n              gasEstimation = _context7.sent;\n              multiplier = typeof fee === \"number\" ? fee : 1.3;\n              usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n              _context7.next = 11;\n              break;\n            case 10:\n              usedFee = fee;\n            case 11:\n              _context7.next = 13;\n              return this.sign(signerAddress, messages, usedFee, memo);\n            case 13:\n              txRaw = _context7.sent;\n              txBytes = tx_3.TxRaw.encode(txRaw).finish();\n              return _context7.abrupt(\"return\", this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs));\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature and assembles the signed transaction.\n     *\n     * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n     *\n     * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n     * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n     * (See the SigningStargateClient.offline constructor).\n     */\n  }, {\n    key: \"sign\",\n    value: function sign(_x30, _x31, _x32, _x33, _x34) {\n      return (_sign = _sign || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(signerAddress, messages, fee, memo, explicitSignerData) {\n        var signerData, _yield$this$getSequen2, accountNumber, sequence, chainId;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!explicitSignerData) {\n                _context8.next = 4;\n                break;\n              }\n              signerData = explicitSignerData;\n              _context8.next = 13;\n              break;\n            case 4:\n              _context8.next = 6;\n              return this.getSequence(signerAddress);\n            case 6:\n              _yield$this$getSequen2 = _context8.sent;\n              accountNumber = _yield$this$getSequen2.accountNumber;\n              sequence = _yield$this$getSequen2.sequence;\n              _context8.next = 11;\n              return this.getChainId();\n            case 11:\n              chainId = _context8.sent;\n              signerData = {\n                accountNumber: accountNumber,\n                sequence: sequence,\n                chainId: chainId\n              };\n            case 13:\n              return _context8.abrupt(\"return\", (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData));\n            case 14:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"signAmino\",\n    value: function signAmino(_x35, _x36, _x37, _x38, _x39) {\n      return (_signAmino = _signAmino || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(signerAddress, messages, fee, memo, _ref) {\n        var _this3 = this;\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, signMode, msgs, signDoc, _yield$this$signer$si, signature, signed, signedTxBody, signedTxBodyEncodeObject, signedTxBodyBytes, signedGasLimit, signedSequence, signedAuthInfoBytes;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              accountNumber = _ref.accountNumber, sequence = _ref.sequence, chainId = _ref.chainId;\n              (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n              _context9.next = 4;\n              return this.signer.getAccounts();\n            case 4:\n              accountFromSigner = _context9.sent.find(function (account) {\n                return account.address === signerAddress;\n              });\n              if (accountFromSigner) {\n                _context9.next = 7;\n                break;\n              }\n              throw new Error(\"Failed to retrieve account from signer\");\n            case 7:\n              pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n              signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n              msgs = messages.map(function (msg) {\n                return _this3.aminoTypes.toAmino(msg);\n              });\n              signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n              _context9.next = 13;\n              return this.signer.signAmino(signerAddress, signDoc);\n            case 13:\n              _yield$this$signer$si = _context9.sent;\n              signature = _yield$this$signer$si.signature;\n              signed = _yield$this$signer$si.signed;\n              signedTxBody = {\n                messages: signed.msgs.map(function (msg) {\n                  return _this3.aminoTypes.fromAmino(msg);\n                }),\n                memo: signed.memo\n              };\n              signedTxBodyEncodeObject = {\n                typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                value: signedTxBody\n              };\n              signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n              signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n              signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n              signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n                pubkey: pubkey,\n                sequence: signedSequence\n              }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);\n              return _context9.abrupt(\"return\", tx_3.TxRaw.fromPartial({\n                bodyBytes: signedTxBodyBytes,\n                authInfoBytes: signedAuthInfoBytes,\n                signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n              }));\n            case 23:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"signDirect\",\n    value: function signDirect(_x40, _x41, _x42, _x43, _x44) {\n      return (_signDirect = _signDirect || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(signerAddress, messages, fee, memo, _ref2) {\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, txBodyEncodeObject, txBodyBytes, gasLimit, authInfoBytes, signDoc, _yield$this$signer$si2, signature, signed;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              accountNumber = _ref2.accountNumber, sequence = _ref2.sequence, chainId = _ref2.chainId;\n              (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n              _context10.next = 4;\n              return this.signer.getAccounts();\n            case 4:\n              accountFromSigner = _context10.sent.find(function (account) {\n                return account.address === signerAddress;\n              });\n              if (accountFromSigner) {\n                _context10.next = 7;\n                break;\n              }\n              throw new Error(\"Failed to retrieve account from signer\");\n            case 7:\n              pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n              txBodyEncodeObject = {\n                typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                value: {\n                  messages: messages,\n                  memo: memo\n                }\n              };\n              txBodyBytes = this.registry.encode(txBodyEncodeObject);\n              gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n              authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n                pubkey: pubkey,\n                sequence: sequence\n              }], fee.amount, gasLimit, fee.granter, fee.payer);\n              signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n              _context10.next = 15;\n              return this.signer.signDirect(signerAddress, signDoc);\n            case 15:\n              _yield$this$signer$si2 = _context10.sent;\n              signature = _yield$this$signer$si2.signature;\n              signed = _yield$this$signer$si2.signed;\n              return _context10.abrupt(\"return\", tx_3.TxRaw.fromPartial({\n                bodyBytes: signed.bodyBytes,\n                authInfoBytes: signed.authInfoBytes,\n                signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n              }));\n            case 19:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }))).apply(this, arguments);\n    }\n  }], [{\n    key: \"connectWithSigner\",\n    value: function connectWithSigner(_x45, _x46) {\n      return (_connectWithSigner = _connectWithSigner || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(endpoint, signer) {\n        var options,\n          tmClient,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              options = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {};\n              _context11.next = 3;\n              return tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n            case 3:\n              tmClient = _context11.sent;\n              return _context11.abrupt(\"return\", new SigningStargateClient(tmClient, signer, options));\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Creates a client in offline mode.\n     *\n     * This should only be used in niche cases where you know exactly what you're doing,\n     * e.g. when building an offline signing application.\n     *\n     * When you try to use online functionality with such a signer, an\n     * exception will be raised.\n     */\n  }, {\n    key: \"offline\",\n    value: function offline(_x47) {\n      return (_offline = _offline || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(signer) {\n        var options,\n          _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n              return _context12.abrupt(\"return\", new SigningStargateClient(undefined, signer, options));\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return SigningStargateClient;\n}(stargateclient_1.StargateClient);\nexports.SigningStargateClient = SigningStargateClient;","map":null,"metadata":{},"sourceType":"script"}