{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LightClientAttackEvidence = exports.EvidenceList = exports.Evidence = exports.DuplicateVoteEvidence = void 0;\nvar _types = require(\"./types\");\nvar _timestamp = require(\"../../google/protobuf/timestamp\");\nvar _validator = require(\"./validator\");\nvar _helpers = require(\"../../helpers\");\nvar _m0 = _interopRequireWildcard(require(\"protobufjs/minimal\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction createBaseEvidence() {\n  return {\n    duplicateVoteEvidence: undefined,\n    lightClientAttackEvidence: undefined\n  };\n}\nvar Evidence = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.duplicateVoteEvidence !== undefined) {\n      DuplicateVoteEvidence.encode(message.duplicateVoteEvidence, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.lightClientAttackEvidence !== undefined) {\n      LightClientAttackEvidence.encode(message.lightClientAttackEvidence, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseEvidence();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.duplicateVoteEvidence = DuplicateVoteEvidence.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.lightClientAttackEvidence = LightClientAttackEvidence.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = createBaseEvidence();\n    message.duplicateVoteEvidence = object.duplicateVoteEvidence !== undefined && object.duplicateVoteEvidence !== null ? DuplicateVoteEvidence.fromPartial(object.duplicateVoteEvidence) : undefined;\n    message.lightClientAttackEvidence = object.lightClientAttackEvidence !== undefined && object.lightClientAttackEvidence !== null ? LightClientAttackEvidence.fromPartial(object.lightClientAttackEvidence) : undefined;\n    return message;\n  }\n};\nexports.Evidence = Evidence;\nfunction createBaseDuplicateVoteEvidence() {\n  return {\n    voteA: _types.Vote.fromPartial({}),\n    voteB: _types.Vote.fromPartial({}),\n    totalVotingPower: _helpers.Long.ZERO,\n    validatorPower: _helpers.Long.ZERO,\n    timestamp: undefined\n  };\n}\nvar DuplicateVoteEvidence = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.voteA !== undefined) {\n      _types.Vote.encode(message.voteA, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.voteB !== undefined) {\n      _types.Vote.encode(message.voteB, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.totalVotingPower.isZero()) {\n      writer.uint32(24).int64(message.totalVotingPower);\n    }\n    if (!message.validatorPower.isZero()) {\n      writer.uint32(32).int64(message.validatorPower);\n    }\n    if (message.timestamp !== undefined) {\n      _timestamp.Timestamp.encode((0, _helpers.toTimestamp)(message.timestamp), writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseDuplicateVoteEvidence();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.voteA = _types.Vote.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.voteB = _types.Vote.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.totalVotingPower = reader.int64();\n          break;\n        case 4:\n          message.validatorPower = reader.int64();\n          break;\n        case 5:\n          message.timestamp = (0, _helpers.fromTimestamp)(_timestamp.Timestamp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$timestamp;\n    var message = createBaseDuplicateVoteEvidence();\n    message.voteA = object.voteA !== undefined && object.voteA !== null ? _types.Vote.fromPartial(object.voteA) : undefined;\n    message.voteB = object.voteB !== undefined && object.voteB !== null ? _types.Vote.fromPartial(object.voteB) : undefined;\n    message.totalVotingPower = object.totalVotingPower !== undefined && object.totalVotingPower !== null ? _helpers.Long.fromValue(object.totalVotingPower) : _helpers.Long.ZERO;\n    message.validatorPower = object.validatorPower !== undefined && object.validatorPower !== null ? _helpers.Long.fromValue(object.validatorPower) : _helpers.Long.ZERO;\n    message.timestamp = (_object$timestamp = object.timestamp) !== null && _object$timestamp !== void 0 ? _object$timestamp : undefined;\n    return message;\n  }\n};\nexports.DuplicateVoteEvidence = DuplicateVoteEvidence;\nfunction createBaseLightClientAttackEvidence() {\n  return {\n    conflictingBlock: _types.LightBlock.fromPartial({}),\n    commonHeight: _helpers.Long.ZERO,\n    byzantineValidators: [],\n    totalVotingPower: _helpers.Long.ZERO,\n    timestamp: undefined\n  };\n}\nvar LightClientAttackEvidence = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.conflictingBlock !== undefined) {\n      _types.LightBlock.encode(message.conflictingBlock, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.commonHeight.isZero()) {\n      writer.uint32(16).int64(message.commonHeight);\n    }\n    var _iterator = _createForOfIteratorHelper(message.byzantineValidators),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        _validator.Validator.encode(v, writer.uint32(26).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (!message.totalVotingPower.isZero()) {\n      writer.uint32(32).int64(message.totalVotingPower);\n    }\n    if (message.timestamp !== undefined) {\n      _timestamp.Timestamp.encode((0, _helpers.toTimestamp)(message.timestamp), writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseLightClientAttackEvidence();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.conflictingBlock = _types.LightBlock.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.commonHeight = reader.int64();\n          break;\n        case 3:\n          message.byzantineValidators.push(_validator.Validator.decode(reader, reader.uint32()));\n          break;\n        case 4:\n          message.totalVotingPower = reader.int64();\n          break;\n        case 5:\n          message.timestamp = (0, _helpers.fromTimestamp)(_timestamp.Timestamp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$byzantineVali, _object$timestamp2;\n    var message = createBaseLightClientAttackEvidence();\n    message.conflictingBlock = object.conflictingBlock !== undefined && object.conflictingBlock !== null ? _types.LightBlock.fromPartial(object.conflictingBlock) : undefined;\n    message.commonHeight = object.commonHeight !== undefined && object.commonHeight !== null ? _helpers.Long.fromValue(object.commonHeight) : _helpers.Long.ZERO;\n    message.byzantineValidators = ((_object$byzantineVali = object.byzantineValidators) === null || _object$byzantineVali === void 0 ? void 0 : _object$byzantineVali.map(function (e) {\n      return _validator.Validator.fromPartial(e);\n    })) || [];\n    message.totalVotingPower = object.totalVotingPower !== undefined && object.totalVotingPower !== null ? _helpers.Long.fromValue(object.totalVotingPower) : _helpers.Long.ZERO;\n    message.timestamp = (_object$timestamp2 = object.timestamp) !== null && _object$timestamp2 !== void 0 ? _object$timestamp2 : undefined;\n    return message;\n  }\n};\nexports.LightClientAttackEvidence = LightClientAttackEvidence;\nfunction createBaseEvidenceList() {\n  return {\n    evidence: []\n  };\n}\nvar EvidenceList = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    var _iterator2 = _createForOfIteratorHelper(message.evidence),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var v = _step2.value;\n        Evidence.encode(v, writer.uint32(10).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseEvidenceList();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.evidence.push(Evidence.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$evidence;\n    var message = createBaseEvidenceList();\n    message.evidence = ((_object$evidence = object.evidence) === null || _object$evidence === void 0 ? void 0 : _object$evidence.map(function (e) {\n      return Evidence.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nexports.EvidenceList = EvidenceList;","map":null,"metadata":{},"sourceType":"script"}