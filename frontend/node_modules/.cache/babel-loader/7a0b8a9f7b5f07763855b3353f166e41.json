{"ast":null,"code":"'use strict';\n\nvar IsCallable = require('es-abstract/2023/IsCallable');\nvar HasOwnProperty = require('es-abstract/2023/HasOwnProperty');\nvar functionsHaveNames = require('functions-have-names')();\nvar callBound = require('call-bind/callBound');\nvar $functionToString = callBound('Function.prototype.toString');\nvar $stringMatch = callBound('String.prototype.match');\nvar toStr = callBound('Object.prototype.toString');\nvar classRegex = /^class /;\nvar isClass = function isClassConstructor(fn) {\n  if (IsCallable(fn)) {\n    return false;\n  }\n  if (typeof fn !== 'function') {\n    return false;\n  }\n  try {\n    var match = $stringMatch($functionToString(fn), classRegex);\n    return !!match;\n  } catch (e) {}\n  return false;\n};\nvar regex = /\\s*function\\s+([^(\\s]*)\\s*/;\nvar isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing\n\nvar objectClass = '[object Object]';\nvar ddaClass = '[object HTMLAllCollection]';\nvar functionProto = Function.prototype;\nvar isDDA = function isDocumentDotAll() {\n  return false;\n};\nif (typeof document === 'object') {\n  // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly\n  var all = document.all;\n  if (toStr(all) === toStr(document.all)) {\n    isDDA = function isDocumentDotAll(value) {\n      /* globals document: false */\n      // in IE 6-8, typeof document.all is \"object\" and it's truthy\n      if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {\n        try {\n          var str = toStr(value);\n          // IE 6-8 uses `objectClass`\n          return (str === ddaClass || str === objectClass) && value('') == null; // eslint-disable-line eqeqeq\n        } catch (e) {/**/}\n      }\n      return false;\n    };\n  }\n}\nmodule.exports = function getName() {\n  if (isDDA(this) || !isClass(this) && !IsCallable(this)) {\n    throw new TypeError('Function.prototype.name sham getter called on non-function');\n  }\n  if (functionsHaveNames && HasOwnProperty(this, 'name')) {\n    return this.name;\n  }\n  if (this === functionProto) {\n    return '';\n  }\n  var str = $functionToString(this);\n  var match = $stringMatch(str, regex);\n  var name = match && match[1];\n  return name;\n};","map":null,"metadata":{},"sourceType":"script"}