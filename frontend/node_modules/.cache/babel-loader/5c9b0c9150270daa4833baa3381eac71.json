{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _objectSpread = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebsocketClient = void 0;\nvar json_rpc_1 = require(\"@cosmjs/json-rpc\");\nvar socket_1 = require(\"@cosmjs/socket\");\nvar stream_1 = require(\"@cosmjs/stream\");\nvar xstream_1 = require(\"xstream\");\nvar rpcclient_1 = require(\"./rpcclient\");\nfunction defaultErrorHandler(error) {\n  throw error;\n}\nfunction toJsonRpcResponse(message) {\n  // this should never happen, but I want an alert if it does\n  if (message.type !== \"message\") {\n    throw new Error(\"Unexcepted message type on websocket: \".concat(message.type));\n  }\n  var jsonRpcEvent = (0, json_rpc_1.parseJsonRpcResponse)(JSON.parse(message.data));\n  return jsonRpcEvent;\n}\nvar RpcEventProducer = /*#__PURE__*/function () {\n  function RpcEventProducer(request, socket) {\n    _classCallCheck(this, RpcEventProducer);\n    this.running = false;\n    this.subscriptions = [];\n    this.request = request;\n    this.socket = socket;\n  }\n  /**\n   * Implementation of Producer.start\n   */\n  _createClass(RpcEventProducer, [{\n    key: \"start\",\n    value: function start(listener) {\n      if (this.running) {\n        throw Error(\"Already started. Please stop first before restarting.\");\n      }\n      this.running = true;\n      this.connectToClient(listener);\n      this.socket.queueRequest(JSON.stringify(this.request));\n    }\n    /**\n     * Implementation of Producer.stop\n     *\n     * Called by the stream when the stream's last listener stopped listening\n     * or when the producer completed.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n      // Tell the server we are done in order to save resources. We cannot wait for the result.\n      // This may fail when socket connection is not open, thus ignore errors in queueRequest\n      var endRequest = _objectSpread({}, this.request, {\n        method: \"unsubscribe\"\n      });\n      try {\n        this.socket.queueRequest(JSON.stringify(endRequest));\n      } catch (error) {\n        if (error instanceof Error && error.message.match(/socket has disconnected/i)) {\n          // ignore\n        } else {\n          throw error;\n        }\n      }\n    }\n  }, {\n    key: \"connectToClient\",\n    value: function connectToClient(listener) {\n      var _this = this;\n      var responseStream = this.socket.events.map(toJsonRpcResponse);\n      // this should unsubscribe itself, so doesn't need to be removed explicitly\n      var idSubscription = responseStream.filter(function (response) {\n        return response.id === _this.request.id;\n      }).subscribe({\n        next: function next(response) {\n          if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n            _this.closeSubscriptions();\n            listener.error(JSON.stringify(response.error));\n          }\n          idSubscription.unsubscribe();\n        }\n      });\n      // this will fire on a response (success or error)\n      // Tendermint adds an \"#event\" suffix for events that follow a previous subscription\n      // https://github.com/tendermint/tendermint/blob/v0.23.0/rpc/core/events.go#L107\n      var idEventSubscription = responseStream.filter(function (response) {\n        return response.id === _this.request.id;\n      }).subscribe({\n        next: function next(response) {\n          if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n            _this.closeSubscriptions();\n            listener.error(JSON.stringify(response.error));\n          } else {\n            listener.next(response.result);\n          }\n        }\n      });\n      // this will fire in case the websocket disconnects cleanly\n      var nonResponseSubscription = responseStream.subscribe({\n        error: function error(_error) {\n          _this.closeSubscriptions();\n          listener.error(_error);\n        },\n        complete: function complete() {\n          _this.closeSubscriptions();\n          listener.complete();\n        }\n      });\n      this.subscriptions.push(idSubscription, idEventSubscription, nonResponseSubscription);\n    }\n  }, {\n    key: \"closeSubscriptions\",\n    value: function closeSubscriptions() {\n      var _iterator = _createForOfIteratorHelper(this.subscriptions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var subscription = _step.value;\n          subscription.unsubscribe();\n        }\n        // clear unused subscriptions\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.subscriptions = [];\n    }\n  }]);\n  return RpcEventProducer;\n}();\nvar WebsocketClient = /*#__PURE__*/function (_execute, _connected, _responseForRequestId) {\n  function WebsocketClient(baseUrl) {\n    var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultErrorHandler;\n    _classCallCheck(this, WebsocketClient);\n    // Lazily create streams and use the same stream when listening to the same query twice.\n    //\n    // Creating streams is cheap since producer is not started as long as nobody listens to events. Thus this\n    // map is never cleared and there is no need to do so. But unsubscribe all the subscriptions!\n    this.subscriptionStreams = new Map();\n    // accept host.name:port and assume ws protocol\n    // make sure we don't end up with ...//websocket\n    var path = baseUrl.endsWith(\"/\") ? \"websocket\" : \"/websocket\";\n    var cleanBaseUrl = (0, rpcclient_1.hasProtocol)(baseUrl) ? baseUrl : \"ws://\" + baseUrl;\n    this.url = cleanBaseUrl + path;\n    this.socket = new socket_1.ReconnectingSocket(this.url);\n    var errorSubscription = this.socket.events.subscribe({\n      error: function error(_error2) {\n        onError(_error2);\n        errorSubscription.unsubscribe();\n      }\n    });\n    this.jsonRpcResponseStream = this.socket.events.map(toJsonRpcResponse);\n    this.socket.connect();\n  }\n  _createClass(WebsocketClient, [{\n    key: \"execute\",\n    value: function execute(_x) {\n      return (_execute = _execute || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        var pendingResponse, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              pendingResponse = this.responseForRequestId(request.id);\n              this.socket.queueRequest(JSON.stringify(request));\n              _context.next = 4;\n              return pendingResponse;\n            case 4:\n              response = _context.sent;\n              if (!(0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n                _context.next = 7;\n                break;\n              }\n              throw new Error(JSON.stringify(response.error));\n            case 7:\n              return _context.abrupt(\"return\", response);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(request) {\n      if (request.method !== \"subscribe\") {\n        throw new Error(\"Request method must be \\\"subscribe\\\" to start event listening\");\n      }\n      var query = request.params.query;\n      if (typeof query !== \"string\") {\n        throw new Error(\"request.params.query must be a string\");\n      }\n      if (!this.subscriptionStreams.has(query)) {\n        var producer = new RpcEventProducer(request, this.socket);\n        var stream = xstream_1.Stream.create(producer);\n        this.subscriptionStreams.set(query, stream);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.subscriptionStreams.get(query).filter(function (response) {\n        return response.query !== undefined;\n      });\n    }\n    /**\n     * Resolves as soon as websocket is connected. execute() queues requests automatically,\n     * so this should be required for testing purposes only.\n     */\n  }, {\n    key: \"connected\",\n    value: function connected() {\n      return (_connected = _connected || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.socket.connectionStatus.waitFor(socket_1.ConnectionStatus.Connected);\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"responseForRequestId\",\n    value: function responseForRequestId(_x2) {\n      return (_responseForRequestId = _responseForRequestId || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", (0, stream_1.firstEvent)(this.jsonRpcResponseStream.filter(function (r) {\n                return r.id === id;\n              })));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return WebsocketClient;\n}();\nexports.WebsocketClient = WebsocketClient;","map":null,"metadata":{},"sourceType":"script"}