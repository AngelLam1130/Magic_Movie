{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchTxsResult = exports.TxMsgData = exports.MsgData = exports.SimulationResponse = exports.Result = exports.GasInfo = exports.Attribute = exports.StringEvent = exports.ABCIMessageLog = exports.TxResponse = exports.protobufPackage = void 0;\n/* eslint-disable */\nvar long_1 = __importDefault(require(\"long\"));\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nvar any_1 = require(\"../../../../google/protobuf/any\");\nvar types_1 = require(\"../../../../tendermint/abci/types\");\nexports.protobufPackage = \"cosmos.base.abci.v1beta1\";\nfunction createBaseTxResponse() {\n  return {\n    height: long_1.default.ZERO,\n    txhash: \"\",\n    codespace: \"\",\n    code: 0,\n    data: \"\",\n    rawLog: \"\",\n    logs: [],\n    info: \"\",\n    gasWanted: long_1.default.ZERO,\n    gasUsed: long_1.default.ZERO,\n    tx: undefined,\n    timestamp: \"\",\n    events: []\n  };\n}\nexports.TxResponse = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n    if (message.txhash !== \"\") {\n      writer.uint32(18).string(message.txhash);\n    }\n    if (message.codespace !== \"\") {\n      writer.uint32(26).string(message.codespace);\n    }\n    if (message.code !== 0) {\n      writer.uint32(32).uint32(message.code);\n    }\n    if (message.data !== \"\") {\n      writer.uint32(42).string(message.data);\n    }\n    if (message.rawLog !== \"\") {\n      writer.uint32(50).string(message.rawLog);\n    }\n    var _iterator = _createForOfIteratorHelper(message.logs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        exports.ABCIMessageLog.encode(v, writer.uint32(58).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (message.info !== \"\") {\n      writer.uint32(66).string(message.info);\n    }\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(72).int64(message.gasWanted);\n    }\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(80).int64(message.gasUsed);\n    }\n    if (message.tx !== undefined) {\n      any_1.Any.encode(message.tx, writer.uint32(90).fork()).ldelim();\n    }\n    if (message.timestamp !== \"\") {\n      writer.uint32(98).string(message.timestamp);\n    }\n    var _iterator2 = _createForOfIteratorHelper(message.events),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _v = _step2.value;\n        types_1.Event.encode(_v, writer.uint32(106).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseTxResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64();\n          break;\n        case 2:\n          message.txhash = reader.string();\n          break;\n        case 3:\n          message.codespace = reader.string();\n          break;\n        case 4:\n          message.code = reader.uint32();\n          break;\n        case 5:\n          message.data = reader.string();\n          break;\n        case 6:\n          message.rawLog = reader.string();\n          break;\n        case 7:\n          message.logs.push(exports.ABCIMessageLog.decode(reader, reader.uint32()));\n          break;\n        case 8:\n          message.info = reader.string();\n          break;\n        case 9:\n          message.gasWanted = reader.int64();\n          break;\n        case 10:\n          message.gasUsed = reader.int64();\n          break;\n        case 11:\n          message.tx = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 12:\n          message.timestamp = reader.string();\n          break;\n        case 13:\n          message.events.push(types_1.Event.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      height: isSet(object.height) ? long_1.default.fromValue(object.height) : long_1.default.ZERO,\n      txhash: isSet(object.txhash) ? String(object.txhash) : \"\",\n      codespace: isSet(object.codespace) ? String(object.codespace) : \"\",\n      code: isSet(object.code) ? Number(object.code) : 0,\n      data: isSet(object.data) ? String(object.data) : \"\",\n      rawLog: isSet(object.rawLog) ? String(object.rawLog) : \"\",\n      logs: Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map(function (e) {\n        return exports.ABCIMessageLog.fromJSON(e);\n      }) : [],\n      info: isSet(object.info) ? String(object.info) : \"\",\n      gasWanted: isSet(object.gasWanted) ? long_1.default.fromValue(object.gasWanted) : long_1.default.ZERO,\n      gasUsed: isSet(object.gasUsed) ? long_1.default.fromValue(object.gasUsed) : long_1.default.ZERO,\n      tx: isSet(object.tx) ? any_1.Any.fromJSON(object.tx) : undefined,\n      timestamp: isSet(object.timestamp) ? String(object.timestamp) : \"\",\n      events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map(function (e) {\n        return types_1.Event.fromJSON(e);\n      }) : []\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.txhash !== undefined && (obj.txhash = message.txhash);\n    message.codespace !== undefined && (obj.codespace = message.codespace);\n    message.code !== undefined && (obj.code = Math.round(message.code));\n    message.data !== undefined && (obj.data = message.data);\n    message.rawLog !== undefined && (obj.rawLog = message.rawLog);\n    if (message.logs) {\n      obj.logs = message.logs.map(function (e) {\n        return e ? exports.ABCIMessageLog.toJSON(e) : undefined;\n      });\n    } else {\n      obj.logs = [];\n    }\n    message.info !== undefined && (obj.info = message.info);\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.ZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.ZERO).toString());\n    message.tx !== undefined && (obj.tx = message.tx ? any_1.Any.toJSON(message.tx) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp);\n    if (message.events) {\n      obj.events = message.events.map(function (e) {\n        return e ? types_1.Event.toJSON(e) : undefined;\n      });\n    } else {\n      obj.events = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    var message = createBaseTxResponse();\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n    message.txhash = (_a = object.txhash) !== null && _a !== void 0 ? _a : \"\";\n    message.codespace = (_b = object.codespace) !== null && _b !== void 0 ? _b : \"\";\n    message.code = (_c = object.code) !== null && _c !== void 0 ? _c : 0;\n    message.data = (_d = object.data) !== null && _d !== void 0 ? _d : \"\";\n    message.rawLog = (_e = object.rawLog) !== null && _e !== void 0 ? _e : \"\";\n    message.logs = ((_f = object.logs) === null || _f === void 0 ? void 0 : _f.map(function (e) {\n      return exports.ABCIMessageLog.fromPartial(e);\n    })) || [];\n    message.info = (_g = object.info) !== null && _g !== void 0 ? _g : \"\";\n    message.gasWanted = object.gasWanted !== undefined && object.gasWanted !== null ? long_1.default.fromValue(object.gasWanted) : long_1.default.ZERO;\n    message.gasUsed = object.gasUsed !== undefined && object.gasUsed !== null ? long_1.default.fromValue(object.gasUsed) : long_1.default.ZERO;\n    message.tx = object.tx !== undefined && object.tx !== null ? any_1.Any.fromPartial(object.tx) : undefined;\n    message.timestamp = (_h = object.timestamp) !== null && _h !== void 0 ? _h : \"\";\n    message.events = ((_j = object.events) === null || _j === void 0 ? void 0 : _j.map(function (e) {\n      return types_1.Event.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nfunction createBaseABCIMessageLog() {\n  return {\n    msgIndex: 0,\n    log: \"\",\n    events: []\n  };\n}\nexports.ABCIMessageLog = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.msgIndex !== 0) {\n      writer.uint32(8).uint32(message.msgIndex);\n    }\n    if (message.log !== \"\") {\n      writer.uint32(18).string(message.log);\n    }\n    var _iterator3 = _createForOfIteratorHelper(message.events),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var v = _step3.value;\n        exports.StringEvent.encode(v, writer.uint32(26).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseABCIMessageLog();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.msgIndex = reader.uint32();\n          break;\n        case 2:\n          message.log = reader.string();\n          break;\n        case 3:\n          message.events.push(exports.StringEvent.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      msgIndex: isSet(object.msgIndex) ? Number(object.msgIndex) : 0,\n      log: isSet(object.log) ? String(object.log) : \"\",\n      events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map(function (e) {\n        return exports.StringEvent.fromJSON(e);\n      }) : []\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.msgIndex !== undefined && (obj.msgIndex = Math.round(message.msgIndex));\n    message.log !== undefined && (obj.log = message.log);\n    if (message.events) {\n      obj.events = message.events.map(function (e) {\n        return e ? exports.StringEvent.toJSON(e) : undefined;\n      });\n    } else {\n      obj.events = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n    var message = createBaseABCIMessageLog();\n    message.msgIndex = (_a = object.msgIndex) !== null && _a !== void 0 ? _a : 0;\n    message.log = (_b = object.log) !== null && _b !== void 0 ? _b : \"\";\n    message.events = ((_c = object.events) === null || _c === void 0 ? void 0 : _c.map(function (e) {\n      return exports.StringEvent.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nfunction createBaseStringEvent() {\n  return {\n    type: \"\",\n    attributes: []\n  };\n}\nexports.StringEvent = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.type !== \"\") {\n      writer.uint32(10).string(message.type);\n    }\n    var _iterator4 = _createForOfIteratorHelper(message.attributes),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var v = _step4.value;\n        exports.Attribute.encode(v, writer.uint32(18).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseStringEvent();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n        case 2:\n          message.attributes.push(exports.Attribute.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      type: isSet(object.type) ? String(object.type) : \"\",\n      attributes: Array.isArray(object === null || object === void 0 ? void 0 : object.attributes) ? object.attributes.map(function (e) {\n        return exports.Attribute.fromJSON(e);\n      }) : []\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.type !== undefined && (obj.type = message.type);\n    if (message.attributes) {\n      obj.attributes = message.attributes.map(function (e) {\n        return e ? exports.Attribute.toJSON(e) : undefined;\n      });\n    } else {\n      obj.attributes = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = createBaseStringEvent();\n    message.type = (_a = object.type) !== null && _a !== void 0 ? _a : \"\";\n    message.attributes = ((_b = object.attributes) === null || _b === void 0 ? void 0 : _b.map(function (e) {\n      return exports.Attribute.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nfunction createBaseAttribute() {\n  return {\n    key: \"\",\n    value: \"\"\n  };\n}\nexports.Attribute = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseAttribute();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n        case 2:\n          message.value = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      key: isSet(object.key) ? String(object.key) : \"\",\n      value: isSet(object.value) ? String(object.value) : \"\"\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.value !== undefined && (obj.value = message.value);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = createBaseAttribute();\n    message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n    message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nfunction createBaseGasInfo() {\n  return {\n    gasWanted: long_1.default.UZERO,\n    gasUsed: long_1.default.UZERO\n  };\n}\nexports.GasInfo = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (!message.gasWanted.isZero()) {\n      writer.uint32(8).uint64(message.gasWanted);\n    }\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(16).uint64(message.gasUsed);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseGasInfo();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.gasWanted = reader.uint64();\n          break;\n        case 2:\n          message.gasUsed = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      gasWanted: isSet(object.gasWanted) ? long_1.default.fromValue(object.gasWanted) : long_1.default.UZERO,\n      gasUsed: isSet(object.gasUsed) ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || long_1.default.UZERO).toString());\n    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = createBaseGasInfo();\n    message.gasWanted = object.gasWanted !== undefined && object.gasWanted !== null ? long_1.default.fromValue(object.gasWanted) : long_1.default.UZERO;\n    message.gasUsed = object.gasUsed !== undefined && object.gasUsed !== null ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO;\n    return message;\n  }\n};\nfunction createBaseResult() {\n  return {\n    data: new Uint8Array(),\n    log: \"\",\n    events: []\n  };\n}\nexports.Result = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n    if (message.log !== \"\") {\n      writer.uint32(18).string(message.log);\n    }\n    var _iterator5 = _createForOfIteratorHelper(message.events),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var v = _step5.value;\n        types_1.Event.encode(v, writer.uint32(26).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseResult();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n        case 2:\n          message.log = reader.string();\n          break;\n        case 3:\n          message.events.push(types_1.Event.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),\n      log: isSet(object.log) ? String(object.log) : \"\",\n      events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map(function (e) {\n        return types_1.Event.fromJSON(e);\n      }) : []\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.log !== undefined && (obj.log = message.log);\n    if (message.events) {\n      obj.events = message.events.map(function (e) {\n        return e ? types_1.Event.toJSON(e) : undefined;\n      });\n    } else {\n      obj.events = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n    var message = createBaseResult();\n    message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.log = (_b = object.log) !== null && _b !== void 0 ? _b : \"\";\n    message.events = ((_c = object.events) === null || _c === void 0 ? void 0 : _c.map(function (e) {\n      return types_1.Event.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nfunction createBaseSimulationResponse() {\n  return {\n    gasInfo: undefined,\n    result: undefined\n  };\n}\nexports.SimulationResponse = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.gasInfo !== undefined) {\n      exports.GasInfo.encode(message.gasInfo, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.result !== undefined) {\n      exports.Result.encode(message.result, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseSimulationResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.gasInfo = exports.GasInfo.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.result = exports.Result.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      gasInfo: isSet(object.gasInfo) ? exports.GasInfo.fromJSON(object.gasInfo) : undefined,\n      result: isSet(object.result) ? exports.Result.fromJSON(object.result) : undefined\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.gasInfo !== undefined && (obj.gasInfo = message.gasInfo ? exports.GasInfo.toJSON(message.gasInfo) : undefined);\n    message.result !== undefined && (obj.result = message.result ? exports.Result.toJSON(message.result) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = createBaseSimulationResponse();\n    message.gasInfo = object.gasInfo !== undefined && object.gasInfo !== null ? exports.GasInfo.fromPartial(object.gasInfo) : undefined;\n    message.result = object.result !== undefined && object.result !== null ? exports.Result.fromPartial(object.result) : undefined;\n    return message;\n  }\n};\nfunction createBaseMsgData() {\n  return {\n    msgType: \"\",\n    data: new Uint8Array()\n  };\n}\nexports.MsgData = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.msgType !== \"\") {\n      writer.uint32(10).string(message.msgType);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgData();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.msgType = reader.string();\n          break;\n        case 2:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      msgType: isSet(object.msgType) ? String(object.msgType) : \"\",\n      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array()\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.msgType !== undefined && (obj.msgType = message.msgType);\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = createBaseMsgData();\n    message.msgType = (_a = object.msgType) !== null && _a !== void 0 ? _a : \"\";\n    message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n    return message;\n  }\n};\nfunction createBaseTxMsgData() {\n  return {\n    data: []\n  };\n}\nexports.TxMsgData = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    var _iterator6 = _createForOfIteratorHelper(message.data),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var v = _step6.value;\n        exports.MsgData.encode(v, writer.uint32(10).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseTxMsgData();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data.push(exports.MsgData.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      data: Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map(function (e) {\n        return exports.MsgData.fromJSON(e);\n      }) : []\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    if (message.data) {\n      obj.data = message.data.map(function (e) {\n        return e ? exports.MsgData.toJSON(e) : undefined;\n      });\n    } else {\n      obj.data = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n    var message = createBaseTxMsgData();\n    message.data = ((_a = object.data) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      return exports.MsgData.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nfunction createBaseSearchTxsResult() {\n  return {\n    totalCount: long_1.default.UZERO,\n    count: long_1.default.UZERO,\n    pageNumber: long_1.default.UZERO,\n    pageTotal: long_1.default.UZERO,\n    limit: long_1.default.UZERO,\n    txs: []\n  };\n}\nexports.SearchTxsResult = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (!message.totalCount.isZero()) {\n      writer.uint32(8).uint64(message.totalCount);\n    }\n    if (!message.count.isZero()) {\n      writer.uint32(16).uint64(message.count);\n    }\n    if (!message.pageNumber.isZero()) {\n      writer.uint32(24).uint64(message.pageNumber);\n    }\n    if (!message.pageTotal.isZero()) {\n      writer.uint32(32).uint64(message.pageTotal);\n    }\n    if (!message.limit.isZero()) {\n      writer.uint32(40).uint64(message.limit);\n    }\n    var _iterator7 = _createForOfIteratorHelper(message.txs),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var v = _step7.value;\n        exports.TxResponse.encode(v, writer.uint32(50).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseSearchTxsResult();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.totalCount = reader.uint64();\n          break;\n        case 2:\n          message.count = reader.uint64();\n          break;\n        case 3:\n          message.pageNumber = reader.uint64();\n          break;\n        case 4:\n          message.pageTotal = reader.uint64();\n          break;\n        case 5:\n          message.limit = reader.uint64();\n          break;\n        case 6:\n          message.txs.push(exports.TxResponse.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      totalCount: isSet(object.totalCount) ? long_1.default.fromValue(object.totalCount) : long_1.default.UZERO,\n      count: isSet(object.count) ? long_1.default.fromValue(object.count) : long_1.default.UZERO,\n      pageNumber: isSet(object.pageNumber) ? long_1.default.fromValue(object.pageNumber) : long_1.default.UZERO,\n      pageTotal: isSet(object.pageTotal) ? long_1.default.fromValue(object.pageTotal) : long_1.default.UZERO,\n      limit: isSet(object.limit) ? long_1.default.fromValue(object.limit) : long_1.default.UZERO,\n      txs: Array.isArray(object === null || object === void 0 ? void 0 : object.txs) ? object.txs.map(function (e) {\n        return exports.TxResponse.fromJSON(e);\n      }) : []\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.totalCount !== undefined && (obj.totalCount = (message.totalCount || long_1.default.UZERO).toString());\n    message.count !== undefined && (obj.count = (message.count || long_1.default.UZERO).toString());\n    message.pageNumber !== undefined && (obj.pageNumber = (message.pageNumber || long_1.default.UZERO).toString());\n    message.pageTotal !== undefined && (obj.pageTotal = (message.pageTotal || long_1.default.UZERO).toString());\n    message.limit !== undefined && (obj.limit = (message.limit || long_1.default.UZERO).toString());\n    if (message.txs) {\n      obj.txs = message.txs.map(function (e) {\n        return e ? exports.TxResponse.toJSON(e) : undefined;\n      });\n    } else {\n      obj.txs = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n    var message = createBaseSearchTxsResult();\n    message.totalCount = object.totalCount !== undefined && object.totalCount !== null ? long_1.default.fromValue(object.totalCount) : long_1.default.UZERO;\n    message.count = object.count !== undefined && object.count !== null ? long_1.default.fromValue(object.count) : long_1.default.UZERO;\n    message.pageNumber = object.pageNumber !== undefined && object.pageNumber !== null ? long_1.default.fromValue(object.pageNumber) : long_1.default.UZERO;\n    message.pageTotal = object.pageTotal !== undefined && object.pageTotal !== null ? long_1.default.fromValue(object.pageTotal) : long_1.default.UZERO;\n    message.limit = object.limit !== undefined && object.limit !== null ? long_1.default.fromValue(object.limit) : long_1.default.UZERO;\n    message.txs = ((_a = object.txs) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      return exports.TxResponse.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nvar globalThis = function () {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw \"Unable to locate global object\";\n}();\nfunction bytesFromBase64(b64) {\n  if (globalThis.Buffer) {\n    return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n  } else {\n    var bin = globalThis.atob(b64);\n    var arr = new Uint8Array(bin.length);\n    for (var i = 0; i < bin.length; ++i) {\n      arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n  }\n}\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    var bin = [];\n    arr.forEach(function (byte) {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\nfunction isSet(value) {\n  return value !== null && value !== undefined;\n}","map":null,"metadata":{},"sourceType":"script"}