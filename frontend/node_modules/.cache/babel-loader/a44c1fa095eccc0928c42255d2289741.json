{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgTimeoutResponse = exports.MsgTimeoutOnCloseResponse = exports.MsgTimeoutOnClose = exports.MsgTimeout = exports.MsgRecvPacketResponse = exports.MsgRecvPacket = exports.MsgChannelOpenTryResponse = exports.MsgChannelOpenTry = exports.MsgChannelOpenInitResponse = exports.MsgChannelOpenInit = exports.MsgChannelOpenConfirmResponse = exports.MsgChannelOpenConfirm = exports.MsgChannelOpenAckResponse = exports.MsgChannelOpenAck = exports.MsgChannelCloseInitResponse = exports.MsgChannelCloseInit = exports.MsgChannelCloseConfirmResponse = exports.MsgChannelCloseConfirm = exports.MsgAcknowledgementResponse = exports.MsgAcknowledgement = void 0;\nvar _channel = require(\"./channel\");\nvar _client = require(\"../../client/v1/client\");\nvar _helpers = require(\"../../../../helpers\");\nvar _m0 = _interopRequireWildcard(require(\"protobufjs/minimal\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction createBaseMsgChannelOpenInit() {\n  return {\n    portId: \"\",\n    channel: _channel.Channel.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgChannelOpenInit = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channel !== undefined) {\n      _channel.Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(26).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenInit();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channel = _channel.Channel.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId, _object$signer;\n    var message = createBaseMsgChannelOpenInit();\n    message.portId = (_object$portId = object.portId) !== null && _object$portId !== void 0 ? _object$portId : \"\";\n    message.channel = object.channel !== undefined && object.channel !== null ? _channel.Channel.fromPartial(object.channel) : undefined;\n    message.signer = (_object$signer = object.signer) !== null && _object$signer !== void 0 ? _object$signer : \"\";\n    return message;\n  }\n};\nexports.MsgChannelOpenInit = MsgChannelOpenInit;\nfunction createBaseMsgChannelOpenInitResponse() {\n  return {};\n}\nvar MsgChannelOpenInitResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenInitResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgChannelOpenInitResponse();\n    return message;\n  }\n};\nexports.MsgChannelOpenInitResponse = MsgChannelOpenInitResponse;\nfunction createBaseMsgChannelOpenTry() {\n  return {\n    portId: \"\",\n    previousChannelId: \"\",\n    channel: _channel.Channel.fromPartial({}),\n    counterpartyVersion: \"\",\n    proofInit: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgChannelOpenTry = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.previousChannelId !== \"\") {\n      writer.uint32(18).string(message.previousChannelId);\n    }\n    if (message.channel !== undefined) {\n      _channel.Channel.encode(message.channel, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.counterpartyVersion !== \"\") {\n      writer.uint32(34).string(message.counterpartyVersion);\n    }\n    if (message.proofInit.length !== 0) {\n      writer.uint32(42).bytes(message.proofInit);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(58).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenTry();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.previousChannelId = reader.string();\n          break;\n        case 3:\n          message.channel = _channel.Channel.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.counterpartyVersion = reader.string();\n          break;\n        case 5:\n          message.proofInit = reader.bytes();\n          break;\n        case 6:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId2, _object$previousChann, _object$counterpartyV, _object$proofInit, _object$signer2;\n    var message = createBaseMsgChannelOpenTry();\n    message.portId = (_object$portId2 = object.portId) !== null && _object$portId2 !== void 0 ? _object$portId2 : \"\";\n    message.previousChannelId = (_object$previousChann = object.previousChannelId) !== null && _object$previousChann !== void 0 ? _object$previousChann : \"\";\n    message.channel = object.channel !== undefined && object.channel !== null ? _channel.Channel.fromPartial(object.channel) : undefined;\n    message.counterpartyVersion = (_object$counterpartyV = object.counterpartyVersion) !== null && _object$counterpartyV !== void 0 ? _object$counterpartyV : \"\";\n    message.proofInit = (_object$proofInit = object.proofInit) !== null && _object$proofInit !== void 0 ? _object$proofInit : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_object$signer2 = object.signer) !== null && _object$signer2 !== void 0 ? _object$signer2 : \"\";\n    return message;\n  }\n};\nexports.MsgChannelOpenTry = MsgChannelOpenTry;\nfunction createBaseMsgChannelOpenTryResponse() {\n  return {};\n}\nvar MsgChannelOpenTryResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenTryResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgChannelOpenTryResponse();\n    return message;\n  }\n};\nexports.MsgChannelOpenTryResponse = MsgChannelOpenTryResponse;\nfunction createBaseMsgChannelOpenAck() {\n  return {\n    portId: \"\",\n    channelId: \"\",\n    counterpartyChannelId: \"\",\n    counterpartyVersion: \"\",\n    proofTry: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgChannelOpenAck = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.counterpartyChannelId !== \"\") {\n      writer.uint32(26).string(message.counterpartyChannelId);\n    }\n    if (message.counterpartyVersion !== \"\") {\n      writer.uint32(34).string(message.counterpartyVersion);\n    }\n    if (message.proofTry.length !== 0) {\n      writer.uint32(42).bytes(message.proofTry);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(58).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenAck();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.counterpartyChannelId = reader.string();\n          break;\n        case 4:\n          message.counterpartyVersion = reader.string();\n          break;\n        case 5:\n          message.proofTry = reader.bytes();\n          break;\n        case 6:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId3, _object$channelId, _object$counterpartyC, _object$counterpartyV2, _object$proofTry, _object$signer3;\n    var message = createBaseMsgChannelOpenAck();\n    message.portId = (_object$portId3 = object.portId) !== null && _object$portId3 !== void 0 ? _object$portId3 : \"\";\n    message.channelId = (_object$channelId = object.channelId) !== null && _object$channelId !== void 0 ? _object$channelId : \"\";\n    message.counterpartyChannelId = (_object$counterpartyC = object.counterpartyChannelId) !== null && _object$counterpartyC !== void 0 ? _object$counterpartyC : \"\";\n    message.counterpartyVersion = (_object$counterpartyV2 = object.counterpartyVersion) !== null && _object$counterpartyV2 !== void 0 ? _object$counterpartyV2 : \"\";\n    message.proofTry = (_object$proofTry = object.proofTry) !== null && _object$proofTry !== void 0 ? _object$proofTry : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_object$signer3 = object.signer) !== null && _object$signer3 !== void 0 ? _object$signer3 : \"\";\n    return message;\n  }\n};\nexports.MsgChannelOpenAck = MsgChannelOpenAck;\nfunction createBaseMsgChannelOpenAckResponse() {\n  return {};\n}\nvar MsgChannelOpenAckResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenAckResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgChannelOpenAckResponse();\n    return message;\n  }\n};\nexports.MsgChannelOpenAckResponse = MsgChannelOpenAckResponse;\nfunction createBaseMsgChannelOpenConfirm() {\n  return {\n    portId: \"\",\n    channelId: \"\",\n    proofAck: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgChannelOpenConfirm = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.proofAck.length !== 0) {\n      writer.uint32(26).bytes(message.proofAck);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenConfirm();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.proofAck = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId4, _object$channelId2, _object$proofAck, _object$signer4;\n    var message = createBaseMsgChannelOpenConfirm();\n    message.portId = (_object$portId4 = object.portId) !== null && _object$portId4 !== void 0 ? _object$portId4 : \"\";\n    message.channelId = (_object$channelId2 = object.channelId) !== null && _object$channelId2 !== void 0 ? _object$channelId2 : \"\";\n    message.proofAck = (_object$proofAck = object.proofAck) !== null && _object$proofAck !== void 0 ? _object$proofAck : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_object$signer4 = object.signer) !== null && _object$signer4 !== void 0 ? _object$signer4 : \"\";\n    return message;\n  }\n};\nexports.MsgChannelOpenConfirm = MsgChannelOpenConfirm;\nfunction createBaseMsgChannelOpenConfirmResponse() {\n  return {};\n}\nvar MsgChannelOpenConfirmResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelOpenConfirmResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgChannelOpenConfirmResponse();\n    return message;\n  }\n};\nexports.MsgChannelOpenConfirmResponse = MsgChannelOpenConfirmResponse;\nfunction createBaseMsgChannelCloseInit() {\n  return {\n    portId: \"\",\n    channelId: \"\",\n    signer: \"\"\n  };\n}\nvar MsgChannelCloseInit = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(26).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelCloseInit();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId5, _object$channelId3, _object$signer5;\n    var message = createBaseMsgChannelCloseInit();\n    message.portId = (_object$portId5 = object.portId) !== null && _object$portId5 !== void 0 ? _object$portId5 : \"\";\n    message.channelId = (_object$channelId3 = object.channelId) !== null && _object$channelId3 !== void 0 ? _object$channelId3 : \"\";\n    message.signer = (_object$signer5 = object.signer) !== null && _object$signer5 !== void 0 ? _object$signer5 : \"\";\n    return message;\n  }\n};\nexports.MsgChannelCloseInit = MsgChannelCloseInit;\nfunction createBaseMsgChannelCloseInitResponse() {\n  return {};\n}\nvar MsgChannelCloseInitResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelCloseInitResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgChannelCloseInitResponse();\n    return message;\n  }\n};\nexports.MsgChannelCloseInitResponse = MsgChannelCloseInitResponse;\nfunction createBaseMsgChannelCloseConfirm() {\n  return {\n    portId: \"\",\n    channelId: \"\",\n    proofInit: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgChannelCloseConfirm = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.proofInit.length !== 0) {\n      writer.uint32(26).bytes(message.proofInit);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelCloseConfirm();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.proofInit = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$portId6, _object$channelId4, _object$proofInit2, _object$signer6;\n    var message = createBaseMsgChannelCloseConfirm();\n    message.portId = (_object$portId6 = object.portId) !== null && _object$portId6 !== void 0 ? _object$portId6 : \"\";\n    message.channelId = (_object$channelId4 = object.channelId) !== null && _object$channelId4 !== void 0 ? _object$channelId4 : \"\";\n    message.proofInit = (_object$proofInit2 = object.proofInit) !== null && _object$proofInit2 !== void 0 ? _object$proofInit2 : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_object$signer6 = object.signer) !== null && _object$signer6 !== void 0 ? _object$signer6 : \"\";\n    return message;\n  }\n};\nexports.MsgChannelCloseConfirm = MsgChannelCloseConfirm;\nfunction createBaseMsgChannelCloseConfirmResponse() {\n  return {};\n}\nvar MsgChannelCloseConfirmResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgChannelCloseConfirmResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgChannelCloseConfirmResponse();\n    return message;\n  }\n};\nexports.MsgChannelCloseConfirmResponse = MsgChannelCloseConfirmResponse;\nfunction createBaseMsgRecvPacket() {\n  return {\n    packet: _channel.Packet.fromPartial({}),\n    proofCommitment: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgRecvPacket = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.packet !== undefined) {\n      _channel.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proofCommitment.length !== 0) {\n      writer.uint32(18).bytes(message.proofCommitment);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(34).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgRecvPacket();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = _channel.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proofCommitment = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$proofCommitme, _object$signer7;\n    var message = createBaseMsgRecvPacket();\n    message.packet = object.packet !== undefined && object.packet !== null ? _channel.Packet.fromPartial(object.packet) : undefined;\n    message.proofCommitment = (_object$proofCommitme = object.proofCommitment) !== null && _object$proofCommitme !== void 0 ? _object$proofCommitme : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_object$signer7 = object.signer) !== null && _object$signer7 !== void 0 ? _object$signer7 : \"\";\n    return message;\n  }\n};\nexports.MsgRecvPacket = MsgRecvPacket;\nfunction createBaseMsgRecvPacketResponse() {\n  return {};\n}\nvar MsgRecvPacketResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgRecvPacketResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgRecvPacketResponse();\n    return message;\n  }\n};\nexports.MsgRecvPacketResponse = MsgRecvPacketResponse;\nfunction createBaseMsgTimeout() {\n  return {\n    packet: _channel.Packet.fromPartial({}),\n    proofUnreceived: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    nextSequenceRecv: _helpers.Long.UZERO,\n    signer: \"\"\n  };\n}\nvar MsgTimeout = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.packet !== undefined) {\n      _channel.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proofUnreceived.length !== 0) {\n      writer.uint32(18).bytes(message.proofUnreceived);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    if (!message.nextSequenceRecv.isZero()) {\n      writer.uint32(32).uint64(message.nextSequenceRecv);\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgTimeout();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = _channel.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proofUnreceived = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.nextSequenceRecv = reader.uint64();\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$proofUnreceiv, _object$signer8;\n    var message = createBaseMsgTimeout();\n    message.packet = object.packet !== undefined && object.packet !== null ? _channel.Packet.fromPartial(object.packet) : undefined;\n    message.proofUnreceived = (_object$proofUnreceiv = object.proofUnreceived) !== null && _object$proofUnreceiv !== void 0 ? _object$proofUnreceiv : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? _helpers.Long.fromValue(object.nextSequenceRecv) : _helpers.Long.UZERO;\n    message.signer = (_object$signer8 = object.signer) !== null && _object$signer8 !== void 0 ? _object$signer8 : \"\";\n    return message;\n  }\n};\nexports.MsgTimeout = MsgTimeout;\nfunction createBaseMsgTimeoutResponse() {\n  return {};\n}\nvar MsgTimeoutResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgTimeoutResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgTimeoutResponse();\n    return message;\n  }\n};\nexports.MsgTimeoutResponse = MsgTimeoutResponse;\nfunction createBaseMsgTimeoutOnClose() {\n  return {\n    packet: _channel.Packet.fromPartial({}),\n    proofUnreceived: new Uint8Array(),\n    proofClose: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    nextSequenceRecv: _helpers.Long.UZERO,\n    signer: \"\"\n  };\n}\nvar MsgTimeoutOnClose = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.packet !== undefined) {\n      _channel.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proofUnreceived.length !== 0) {\n      writer.uint32(18).bytes(message.proofUnreceived);\n    }\n    if (message.proofClose.length !== 0) {\n      writer.uint32(26).bytes(message.proofClose);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (!message.nextSequenceRecv.isZero()) {\n      writer.uint32(40).uint64(message.nextSequenceRecv);\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(50).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgTimeoutOnClose();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = _channel.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proofUnreceived = reader.bytes();\n          break;\n        case 3:\n          message.proofClose = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.nextSequenceRecv = reader.uint64();\n          break;\n        case 6:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$proofUnreceiv2, _object$proofClose, _object$signer9;\n    var message = createBaseMsgTimeoutOnClose();\n    message.packet = object.packet !== undefined && object.packet !== null ? _channel.Packet.fromPartial(object.packet) : undefined;\n    message.proofUnreceived = (_object$proofUnreceiv2 = object.proofUnreceived) !== null && _object$proofUnreceiv2 !== void 0 ? _object$proofUnreceiv2 : new Uint8Array();\n    message.proofClose = (_object$proofClose = object.proofClose) !== null && _object$proofClose !== void 0 ? _object$proofClose : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? _helpers.Long.fromValue(object.nextSequenceRecv) : _helpers.Long.UZERO;\n    message.signer = (_object$signer9 = object.signer) !== null && _object$signer9 !== void 0 ? _object$signer9 : \"\";\n    return message;\n  }\n};\nexports.MsgTimeoutOnClose = MsgTimeoutOnClose;\nfunction createBaseMsgTimeoutOnCloseResponse() {\n  return {};\n}\nvar MsgTimeoutOnCloseResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgTimeoutOnCloseResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgTimeoutOnCloseResponse();\n    return message;\n  }\n};\nexports.MsgTimeoutOnCloseResponse = MsgTimeoutOnCloseResponse;\nfunction createBaseMsgAcknowledgement() {\n  return {\n    packet: _channel.Packet.fromPartial({}),\n    acknowledgement: new Uint8Array(),\n    proofAcked: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgAcknowledgement = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.packet !== undefined) {\n      _channel.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.acknowledgement.length !== 0) {\n      writer.uint32(18).bytes(message.acknowledgement);\n    }\n    if (message.proofAcked.length !== 0) {\n      writer.uint32(26).bytes(message.proofAcked);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgAcknowledgement();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = _channel.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.acknowledgement = reader.bytes();\n          break;\n        case 3:\n          message.proofAcked = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$acknowledgeme, _object$proofAcked, _object$signer10;\n    var message = createBaseMsgAcknowledgement();\n    message.packet = object.packet !== undefined && object.packet !== null ? _channel.Packet.fromPartial(object.packet) : undefined;\n    message.acknowledgement = (_object$acknowledgeme = object.acknowledgement) !== null && _object$acknowledgeme !== void 0 ? _object$acknowledgeme : new Uint8Array();\n    message.proofAcked = (_object$proofAcked = object.proofAcked) !== null && _object$proofAcked !== void 0 ? _object$proofAcked : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_object$signer10 = object.signer) !== null && _object$signer10 !== void 0 ? _object$signer10 : \"\";\n    return message;\n  }\n};\nexports.MsgAcknowledgement = MsgAcknowledgement;\nfunction createBaseMsgAcknowledgementResponse() {\n  return {};\n}\nvar MsgAcknowledgementResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgAcknowledgementResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgAcknowledgementResponse();\n    return message;\n  }\n};\nexports.MsgAcknowledgementResponse = MsgAcknowledgementResponse;","map":null,"metadata":{},"sourceType":"script"}