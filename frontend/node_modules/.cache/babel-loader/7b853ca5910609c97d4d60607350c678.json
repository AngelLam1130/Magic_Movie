{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AminoTypes = void 0;\nfunction isAminoConverter(converter) {\n  return typeof converter[1] !== \"string\";\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\nvar AminoTypes = /*#__PURE__*/function () {\n  function AminoTypes(types) {\n    _classCallCheck(this, AminoTypes);\n    this.register = types;\n  }\n  _createClass(AminoTypes, [{\n    key: \"toAmino\",\n    value: function toAmino(_ref) {\n      var typeUrl = _ref.typeUrl,\n        value = _ref.value;\n      var converter = this.register[typeUrl];\n      if (converter === \"not_supported_by_chain\") {\n        throw new Error(\"The message type '\".concat(typeUrl, \"' cannot be signed using the Amino JSON sign mode because this is not supported by chain.\"));\n      }\n      if (!converter) {\n        throw new Error(\"Type URL '\".concat(typeUrl, \"' does not exist in the Amino message type register. \") + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n      }\n      return {\n        type: converter.aminoType,\n        value: converter.toAmino(value)\n      };\n    }\n  }, {\n    key: \"fromAmino\",\n    value: function fromAmino(_ref2) {\n      var type = _ref2.type,\n        value = _ref2.value;\n      var matches = Object.entries(this.register).filter(isAminoConverter).filter(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          _typeUrl = _ref4[0],\n          aminoType = _ref4[1].aminoType;\n        return aminoType === type;\n      });\n      switch (matches.length) {\n        case 0:\n          {\n            throw new Error(\"Amino type identifier '\".concat(type, \"' does not exist in the Amino message type register. \") + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n          }\n        case 1:\n          {\n            var _matches$ = _slicedToArray(matches[0], 2),\n              typeUrl = _matches$[0],\n              converter = _matches$[1];\n            return {\n              typeUrl: typeUrl,\n              value: converter.fromAmino(value)\n            };\n          }\n        default:\n          throw new Error(\"Multiple types are registered with Amino type identifier '\".concat(type, \"': '\") + matches.map(function (_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 2),\n              key = _ref6[0],\n              _value = _ref6[1];\n            return key;\n          }).sort().join(\"', '\") + \"'. Thus fromAmino cannot be performed.\");\n      }\n    }\n  }]);\n  return AminoTypes;\n}();\nexports.AminoTypes = AminoTypes;","map":null,"metadata":{},"sourceType":"script"}