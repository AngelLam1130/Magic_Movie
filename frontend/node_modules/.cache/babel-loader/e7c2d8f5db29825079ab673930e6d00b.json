{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateFee = exports.GasPrice = void 0;\nvar math_1 = require(\"@cosmjs/math\");\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\n/**\n * Denom checker for the Cosmos SDK 0.42 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n *\n * This is like a regexp but with helpful error messages.\n */\nfunction checkDenom(denom) {\n  if (denom.length < 3 || denom.length > 128) {\n    throw new Error(\"Denom must be between 3 and 128 characters\");\n  }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n */\nvar GasPrice = /*#__PURE__*/function () {\n  function GasPrice(amount, denom) {\n    _classCallCheck(this, GasPrice);\n    this.amount = amount;\n    this.denom = denom;\n  }\n  /**\n   * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n   *\n   * The denom must match the Cosmos SDK 0.42 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n   * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n   *\n   * Separators are not yet supported.\n   */\n  _createClass(GasPrice, [{\n    key: \"toString\",\n    /**\n     * Returns a string representation of this gas price, e.g. \"0.025uatom\".\n     * This can be used as an input to `GasPrice.fromString`.\n     */\n    value: function toString() {\n      return this.amount.toString() + this.denom;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(gasPrice) {\n      // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n      var matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);\n      if (!matchResult) {\n        throw new Error(\"Invalid gas price string\");\n      }\n      var _matchResult = _slicedToArray(matchResult, 3),\n        _ = _matchResult[0],\n        amount = _matchResult[1],\n        denom = _matchResult[2];\n      checkDenom(denom);\n      var fractionalDigits = 18;\n      var decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n      return new GasPrice(decimalAmount, denom);\n    }\n  }]);\n  return GasPrice;\n}();\nexports.GasPrice = GasPrice;\nfunction calculateFee(gasLimit, gasPrice) {\n  var processedGasPrice = typeof gasPrice === \"string\" ? GasPrice.fromString(gasPrice) : gasPrice;\n  var denom = processedGasPrice.denom,\n    gasPriceAmount = processedGasPrice.amount; // Note: Amount can exceed the safe integer range (https://github.com/cosmos/cosmjs/issues/1134),\n  // which we handle by converting from Decimal to string without going through number.\n  var amount = gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).ceil().toString();\n  return {\n    amount: (0, proto_signing_1.coins)(amount, denom),\n    gas: gasLimit.toString()\n  };\n}\nexports.calculateFee = calculateFee;","map":null,"metadata":{},"sourceType":"script"}