{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Version2ScheduledTokenRelease = exports.Version2Params = exports.Version2Minter = exports.ScheduledTokenRelease = exports.Params = exports.Minter = void 0;\nvar _helpers = require(\"../../../../helpers\");\nvar _m0 = _interopRequireWildcard(require(\"protobufjs/minimal\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction createBaseMinter() {\n  return {\n    startDate: \"\",\n    endDate: \"\",\n    denom: \"\",\n    totalMintAmount: _helpers.Long.UZERO,\n    remainingMintAmount: _helpers.Long.UZERO,\n    lastMintAmount: _helpers.Long.UZERO,\n    lastMintDate: \"\",\n    lastMintHeight: _helpers.Long.UZERO\n  };\n}\nvar Minter = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.startDate !== \"\") {\n      writer.uint32(10).string(message.startDate);\n    }\n    if (message.endDate !== \"\") {\n      writer.uint32(18).string(message.endDate);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(26).string(message.denom);\n    }\n    if (!message.totalMintAmount.isZero()) {\n      writer.uint32(32).uint64(message.totalMintAmount);\n    }\n    if (!message.remainingMintAmount.isZero()) {\n      writer.uint32(40).uint64(message.remainingMintAmount);\n    }\n    if (!message.lastMintAmount.isZero()) {\n      writer.uint32(48).uint64(message.lastMintAmount);\n    }\n    if (message.lastMintDate !== \"\") {\n      writer.uint32(58).string(message.lastMintDate);\n    }\n    if (!message.lastMintHeight.isZero()) {\n      writer.uint32(64).uint64(message.lastMintHeight);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMinter();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.startDate = reader.string();\n          break;\n        case 2:\n          message.endDate = reader.string();\n          break;\n        case 3:\n          message.denom = reader.string();\n          break;\n        case 4:\n          message.totalMintAmount = reader.uint64();\n          break;\n        case 5:\n          message.remainingMintAmount = reader.uint64();\n          break;\n        case 6:\n          message.lastMintAmount = reader.uint64();\n          break;\n        case 7:\n          message.lastMintDate = reader.string();\n          break;\n        case 8:\n          message.lastMintHeight = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$startDate, _object$endDate, _object$denom, _object$lastMintDate;\n    var message = createBaseMinter();\n    message.startDate = (_object$startDate = object.startDate) !== null && _object$startDate !== void 0 ? _object$startDate : \"\";\n    message.endDate = (_object$endDate = object.endDate) !== null && _object$endDate !== void 0 ? _object$endDate : \"\";\n    message.denom = (_object$denom = object.denom) !== null && _object$denom !== void 0 ? _object$denom : \"\";\n    message.totalMintAmount = object.totalMintAmount !== undefined && object.totalMintAmount !== null ? _helpers.Long.fromValue(object.totalMintAmount) : _helpers.Long.UZERO;\n    message.remainingMintAmount = object.remainingMintAmount !== undefined && object.remainingMintAmount !== null ? _helpers.Long.fromValue(object.remainingMintAmount) : _helpers.Long.UZERO;\n    message.lastMintAmount = object.lastMintAmount !== undefined && object.lastMintAmount !== null ? _helpers.Long.fromValue(object.lastMintAmount) : _helpers.Long.UZERO;\n    message.lastMintDate = (_object$lastMintDate = object.lastMintDate) !== null && _object$lastMintDate !== void 0 ? _object$lastMintDate : \"\";\n    message.lastMintHeight = object.lastMintHeight !== undefined && object.lastMintHeight !== null ? _helpers.Long.fromValue(object.lastMintHeight) : _helpers.Long.UZERO;\n    return message;\n  }\n};\nexports.Minter = Minter;\nfunction createBaseScheduledTokenRelease() {\n  return {\n    startDate: \"\",\n    endDate: \"\",\n    tokenReleaseAmount: _helpers.Long.UZERO\n  };\n}\nvar ScheduledTokenRelease = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.startDate !== \"\") {\n      writer.uint32(10).string(message.startDate);\n    }\n    if (message.endDate !== \"\") {\n      writer.uint32(18).string(message.endDate);\n    }\n    if (!message.tokenReleaseAmount.isZero()) {\n      writer.uint32(24).uint64(message.tokenReleaseAmount);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseScheduledTokenRelease();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.startDate = reader.string();\n          break;\n        case 2:\n          message.endDate = reader.string();\n          break;\n        case 3:\n          message.tokenReleaseAmount = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$startDate2, _object$endDate2;\n    var message = createBaseScheduledTokenRelease();\n    message.startDate = (_object$startDate2 = object.startDate) !== null && _object$startDate2 !== void 0 ? _object$startDate2 : \"\";\n    message.endDate = (_object$endDate2 = object.endDate) !== null && _object$endDate2 !== void 0 ? _object$endDate2 : \"\";\n    message.tokenReleaseAmount = object.tokenReleaseAmount !== undefined && object.tokenReleaseAmount !== null ? _helpers.Long.fromValue(object.tokenReleaseAmount) : _helpers.Long.UZERO;\n    return message;\n  }\n};\nexports.ScheduledTokenRelease = ScheduledTokenRelease;\nfunction createBaseParams() {\n  return {\n    mintDenom: \"\",\n    tokenReleaseSchedule: []\n  };\n}\nvar Params = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.mintDenom !== \"\") {\n      writer.uint32(10).string(message.mintDenom);\n    }\n    var _iterator = _createForOfIteratorHelper(message.tokenReleaseSchedule),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        ScheduledTokenRelease.encode(v, writer.uint32(18).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseParams();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.mintDenom = reader.string();\n          break;\n        case 2:\n          message.tokenReleaseSchedule.push(ScheduledTokenRelease.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$mintDenom, _object$tokenReleaseS;\n    var message = createBaseParams();\n    message.mintDenom = (_object$mintDenom = object.mintDenom) !== null && _object$mintDenom !== void 0 ? _object$mintDenom : \"\";\n    message.tokenReleaseSchedule = ((_object$tokenReleaseS = object.tokenReleaseSchedule) === null || _object$tokenReleaseS === void 0 ? void 0 : _object$tokenReleaseS.map(function (e) {\n      return ScheduledTokenRelease.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nexports.Params = Params;\nfunction createBaseVersion2Minter() {\n  return {\n    lastMintAmount: \"\",\n    lastMintDate: \"\",\n    lastMintHeight: _helpers.Long.ZERO,\n    denom: \"\"\n  };\n}\nvar Version2Minter = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.lastMintAmount !== \"\") {\n      writer.uint32(10).string(message.lastMintAmount);\n    }\n    if (message.lastMintDate !== \"\") {\n      writer.uint32(18).string(message.lastMintDate);\n    }\n    if (!message.lastMintHeight.isZero()) {\n      writer.uint32(24).int64(message.lastMintHeight);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(34).string(message.denom);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseVersion2Minter();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.lastMintAmount = reader.string();\n          break;\n        case 2:\n          message.lastMintDate = reader.string();\n          break;\n        case 3:\n          message.lastMintHeight = reader.int64();\n          break;\n        case 4:\n          message.denom = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$lastMintAmoun, _object$lastMintDate2, _object$denom2;\n    var message = createBaseVersion2Minter();\n    message.lastMintAmount = (_object$lastMintAmoun = object.lastMintAmount) !== null && _object$lastMintAmoun !== void 0 ? _object$lastMintAmoun : \"\";\n    message.lastMintDate = (_object$lastMintDate2 = object.lastMintDate) !== null && _object$lastMintDate2 !== void 0 ? _object$lastMintDate2 : \"\";\n    message.lastMintHeight = object.lastMintHeight !== undefined && object.lastMintHeight !== null ? _helpers.Long.fromValue(object.lastMintHeight) : _helpers.Long.ZERO;\n    message.denom = (_object$denom2 = object.denom) !== null && _object$denom2 !== void 0 ? _object$denom2 : \"\";\n    return message;\n  }\n};\nexports.Version2Minter = Version2Minter;\nfunction createBaseVersion2ScheduledTokenRelease() {\n  return {\n    date: \"\",\n    tokenReleaseAmount: _helpers.Long.ZERO\n  };\n}\nvar Version2ScheduledTokenRelease = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.date !== \"\") {\n      writer.uint32(10).string(message.date);\n    }\n    if (!message.tokenReleaseAmount.isZero()) {\n      writer.uint32(16).int64(message.tokenReleaseAmount);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseVersion2ScheduledTokenRelease();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.date = reader.string();\n          break;\n        case 2:\n          message.tokenReleaseAmount = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$date;\n    var message = createBaseVersion2ScheduledTokenRelease();\n    message.date = (_object$date = object.date) !== null && _object$date !== void 0 ? _object$date : \"\";\n    message.tokenReleaseAmount = object.tokenReleaseAmount !== undefined && object.tokenReleaseAmount !== null ? _helpers.Long.fromValue(object.tokenReleaseAmount) : _helpers.Long.ZERO;\n    return message;\n  }\n};\nexports.Version2ScheduledTokenRelease = Version2ScheduledTokenRelease;\nfunction createBaseVersion2Params() {\n  return {\n    mintDenom: \"\",\n    tokenReleaseSchedule: []\n  };\n}\nvar Version2Params = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.mintDenom !== \"\") {\n      writer.uint32(10).string(message.mintDenom);\n    }\n    var _iterator2 = _createForOfIteratorHelper(message.tokenReleaseSchedule),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var v = _step2.value;\n        Version2ScheduledTokenRelease.encode(v, writer.uint32(18).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseVersion2Params();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.mintDenom = reader.string();\n          break;\n        case 2:\n          message.tokenReleaseSchedule.push(Version2ScheduledTokenRelease.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$mintDenom2, _object$tokenReleaseS2;\n    var message = createBaseVersion2Params();\n    message.mintDenom = (_object$mintDenom2 = object.mintDenom) !== null && _object$mintDenom2 !== void 0 ? _object$mintDenom2 : \"\";\n    message.tokenReleaseSchedule = ((_object$tokenReleaseS2 = object.tokenReleaseSchedule) === null || _object$tokenReleaseS2 === void 0 ? void 0 : _object$tokenReleaseS2.map(function (e) {\n      return Version2ScheduledTokenRelease.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nexports.Version2Params = Version2Params;","map":null,"metadata":{},"sourceType":"script"}