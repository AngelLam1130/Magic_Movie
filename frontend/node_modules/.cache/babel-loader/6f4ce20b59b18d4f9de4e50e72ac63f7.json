{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRpcQueryExtension = exports.QueryClientImpl = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _m0 = _interopRequireWildcard(require(\"protobufjs/minimal\"));\nvar _stargate = require(\"@cosmjs/stargate\");\nvar _query = require(\"./query\");\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nvar QueryClientImpl = /*#__PURE__*/function () {\n  function QueryClientImpl(rpc) {\n    (0, _classCallCheck2[\"default\"])(this, QueryClientImpl);\n    (0, _defineProperty2[\"default\"])(this, \"rpc\", void 0);\n    this.rpc = rpc;\n    this.channel = this.channel.bind(this);\n    this.channels = this.channels.bind(this);\n    this.connectionChannels = this.connectionChannels.bind(this);\n    this.channelClientState = this.channelClientState.bind(this);\n    this.channelConsensusState = this.channelConsensusState.bind(this);\n    this.packetCommitment = this.packetCommitment.bind(this);\n    this.packetCommitments = this.packetCommitments.bind(this);\n    this.packetReceipt = this.packetReceipt.bind(this);\n    this.packetAcknowledgement = this.packetAcknowledgement.bind(this);\n    this.packetAcknowledgements = this.packetAcknowledgements.bind(this);\n    this.unreceivedPackets = this.unreceivedPackets.bind(this);\n    this.unreceivedAcks = this.unreceivedAcks.bind(this);\n    this.nextSequenceReceive = this.nextSequenceReceive.bind(this);\n  }\n  (0, _createClass2[\"default\"])(QueryClientImpl, [{\n    key: \"channel\",\n    value: function channel(request) {\n      var data = _query.QueryChannelRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"Channel\", data);\n      return promise.then(function (data) {\n        return _query.QueryChannelResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"channels\",\n    value: function channels() {\n      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        pagination: undefined\n      };\n      var data = _query.QueryChannelsRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"Channels\", data);\n      return promise.then(function (data) {\n        return _query.QueryChannelsResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"connectionChannels\",\n    value: function connectionChannels(request) {\n      var data = _query.QueryConnectionChannelsRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ConnectionChannels\", data);\n      return promise.then(function (data) {\n        return _query.QueryConnectionChannelsResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"channelClientState\",\n    value: function channelClientState(request) {\n      var data = _query.QueryChannelClientStateRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ChannelClientState\", data);\n      return promise.then(function (data) {\n        return _query.QueryChannelClientStateResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"channelConsensusState\",\n    value: function channelConsensusState(request) {\n      var data = _query.QueryChannelConsensusStateRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ChannelConsensusState\", data);\n      return promise.then(function (data) {\n        return _query.QueryChannelConsensusStateResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"packetCommitment\",\n    value: function packetCommitment(request) {\n      var data = _query.QueryPacketCommitmentRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketCommitment\", data);\n      return promise.then(function (data) {\n        return _query.QueryPacketCommitmentResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"packetCommitments\",\n    value: function packetCommitments(request) {\n      var data = _query.QueryPacketCommitmentsRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketCommitments\", data);\n      return promise.then(function (data) {\n        return _query.QueryPacketCommitmentsResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"packetReceipt\",\n    value: function packetReceipt(request) {\n      var data = _query.QueryPacketReceiptRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketReceipt\", data);\n      return promise.then(function (data) {\n        return _query.QueryPacketReceiptResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"packetAcknowledgement\",\n    value: function packetAcknowledgement(request) {\n      var data = _query.QueryPacketAcknowledgementRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketAcknowledgement\", data);\n      return promise.then(function (data) {\n        return _query.QueryPacketAcknowledgementResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"packetAcknowledgements\",\n    value: function packetAcknowledgements(request) {\n      var data = _query.QueryPacketAcknowledgementsRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketAcknowledgements\", data);\n      return promise.then(function (data) {\n        return _query.QueryPacketAcknowledgementsResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"unreceivedPackets\",\n    value: function unreceivedPackets(request) {\n      var data = _query.QueryUnreceivedPacketsRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"UnreceivedPackets\", data);\n      return promise.then(function (data) {\n        return _query.QueryUnreceivedPacketsResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"unreceivedAcks\",\n    value: function unreceivedAcks(request) {\n      var data = _query.QueryUnreceivedAcksRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"UnreceivedAcks\", data);\n      return promise.then(function (data) {\n        return _query.QueryUnreceivedAcksResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }, {\n    key: \"nextSequenceReceive\",\n    value: function nextSequenceReceive(request) {\n      var data = _query.QueryNextSequenceReceiveRequest.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"NextSequenceReceive\", data);\n      return promise.then(function (data) {\n        return _query.QueryNextSequenceReceiveResponse.decode(new _m0.Reader(data));\n      });\n    }\n  }]);\n  return QueryClientImpl;\n}();\nexports.QueryClientImpl = QueryClientImpl;\nvar createRpcQueryExtension = function createRpcQueryExtension(base) {\n  var rpc = (0, _stargate.createProtobufRpcClient)(base);\n  var queryService = new QueryClientImpl(rpc);\n  return {\n    channel: function channel(request) {\n      return queryService.channel(request);\n    },\n    channels: function channels(request) {\n      return queryService.channels(request);\n    },\n    connectionChannels: function connectionChannels(request) {\n      return queryService.connectionChannels(request);\n    },\n    channelClientState: function channelClientState(request) {\n      return queryService.channelClientState(request);\n    },\n    channelConsensusState: function channelConsensusState(request) {\n      return queryService.channelConsensusState(request);\n    },\n    packetCommitment: function packetCommitment(request) {\n      return queryService.packetCommitment(request);\n    },\n    packetCommitments: function packetCommitments(request) {\n      return queryService.packetCommitments(request);\n    },\n    packetReceipt: function packetReceipt(request) {\n      return queryService.packetReceipt(request);\n    },\n    packetAcknowledgement: function packetAcknowledgement(request) {\n      return queryService.packetAcknowledgement(request);\n    },\n    packetAcknowledgements: function packetAcknowledgements(request) {\n      return queryService.packetAcknowledgements(request);\n    },\n    unreceivedPackets: function unreceivedPackets(request) {\n      return queryService.unreceivedPackets(request);\n    },\n    unreceivedAcks: function unreceivedAcks(request) {\n      return queryService.unreceivedAcks(request);\n    },\n    nextSequenceReceive: function nextSequenceReceive(request) {\n      return queryService.nextSequenceReceive(request);\n    }\n  };\n};\nexports.createRpcQueryExtension = createRpcQueryExtension;","map":null,"metadata":{},"sourceType":"script"}