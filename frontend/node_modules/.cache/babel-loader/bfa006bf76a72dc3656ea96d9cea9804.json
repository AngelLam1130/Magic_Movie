{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AminoTypes = void 0;\nfunction isAminoConverter(converter) {\n  return typeof converter[1] !== \"string\";\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\nclass AminoTypes {\n  constructor(types) {\n    this.register = types;\n  }\n  toAmino({\n    typeUrl,\n    value\n  }) {\n    const converter = this.register[typeUrl];\n    if (converter === \"not_supported_by_chain\") {\n      throw new Error(`The message type '${typeUrl}' cannot be signed using the Amino JSON sign mode because this is not supported by chain.`);\n    }\n    if (!converter) {\n      throw new Error(`Type URL '${typeUrl}' does not exist in the Amino message type register. ` + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n    }\n    return {\n      type: converter.aminoType,\n      value: converter.toAmino(value)\n    };\n  }\n  fromAmino({\n    type,\n    value\n  }) {\n    const matches = Object.entries(this.register).filter(isAminoConverter).filter(([_typeUrl, {\n      aminoType\n    }]) => aminoType === type);\n    switch (matches.length) {\n      case 0:\n        {\n          throw new Error(`Amino type identifier '${type}' does not exist in the Amino message type register. ` + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n        }\n      case 1:\n        {\n          const [typeUrl, converter] = matches[0];\n          return {\n            typeUrl: typeUrl,\n            value: converter.fromAmino(value)\n          };\n        }\n      default:\n        throw new Error(`Multiple types are registered with Amino type identifier '${type}': '` + matches.map(([key, _value]) => key).sort().join(\"', '\") + \"'. Thus fromAmino cannot be performed.\");\n    }\n  }\n}\nexports.AminoTypes = AminoTypes;","map":{"version":3,"names":["isAminoConverter","converter","AminoTypes","constructor","types","register","toAmino","typeUrl","value","Error","type","aminoType","fromAmino","matches","Object","entries","filter","_typeUrl","length","map","key","_value","sort","join","exports"],"sources":["../src/aminotypes.ts"],"sourcesContent":[null],"mappings":";;;;;;AAaA,SAASA,gBAAgBA,CACvBC,SAA8D;EAE9D,OAAO,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ;AACzC;AAEA;;;;AAIA,MAAaC,UAAU;EAOrBC,YAAmBC,KAAsB;IACvC,IAAI,CAACC,QAAQ,GAAGD,KAAK;EACvB;EAEOE,OAAOA,CAAC;IAAEC,OAAO;IAAEC;EAAK,CAAgB;IAC7C,MAAMP,SAAS,GAAG,IAAI,CAACI,QAAQ,CAACE,OAAO,CAAC;IACxC,IAAIN,SAAS,KAAK,wBAAwB,EAAE;MAC1C,MAAM,IAAIQ,KAAK,CACb,qBAAqBF,OAAO,2FAA2F,CACxH;;IAEH,IAAI,CAACN,SAAS,EAAE;MACd,MAAM,IAAIQ,KAAK,CACb,aAAaF,OAAO,uDAAuD,GACzE,+GAA+G,GAC/G,gIAAgI,CACnI;;IAEH,OAAO;MACLG,IAAI,EAAET,SAAS,CAACU,SAAS;MACzBH,KAAK,EAAEP,SAAS,CAACK,OAAO,CAACE,KAAK;KAC/B;EACH;EAEOI,SAASA,CAAC;IAAEF,IAAI;IAAEF;EAAK,CAAY;IACxC,MAAMK,OAAO,GAAGC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACV,QAAQ,CAAC,CAC1CW,MAAM,CAAChB,gBAAgB,CAAC,CACxBgB,MAAM,CAAC,CAAC,CAACC,QAAQ,EAAE;MAAEN;IAAS,CAAE,CAAC,KAAKA,SAAS,KAAKD,IAAI,CAAC;IAE5D,QAAQG,OAAO,CAACK,MAAM;MACpB,KAAK,CAAC;QAAE;UACN,MAAM,IAAIT,KAAK,CACb,0BAA0BC,IAAI,uDAAuD,GACnF,+GAA+G,GAC/G,gIAAgI,CACnI;;MAEH,KAAK,CAAC;QAAE;UACN,MAAM,CAACH,OAAO,EAAEN,SAAS,CAAC,GAAGY,OAAO,CAAC,CAAC,CAAC;UACvC,OAAO;YACLN,OAAO,EAAEA,OAAO;YAChBC,KAAK,EAAEP,SAAS,CAACW,SAAS,CAACJ,KAAK;WACjC;;MAEH;QACE,MAAM,IAAIC,KAAK,CACb,6DAA6DC,IAAI,MAAM,GACrEG,OAAO,CACJM,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,MAAM,CAAC,KAAKD,GAAG,CAAC,CAC3BE,IAAI,EAAE,CACNC,IAAI,CAAC,MAAM,CAAC,GACf,wCAAwC,CAC3C;;EAEP;;AA7DFC,OAAA,CAAAtB,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script"}