{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1HdWallet = exports.extractKdfConfiguration = void 0;\nvar crypto_1 = require(\"@cosmjs/crypto\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar addresses_1 = require(\"./addresses\");\nvar paths_1 = require(\"./paths\");\nvar signature_1 = require(\"./signature\");\nvar signdoc_1 = require(\"./signdoc\");\nvar wallet_1 = require(\"./wallet\");\nvar serializationTypeV1 = \"secp256k1wallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.\n */\nvar basicPasswordHashingOptions = {\n  algorithm: \"argon2id\",\n  params: {\n    outputLength: 32,\n    opsLimit: 24,\n    memLimitKib: 12 * 1024\n  }\n};\nfunction isDerivationJson(thing) {\n  if (!(0, utils_1.isNonNullObject)(thing)) return false;\n  if (typeof thing.hdPath !== \"string\") return false;\n  if (typeof thing.prefix !== \"string\") return false;\n  return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n  return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n  var root = JSON.parse(serialization);\n  if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n  switch (root.type) {\n    case serializationTypeV1:\n      return extractKdfConfigurationV1(root);\n    default:\n      throw new Error(\"Unsupported serialization type\");\n  }\n}\nexports.extractKdfConfiguration = extractKdfConfiguration;\nvar defaultOptions = {\n  bip39Password: \"\",\n  hdPaths: [(0, paths_1.makeCosmoshubPath)(0)],\n  prefix: \"cosmos\"\n};\nvar Secp256k1HdWallet = /*#__PURE__*/function (_getAccounts, _signAmino, _serialize, _serializeWithEncryptionKey, _getKeyPair, _getAccountsWithPrivkeys, _fromMnemonic, _generate, _deserialize, _deserializeWithEncryptionKey, _deserializeTypeV) {\n  function Secp256k1HdWallet(mnemonic, options) {\n    _classCallCheck(this, Secp256k1HdWallet);\n    var _a, _b;\n    var hdPaths = (_a = options.hdPaths) !== null && _a !== void 0 ? _a : defaultOptions.hdPaths;\n    var prefix = (_b = options.prefix) !== null && _b !== void 0 ? _b : defaultOptions.prefix;\n    this.secret = mnemonic;\n    this.seed = options.seed;\n    this.accounts = hdPaths.map(function (hdPath) {\n      return {\n        hdPath: hdPath,\n        prefix: prefix\n      };\n    });\n  }\n  /**\n   * Restores a wallet from the given BIP39 mnemonic.\n   *\n   * @param mnemonic Any valid English mnemonic.\n   * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n   */\n  _createClass(Secp256k1HdWallet, [{\n    key: \"getAccounts\",\n    value: function getAccounts() {\n      return (_getAccounts = _getAccounts || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var accountsWithPrivkeys;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getAccountsWithPrivkeys();\n            case 2:\n              accountsWithPrivkeys = _context.sent;\n              return _context.abrupt(\"return\", accountsWithPrivkeys.map(function (_ref) {\n                var algo = _ref.algo,\n                  pubkey = _ref.pubkey,\n                  address = _ref.address;\n                return {\n                  algo: algo,\n                  pubkey: pubkey,\n                  address: address\n                };\n              }));\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"signAmino\",\n    value: function signAmino(_x, _x2) {\n      return (_signAmino = _signAmino || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(signerAddress, signDoc) {\n        var accounts, account, privkey, pubkey, message, signature, signatureBytes;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getAccountsWithPrivkeys();\n            case 2:\n              accounts = _context2.sent;\n              account = accounts.find(function (_ref2) {\n                var address = _ref2.address;\n                return address === signerAddress;\n              });\n              if (!(account === undefined)) {\n                _context2.next = 6;\n                break;\n              }\n              throw new Error(\"Address \".concat(signerAddress, \" not found in wallet\"));\n            case 6:\n              privkey = account.privkey, pubkey = account.pubkey;\n              message = (0, crypto_1.sha256)((0, signdoc_1.serializeSignDoc)(signDoc));\n              _context2.next = 10;\n              return crypto_1.Secp256k1.createSignature(message, privkey);\n            case 10:\n              signature = _context2.sent;\n              signatureBytes = new Uint8Array([].concat(_toConsumableArray(signature.r(32)), _toConsumableArray(signature.s(32))));\n              return _context2.abrupt(\"return\", {\n                signed: signDoc,\n                signature: (0, signature_1.encodeSecp256k1Signature)(pubkey, signatureBytes)\n              });\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize(_x3) {\n      return (_serialize = _serialize || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(password) {\n        var kdfConfiguration, encryptionKey;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              kdfConfiguration = basicPasswordHashingOptions;\n              _context3.next = 3;\n              return (0, wallet_1.executeKdf)(password, kdfConfiguration);\n            case 3:\n              encryptionKey = _context3.sent;\n              return _context3.abrupt(\"return\", this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration));\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n     * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n     * is not the case, the wallet cannot be restored with the original password.\n     */\n  }, {\n    key: \"serializeWithEncryptionKey\",\n    value: function serializeWithEncryptionKey(_x4, _x5) {\n      return (_serializeWithEncryptionKey = _serializeWithEncryptionKey || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(encryptionKey, kdfConfiguration) {\n        var dataToEncrypt, dataToEncryptRaw, encryptionConfiguration, encryptedData, out;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              dataToEncrypt = {\n                mnemonic: this.mnemonic,\n                accounts: this.accounts.map(function (_ref3) {\n                  var hdPath = _ref3.hdPath,\n                    prefix = _ref3.prefix;\n                  return {\n                    hdPath: (0, crypto_1.pathToString)(hdPath),\n                    prefix: prefix\n                  };\n                })\n              };\n              dataToEncryptRaw = (0, encoding_1.toUtf8)(JSON.stringify(dataToEncrypt));\n              encryptionConfiguration = {\n                algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf\n              };\n              _context4.next = 5;\n              return (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n            case 5:\n              encryptedData = _context4.sent;\n              out = {\n                type: serializationTypeV1,\n                kdf: kdfConfiguration,\n                encryption: encryptionConfiguration,\n                data: (0, encoding_1.toBase64)(encryptedData)\n              };\n              return _context4.abrupt(\"return\", JSON.stringify(out));\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getKeyPair\",\n    value: function getKeyPair(_x6) {\n      return (_getKeyPair = _getKeyPair || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(hdPath) {\n        var _crypto_1$Slip10$deri, privkey, _yield$crypto_1$Secp, pubkey;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _crypto_1$Slip10$deri = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, this.seed, hdPath), privkey = _crypto_1$Slip10$deri.privkey;\n              _context5.next = 3;\n              return crypto_1.Secp256k1.makeKeypair(privkey);\n            case 3:\n              _yield$crypto_1$Secp = _context5.sent;\n              pubkey = _yield$crypto_1$Secp.pubkey;\n              return _context5.abrupt(\"return\", {\n                privkey: privkey,\n                pubkey: crypto_1.Secp256k1.compressPubkey(pubkey)\n              });\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getAccountsWithPrivkeys\",\n    value: function getAccountsWithPrivkeys() {\n      return (_getAccountsWithPrivkeys = _getAccountsWithPrivkeys || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this = this,\n          _ref5;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", Promise.all(this.accounts.map(function (_x7) {\n                return (_ref5 = _ref5 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref4) {\n                  var hdPath, prefix, _yield$_this$getKeyPa, privkey, pubkey, address;\n                  return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                    while (1) switch (_context6.prev = _context6.next) {\n                      case 0:\n                        hdPath = _ref4.hdPath, prefix = _ref4.prefix;\n                        _context6.next = 3;\n                        return _this.getKeyPair(hdPath);\n                      case 3:\n                        _yield$_this$getKeyPa = _context6.sent;\n                        privkey = _yield$_this$getKeyPa.privkey;\n                        pubkey = _yield$_this$getKeyPa.pubkey;\n                        address = (0, encoding_1.toBech32)(prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(pubkey));\n                        return _context6.abrupt(\"return\", {\n                          algo: \"secp256k1\",\n                          privkey: privkey,\n                          pubkey: pubkey,\n                          address: address\n                        });\n                      case 8:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }, _callee6);\n                }))).apply(this, arguments);\n              })));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"mnemonic\",\n    get: function get() {\n      return this.secret.toString();\n    }\n  }], [{\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(_x8) {\n      return (_fromMnemonic = _fromMnemonic || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(mnemonic) {\n        var options,\n          mnemonicChecked,\n          seed,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n              mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n              _context8.next = 4;\n              return crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);\n            case 4:\n              seed = _context8.sent;\n              return _context8.abrupt(\"return\", new Secp256k1HdWallet(mnemonicChecked, _objectSpread({}, options, {\n                seed: seed\n              })));\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Generates a new wallet with a BIP39 mnemonic of the given length.\n     *\n     * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n     * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      return (_generate = _generate || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var length,\n          options,\n          entropyLength,\n          entropy,\n          mnemonic,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              length = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : 12;\n              options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n              entropyLength = 4 * Math.floor(11 * length / 33);\n              entropy = crypto_1.Random.getBytes(entropyLength);\n              mnemonic = crypto_1.Bip39.encode(entropy);\n              return _context9.abrupt(\"return\", Secp256k1HdWallet.fromMnemonic(mnemonic.toString(), options));\n            case 6:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(_x9, _x10) {\n      return (_deserialize = _deserialize || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(serialization, password) {\n        var root;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              root = JSON.parse(serialization);\n              if ((0, utils_1.isNonNullObject)(root)) {\n                _context10.next = 3;\n                break;\n              }\n              throw new Error(\"Root document is not an object.\");\n            case 3:\n              _context10.t0 = root.type;\n              _context10.next = _context10.t0 === serializationTypeV1 ? 6 : 7;\n              break;\n            case 6:\n              return _context10.abrupt(\"return\", Secp256k1HdWallet.deserializeTypeV1(serialization, password));\n            case 7:\n              throw new Error(\"Unsupported serialization type\");\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n     * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n     * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n     */\n  }, {\n    key: \"deserializeWithEncryptionKey\",\n    value: function deserializeWithEncryptionKey(_x11, _x12) {\n      return (_deserializeWithEncryptionKey = _deserializeWithEncryptionKey || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(serialization, encryptionKey) {\n        var root, untypedRoot, decryptedBytes, decryptedDocument, mnemonic, accounts, firstPrefix, hdPaths;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              root = JSON.parse(serialization);\n              if ((0, utils_1.isNonNullObject)(root)) {\n                _context11.next = 3;\n                break;\n              }\n              throw new Error(\"Root document is not an object.\");\n            case 3:\n              untypedRoot = root;\n              _context11.t0 = untypedRoot.type;\n              _context11.next = _context11.t0 === serializationTypeV1 ? 7 : 22;\n              break;\n            case 7:\n              _context11.next = 9;\n              return (0, wallet_1.decrypt)((0, encoding_1.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n            case 9:\n              decryptedBytes = _context11.sent;\n              decryptedDocument = JSON.parse((0, encoding_1.fromUtf8)(decryptedBytes));\n              mnemonic = decryptedDocument.mnemonic, accounts = decryptedDocument.accounts;\n              (0, utils_1.assert)(typeof mnemonic === \"string\");\n              if (Array.isArray(accounts)) {\n                _context11.next = 15;\n                break;\n              }\n              throw new Error(\"Property 'accounts' is not an array\");\n            case 15:\n              if (accounts.every(function (account) {\n                return isDerivationJson(account);\n              })) {\n                _context11.next = 17;\n                break;\n              }\n              throw new Error(\"Account is not in the correct format.\");\n            case 17:\n              firstPrefix = accounts[0].prefix;\n              if (accounts.every(function (_ref6) {\n                var prefix = _ref6.prefix;\n                return prefix === firstPrefix;\n              })) {\n                _context11.next = 20;\n                break;\n              }\n              throw new Error(\"Accounts do not all have the same prefix\");\n            case 20:\n              hdPaths = accounts.map(function (_ref7) {\n                var hdPath = _ref7.hdPath;\n                return (0, crypto_1.stringToPath)(hdPath);\n              });\n              return _context11.abrupt(\"return\", Secp256k1HdWallet.fromMnemonic(mnemonic, {\n                hdPaths: hdPaths,\n                prefix: firstPrefix\n              }));\n            case 22:\n              throw new Error(\"Unsupported serialization type\");\n            case 23:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"deserializeTypeV1\",\n    value: function deserializeTypeV1(_x13, _x14) {\n      return (_deserializeTypeV = _deserializeTypeV || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(serialization, password) {\n        var root, encryptionKey;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              root = JSON.parse(serialization);\n              if ((0, utils_1.isNonNullObject)(root)) {\n                _context12.next = 3;\n                break;\n              }\n              throw new Error(\"Root document is not an object.\");\n            case 3:\n              _context12.next = 5;\n              return (0, wallet_1.executeKdf)(password, root.kdf);\n            case 5:\n              encryptionKey = _context12.sent;\n              return _context12.abrupt(\"return\", Secp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey));\n            case 7:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return Secp256k1HdWallet;\n}();\nexports.Secp256k1HdWallet = Secp256k1HdWallet;","map":null,"metadata":{},"sourceType":"script"}