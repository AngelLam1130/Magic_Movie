{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _objectSpread = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registry = exports.isTxBodyEncodeObject = exports.isPbjsGeneratedType = exports.isTsProtoGeneratedType = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nvar tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\nvar coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nvar tx_2 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nvar any_1 = require(\"cosmjs-types/google/protobuf/any\");\nfunction isTsProtoGeneratedType(type) {\n  return typeof type.fromPartial === \"function\";\n}\nexports.isTsProtoGeneratedType = isTsProtoGeneratedType;\nfunction isPbjsGeneratedType(type) {\n  return !isTsProtoGeneratedType(type);\n}\nexports.isPbjsGeneratedType = isPbjsGeneratedType;\nvar defaultTypeUrls = {\n  cosmosCoin: \"/cosmos.base.v1beta1.Coin\",\n  cosmosMsgSend: \"/cosmos.bank.v1beta1.MsgSend\",\n  cosmosTxBody: \"/cosmos.tx.v1beta1.TxBody\",\n  googleAny: \"/google.protobuf.Any\"\n};\nfunction isTxBodyEncodeObject(encodeObject) {\n  return encodeObject.typeUrl === \"/cosmos.tx.v1beta1.TxBody\";\n}\nexports.isTxBodyEncodeObject = isTxBodyEncodeObject;\nvar Registry = /*#__PURE__*/function () {\n  /**\n   * Creates a new Registry for mapping protobuf type identifiers/type URLs to\n   * actual implementations. Those implementations are typically generated with ts-proto\n   * but we also support protobuf.js as a type generator.\n   *\n   * If there is no parameter given, a `new Registry()` adds the types `Coin` and `MsgSend`\n   * for historic reasons. Those can be overriden by customTypes.\n   *\n   * There are currently two methods for adding new types:\n   * 1. Passing types to the constructor.\n   * 2. Using the `register()` method\n   */\n  function Registry(customTypes) {\n    _classCallCheck(this, Registry);\n    var cosmosCoin = defaultTypeUrls.cosmosCoin,\n      cosmosMsgSend = defaultTypeUrls.cosmosMsgSend;\n    this.types = customTypes ? new Map(_toConsumableArray(customTypes)) : new Map([[cosmosCoin, coin_1.Coin], [cosmosMsgSend, tx_1.MsgSend]]);\n  }\n  _createClass(Registry, [{\n    key: \"register\",\n    value: function register(typeUrl, type) {\n      this.types.set(typeUrl, type);\n    }\n    /**\n     * Looks up a type that was previously added to the registry.\n     *\n     * The generator information (ts-proto or pbjs) gets lost along the way.\n     * If you need to work with the result type in TypeScript, you can use:\n     *\n     * ```\n     * import { assert } from \"@cosmjs/utils\";\n     *\n     * const Coin = registry.lookupType(\"/cosmos.base.v1beta1.Coin\");\n     * assert(Coin); // Ensures not unset\n     * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect\n     *\n     * // Coin is typed TsProtoGeneratedType now.\n     * ```\n     */\n  }, {\n    key: \"lookupType\",\n    value: function lookupType(typeUrl) {\n      return this.types.get(typeUrl);\n    }\n  }, {\n    key: \"lookupTypeWithError\",\n    value: function lookupTypeWithError(typeUrl) {\n      var type = this.lookupType(typeUrl);\n      if (!type) {\n        throw new Error(\"Unregistered type url: \".concat(typeUrl));\n      }\n      return type;\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to protobuf if\n     * the given type was previously registered.\n     *\n     * If the value has to be wrapped in an Any, this needs to be done\n     * manually after this call. Or use `encodeAsAny` instead.\n     */\n  }, {\n    key: \"encode\",\n    value: function encode(encodeObject) {\n      var value = encodeObject.value,\n        typeUrl = encodeObject.typeUrl;\n      if (isTxBodyEncodeObject(encodeObject)) {\n        return this.encodeTxBody(value);\n      }\n      var type = this.lookupTypeWithError(typeUrl);\n      var instance = isTsProtoGeneratedType(type) ? type.fromPartial(value) : type.create(value);\n      return type.encode(instance).finish();\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to an Any if\n     * the given type was previously registered.\n     */\n  }, {\n    key: \"encodeAsAny\",\n    value: function encodeAsAny(encodeObject) {\n      var binaryValue = this.encode(encodeObject);\n      return any_1.Any.fromPartial({\n        typeUrl: encodeObject.typeUrl,\n        value: binaryValue\n      });\n    }\n  }, {\n    key: \"encodeTxBody\",\n    value: function encodeTxBody(txBodyFields) {\n      var _this = this;\n      var wrappedMessages = txBodyFields.messages.map(function (message) {\n        return _this.encodeAsAny(message);\n      });\n      var txBody = tx_2.TxBody.fromPartial(_objectSpread({}, txBodyFields, {\n        messages: wrappedMessages\n      }));\n      return tx_2.TxBody.encode(txBody).finish();\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(_ref) {\n      var typeUrl = _ref.typeUrl,\n        value = _ref.value;\n      if (typeUrl === defaultTypeUrls.cosmosTxBody) {\n        return this.decodeTxBody(value);\n      }\n      var type = this.lookupTypeWithError(typeUrl);\n      var decoded = type.decode(value);\n      Object.entries(decoded).forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          val = _ref3[1];\n        if (typeof Buffer !== \"undefined\" && typeof Buffer.isBuffer !== \"undefined\" && Buffer.isBuffer(val)) {\n          decoded[key] = Uint8Array.from(val);\n        }\n      });\n      return decoded;\n    }\n  }, {\n    key: \"decodeTxBody\",\n    value: function decodeTxBody(txBody) {\n      var _this2 = this;\n      var decodedTxBody = tx_2.TxBody.decode(txBody);\n      return _objectSpread({}, decodedTxBody, {\n        messages: decodedTxBody.messages.map(function (_ref4) {\n          var typeUrl = _ref4.typeUrl,\n            value = _ref4.value;\n          if (!typeUrl) {\n            throw new Error(\"Missing type_url in Any\");\n          }\n          if (!value) {\n            throw new Error(\"Missing value in Any\");\n          }\n          return _this2.decode({\n            typeUrl: typeUrl,\n            value: value\n          });\n        })\n      });\n    }\n  }]);\n  return Registry;\n}();\nexports.Registry = Registry;","map":null,"metadata":{},"sourceType":"script"}