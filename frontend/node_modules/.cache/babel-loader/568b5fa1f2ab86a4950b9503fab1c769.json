{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.anyToSinglePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nvar amino_1 = require(\"@cosmjs/amino\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nvar keys_1 = require(\"cosmjs-types/cosmos/crypto/ed25519/keys\");\nvar keys_2 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\nvar keys_3 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\nvar any_1 = require(\"cosmjs-types/google/protobuf/any\");\n/**\n * Takes a pubkey in the Amino JSON object style (type/value wrapper)\n * and convertes it into a protobuf `Any`.\n *\n * This is the reverse operation to `decodePubkey`.\n */\nfunction encodePubkey(pubkey) {\n  if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n    var pubkeyProto = keys_3.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_3.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isEd25519Pubkey)(pubkey)) {\n    var _pubkeyProto = keys_1.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.ed25519.PubKey\",\n      value: Uint8Array.from(keys_1.PubKey.encode(_pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n    var _pubkeyProto2 = keys_2.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_2.LegacyAminoPubKey.encode(_pubkeyProto2).finish())\n    });\n  } else {\n    throw new Error(\"Pubkey type \".concat(pubkey.type, \" not recognized\"));\n  }\n}\nexports.encodePubkey = encodePubkey;\n/**\n * Decodes a single pubkey (i.e. not a multisig pubkey) from `Any` into\n * `SinglePubkey`.\n *\n * In most cases you probably want to use `decodePubkey`, but `anyToSinglePubkey`\n * might be preferred in CosmJS 0.29.x due to https://github.com/cosmos/cosmjs/issues/1289.\n */\nfunction anyToSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        var _keys_3$PubKey$decode = keys_3.PubKey.decode(pubkey.value),\n          key = _keys_3$PubKey$decode.key;\n        return (0, amino_1.encodeSecp256k1Pubkey)(key);\n      }\n    case \"/cosmos.crypto.ed25519.PubKey\":\n      {\n        var _keys_1$PubKey$decode = keys_1.PubKey.decode(pubkey.value),\n          _key = _keys_1$PubKey$decode.key;\n        return (0, amino_1.encodeEd25519Pubkey)(_key);\n      }\n    default:\n      throw new Error(\"Pubkey type_url \".concat(pubkey.typeUrl, \" not recognized as single public key type\"));\n  }\n}\nexports.anyToSinglePubkey = anyToSinglePubkey;\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n    case \"/cosmos.crypto.ed25519.PubKey\":\n      {\n        return anyToSinglePubkey(pubkey);\n      }\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        var _keys_2$LegacyAminoPu = keys_2.LegacyAminoPubKey.decode(pubkey.value),\n          threshold = _keys_2$LegacyAminoPu.threshold,\n          publicKeys = _keys_2$LegacyAminoPu.publicKeys;\n        var out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(anyToSinglePubkey)\n          }\n        };\n        return out;\n      }\n    default:\n      throw new Error(\"Pubkey type_url \".concat(pubkey.typeUrl, \" not recognized\"));\n  }\n}\nexports.decodePubkey = decodePubkey;","map":null,"metadata":{},"sourceType":"script"}