{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _objectSpread = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _asyncToGenerator = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tendermint34Client = void 0;\nvar jsonrpc_1 = require(\"../jsonrpc\");\nvar rpcclients_1 = require(\"../rpcclients\");\nvar adaptor_1 = require(\"./adaptor\");\nvar requests = __importStar(require(\"./requests\"));\nvar Tendermint34Client = /*#__PURE__*/function (_abciInfo, _abciQuery, _block, _blockResults, _blockSearch, _blockSearchAll, _blockchain, _broadcastTxSync, _broadcastTxAsync, _broadcastTxCommit, _commit, _genesis, _health, _numUnconfirmedTxs, _status, _tx, _txSearch, _txSearchAll, _validators, _validatorsAll, _doCall, _connect, _create, _detectVersion) {\n  /**\n   * Use `Tendermint34Client.connect` or `Tendermint34Client.create` to create an instance.\n   */\n  function Tendermint34Client(client) {\n    _classCallCheck(this, Tendermint34Client);\n    this.client = client;\n    this.p = adaptor_1.adaptor34.params;\n    this.r = adaptor_1.adaptor34.responses;\n  }\n  /**\n   * Creates a new Tendermint client for the given endpoint.\n   *\n   * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.\n   */\n  _createClass(Tendermint34Client, [{\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.client.disconnect();\n    }\n  }, {\n    key: \"abciInfo\",\n    value: function abciInfo() {\n      return (_abciInfo = _abciInfo || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              query = {\n                method: requests.Method.AbciInfo\n              };\n              return _context.abrupt(\"return\", this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"abciQuery\",\n    value: function abciQuery(_x) {\n      return (_abciQuery = _abciQuery || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              query = {\n                params: params,\n                method: requests.Method.AbciQuery\n              };\n              return _context2.abrupt(\"return\", this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"block\",\n    value: function block(_x2) {\n      return (_block = _block || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(height) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              query = {\n                method: requests.Method.Block,\n                params: {\n                  height: height\n                }\n              };\n              return _context3.abrupt(\"return\", this.doCall(query, this.p.encodeBlock, this.r.decodeBlock));\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"blockResults\",\n    value: function blockResults(_x3) {\n      return (_blockResults = _blockResults || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(height) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              query = {\n                method: requests.Method.BlockResults,\n                params: {\n                  height: height\n                }\n              };\n              return _context4.abrupt(\"return\", this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults));\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Search for events that are in a block.\n     *\n     * NOTE\n     * This method will error on any node that is running a Tendermint version lower than 0.34.9.\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/block_search\n     */\n  }, {\n    key: \"blockSearch\",\n    value: function blockSearch(_x4) {\n      return (_blockSearch = _blockSearch || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {\n        var query, resp;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              query = {\n                params: params,\n                method: requests.Method.BlockSearch\n              };\n              _context5.next = 3;\n              return this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);\n            case 3:\n              resp = _context5.sent;\n              return _context5.abrupt(\"return\", _objectSpread({}, resp, {\n                // make sure we sort by height, as tendermint may be sorting by string value of the height\n                blocks: _toConsumableArray(resp.blocks).sort(function (a, b) {\n                  return a.block.header.height - b.block.header.height;\n                })\n              }));\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    } // this should paginate through all blockSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    //\n    // NOTE\n    // This method will error on any node that is running a Tendermint version lower than 0.34.9.\n  }, {\n    key: \"blockSearchAll\",\n    value: function blockSearchAll(_x5) {\n      return (_blockSearchAll = _blockSearchAll || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params) {\n        var page, blocks, done, resp;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              page = params.page || 1;\n              blocks = [];\n              done = false;\n            case 3:\n              if (done) {\n                _context6.next = 11;\n                break;\n              }\n              _context6.next = 6;\n              return this.blockSearch(_objectSpread({}, params, {\n                page: page\n              }));\n            case 6:\n              resp = _context6.sent;\n              blocks.push.apply(blocks, _toConsumableArray(resp.blocks));\n              if (blocks.length < resp.totalCount) {\n                page++;\n              } else {\n                done = true;\n              }\n              _context6.next = 3;\n              break;\n            case 11:\n              // make sure we sort by height, as tendermint may be sorting by string value of the height\n              // and the earlier items may be in a higher page than the later items\n              blocks.sort(function (a, b) {\n                return a.block.header.height - b.block.header.height;\n              });\n              return _context6.abrupt(\"return\", {\n                totalCount: blocks.length,\n                blocks: blocks\n              });\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Queries block headers filtered by minHeight <= height <= maxHeight.\n     *\n     * @param minHeight The minimum height to be included in the result. Defaults to 0.\n     * @param maxHeight The maximum height to be included in the result. Defaults to infinity.\n     */\n  }, {\n    key: \"blockchain\",\n    value: function blockchain(_x6, _x7) {\n      return (_blockchain = _blockchain || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(minHeight, maxHeight) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              query = {\n                method: requests.Method.Blockchain,\n                params: {\n                  minHeight: minHeight,\n                  maxHeight: maxHeight\n                }\n              };\n              return _context7.abrupt(\"return\", this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain));\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for response\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync\n     */\n  }, {\n    key: \"broadcastTxSync\",\n    value: function broadcastTxSync(_x8) {\n      return (_broadcastTxSync = _broadcastTxSync || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              query = {\n                params: params,\n                method: requests.Method.BroadcastTxSync\n              };\n              return _context8.abrupt(\"return\", this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync));\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Broadcast transaction to mempool and do not wait for result\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async\n     */\n  }, {\n    key: \"broadcastTxAsync\",\n    value: function broadcastTxAsync(_x9) {\n      return (_broadcastTxAsync = _broadcastTxAsync || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              query = {\n                params: params,\n                method: requests.Method.BroadcastTxAsync\n              };\n              return _context9.abrupt(\"return\", this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync));\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit\n     */\n  }, {\n    key: \"broadcastTxCommit\",\n    value: function broadcastTxCommit(_x10) {\n      return (_broadcastTxCommit = _broadcastTxCommit || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              query = {\n                params: params,\n                method: requests.Method.BroadcastTxCommit\n              };\n              return _context10.abrupt(\"return\", this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit));\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(_x11) {\n      return (_commit = _commit || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(height) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              query = {\n                method: requests.Method.Commit,\n                params: {\n                  height: height\n                }\n              };\n              return _context11.abrupt(\"return\", this.doCall(query, this.p.encodeCommit, this.r.decodeCommit));\n            case 2:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"genesis\",\n    value: function genesis() {\n      return (_genesis = _genesis || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              query = {\n                method: requests.Method.Genesis\n              };\n              return _context12.abrupt(\"return\", this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis));\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"health\",\n    value: function health() {\n      return (_health = _health || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              query = {\n                method: requests.Method.Health\n              };\n              return _context13.abrupt(\"return\", this.doCall(query, this.p.encodeHealth, this.r.decodeHealth));\n            case 2:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"numUnconfirmedTxs\",\n    value: function numUnconfirmedTxs() {\n      return (_numUnconfirmedTxs = _numUnconfirmedTxs || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              query = {\n                method: requests.Method.NumUnconfirmedTxs\n              };\n              return _context14.abrupt(\"return\", this.doCall(query, this.p.encodeNumUnconfirmedTxs, this.r.decodeNumUnconfirmedTxs));\n            case 2:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"status\",\n    value: function status() {\n      return (_status = _status || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              query = {\n                method: requests.Method.Status\n              };\n              return _context15.abrupt(\"return\", this.doCall(query, this.p.encodeStatus, this.r.decodeStatus));\n            case 2:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"subscribeNewBlock\",\n    value: function subscribeNewBlock() {\n      var request = {\n        method: requests.Method.Subscribe,\n        query: {\n          type: requests.SubscriptionEventType.NewBlock\n        }\n      };\n      return this.subscribe(request, this.r.decodeNewBlockEvent);\n    }\n  }, {\n    key: \"subscribeNewBlockHeader\",\n    value: function subscribeNewBlockHeader() {\n      var request = {\n        method: requests.Method.Subscribe,\n        query: {\n          type: requests.SubscriptionEventType.NewBlockHeader\n        }\n      };\n      return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);\n    }\n  }, {\n    key: \"subscribeTx\",\n    value: function subscribeTx(query) {\n      var request = {\n        method: requests.Method.Subscribe,\n        query: {\n          type: requests.SubscriptionEventType.Tx,\n          raw: query\n        }\n      };\n      return this.subscribe(request, this.r.decodeTxEvent);\n    }\n    /**\n     * Get a single transaction by hash\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx\n     */\n  }, {\n    key: \"tx\",\n    value: function tx(_x12) {\n      return (_tx = _tx || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              query = {\n                params: params,\n                method: requests.Method.Tx\n              };\n              return _context16.abrupt(\"return\", this.doCall(query, this.p.encodeTx, this.r.decodeTx));\n            case 2:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Search for transactions that are in a block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search\n     */\n  }, {\n    key: \"txSearch\",\n    value: function txSearch(_x13) {\n      return (_txSearch = _txSearch || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              query = {\n                params: params,\n                method: requests.Method.TxSearch\n              };\n              return _context17.abrupt(\"return\", this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch));\n            case 2:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }))).apply(this, arguments);\n    } // this should paginate through all txSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n  }, {\n    key: \"txSearchAll\",\n    value: function txSearchAll(_x14) {\n      return (_txSearchAll = _txSearchAll || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(params) {\n        var page, txs, done, resp;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              page = params.page || 1;\n              txs = [];\n              done = false;\n            case 3:\n              if (done) {\n                _context18.next = 11;\n                break;\n              }\n              _context18.next = 6;\n              return this.txSearch(_objectSpread({}, params, {\n                page: page\n              }));\n            case 6:\n              resp = _context18.sent;\n              txs.push.apply(txs, _toConsumableArray(resp.txs));\n              if (txs.length < resp.totalCount) {\n                page++;\n              } else {\n                done = true;\n              }\n              _context18.next = 3;\n              break;\n            case 11:\n              return _context18.abrupt(\"return\", {\n                totalCount: txs.length,\n                txs: txs\n              });\n            case 12:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"validators\",\n    value: function validators(_x15) {\n      return (_validators = _validators || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              query = {\n                method: requests.Method.Validators,\n                params: params\n              };\n              return _context19.abrupt(\"return\", this.doCall(query, this.p.encodeValidators, this.r.decodeValidators));\n            case 2:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"validatorsAll\",\n    value: function validatorsAll(_x16) {\n      return (_validatorsAll = _validatorsAll || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(height) {\n        var validators, page, done, blockHeight, response;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              validators = [];\n              page = 1;\n              done = false;\n              blockHeight = height;\n            case 4:\n              if (done) {\n                _context20.next = 13;\n                break;\n              }\n              _context20.next = 7;\n              return this.validators({\n                per_page: 50,\n                height: blockHeight,\n                page: page\n              });\n            case 7:\n              response = _context20.sent;\n              validators.push.apply(validators, _toConsumableArray(response.validators));\n              blockHeight = blockHeight || response.blockHeight;\n              if (validators.length < response.total) {\n                page++;\n              } else {\n                done = true;\n              }\n              _context20.next = 4;\n              break;\n            case 13:\n              return _context20.abrupt(\"return\", {\n                // NOTE: Default value is for type safety but this should always be set\n                blockHeight: blockHeight !== null && blockHeight !== void 0 ? blockHeight : 0,\n                count: validators.length,\n                total: validators.length,\n                validators: validators\n              });\n            case 14:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }))).apply(this, arguments);\n    } // doCall is a helper to handle the encode/call/decode logic\n  }, {\n    key: \"doCall\",\n    value: function doCall(_x17, _x18, _x19) {\n      return (_doCall = _doCall || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(request, encode, decode) {\n        var req, result;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              req = encode(request);\n              _context21.next = 3;\n              return this.client.execute(req);\n            case 3:\n              result = _context21.sent;\n              return _context21.abrupt(\"return\", decode(result));\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(request, decode) {\n      if (!(0, rpcclients_1.instanceOfRpcStreamingClient)(this.client)) {\n        throw new Error(\"This RPC client type cannot subscribe to events\");\n      }\n      var req = this.p.encodeSubscribe(request);\n      var eventStream = this.client.listen(req);\n      return eventStream.map(function (event) {\n        return decode(event);\n      });\n    }\n  }], [{\n    key: \"connect\",\n    value: function connect(_x20) {\n      return (_connect = _connect || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(endpoint) {\n        var useHttp, rpcClient;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              if (!(typeof endpoint === \"object\")) {\n                _context22.next = 4;\n                break;\n              }\n              return _context22.abrupt(\"return\", Tendermint34Client.create(new rpcclients_1.HttpClient(endpoint)));\n            case 4:\n              useHttp = endpoint.startsWith(\"http://\") || endpoint.startsWith(\"https://\");\n              rpcClient = useHttp ? new rpcclients_1.HttpClient(endpoint) : new rpcclients_1.WebsocketClient(endpoint);\n              return _context22.abrupt(\"return\", Tendermint34Client.create(rpcClient));\n            case 7:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Creates a new Tendermint client given an RPC client.\n     */\n  }, {\n    key: \"create\",\n    value: function create(_x21) {\n      return (_create = _create || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(rpcClient) {\n        var _version;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this.detectVersion(rpcClient);\n            case 2:\n              _version = _context23.sent;\n              return _context23.abrupt(\"return\", new Tendermint34Client(rpcClient));\n            case 4:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"detectVersion\",\n    value: function detectVersion(_x22) {\n      return (_detectVersion = _detectVersion || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(client) {\n        var req, response, result, version;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              req = (0, jsonrpc_1.createJsonRpcRequest)(requests.Method.Status);\n              _context24.next = 3;\n              return client.execute(req);\n            case 3:\n              response = _context24.sent;\n              result = response.result;\n              if (!(!result || !result.node_info)) {\n                _context24.next = 7;\n                break;\n              }\n              throw new Error(\"Unrecognized format for status response\");\n            case 7:\n              version = result.node_info.version;\n              if (!(typeof version !== \"string\")) {\n                _context24.next = 10;\n                break;\n              }\n              throw new Error(\"Unrecognized version format: must be string\");\n            case 10:\n              return _context24.abrupt(\"return\", version);\n            case 11:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return Tendermint34Client;\n}();\nexports.Tendermint34Client = Tendermint34Client;","map":null,"metadata":{},"sourceType":"script"}