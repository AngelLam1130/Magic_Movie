{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvidenceList = exports.LightClientAttackEvidence = exports.DuplicateVoteEvidence = exports.Evidence = exports.protobufPackage = void 0;\n/* eslint-disable */\nvar long_1 = __importDefault(require(\"long\"));\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nvar timestamp_1 = require(\"../../google/protobuf/timestamp\");\nvar types_1 = require(\"./types\");\nvar validator_1 = require(\"./validator\");\nexports.protobufPackage = \"tendermint.types\";\nfunction createBaseEvidence() {\n  return {\n    duplicateVoteEvidence: undefined,\n    lightClientAttackEvidence: undefined\n  };\n}\nexports.Evidence = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.duplicateVoteEvidence !== undefined) {\n      exports.DuplicateVoteEvidence.encode(message.duplicateVoteEvidence, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.lightClientAttackEvidence !== undefined) {\n      exports.LightClientAttackEvidence.encode(message.lightClientAttackEvidence, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseEvidence();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.duplicateVoteEvidence = exports.DuplicateVoteEvidence.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.lightClientAttackEvidence = exports.LightClientAttackEvidence.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      duplicateVoteEvidence: isSet(object.duplicateVoteEvidence) ? exports.DuplicateVoteEvidence.fromJSON(object.duplicateVoteEvidence) : undefined,\n      lightClientAttackEvidence: isSet(object.lightClientAttackEvidence) ? exports.LightClientAttackEvidence.fromJSON(object.lightClientAttackEvidence) : undefined\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.duplicateVoteEvidence !== undefined && (obj.duplicateVoteEvidence = message.duplicateVoteEvidence ? exports.DuplicateVoteEvidence.toJSON(message.duplicateVoteEvidence) : undefined);\n    message.lightClientAttackEvidence !== undefined && (obj.lightClientAttackEvidence = message.lightClientAttackEvidence ? exports.LightClientAttackEvidence.toJSON(message.lightClientAttackEvidence) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = createBaseEvidence();\n    message.duplicateVoteEvidence = object.duplicateVoteEvidence !== undefined && object.duplicateVoteEvidence !== null ? exports.DuplicateVoteEvidence.fromPartial(object.duplicateVoteEvidence) : undefined;\n    message.lightClientAttackEvidence = object.lightClientAttackEvidence !== undefined && object.lightClientAttackEvidence !== null ? exports.LightClientAttackEvidence.fromPartial(object.lightClientAttackEvidence) : undefined;\n    return message;\n  }\n};\nfunction createBaseDuplicateVoteEvidence() {\n  return {\n    voteA: undefined,\n    voteB: undefined,\n    totalVotingPower: long_1.default.ZERO,\n    validatorPower: long_1.default.ZERO,\n    timestamp: undefined\n  };\n}\nexports.DuplicateVoteEvidence = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.voteA !== undefined) {\n      types_1.Vote.encode(message.voteA, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.voteB !== undefined) {\n      types_1.Vote.encode(message.voteB, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.totalVotingPower.isZero()) {\n      writer.uint32(24).int64(message.totalVotingPower);\n    }\n    if (!message.validatorPower.isZero()) {\n      writer.uint32(32).int64(message.validatorPower);\n    }\n    if (message.timestamp !== undefined) {\n      timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseDuplicateVoteEvidence();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.voteA = types_1.Vote.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.voteB = types_1.Vote.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.totalVotingPower = reader.int64();\n          break;\n        case 4:\n          message.validatorPower = reader.int64();\n          break;\n        case 5:\n          message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      voteA: isSet(object.voteA) ? types_1.Vote.fromJSON(object.voteA) : undefined,\n      voteB: isSet(object.voteB) ? types_1.Vote.fromJSON(object.voteB) : undefined,\n      totalVotingPower: isSet(object.totalVotingPower) ? long_1.default.fromValue(object.totalVotingPower) : long_1.default.ZERO,\n      validatorPower: isSet(object.validatorPower) ? long_1.default.fromValue(object.validatorPower) : long_1.default.ZERO,\n      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.voteA !== undefined && (obj.voteA = message.voteA ? types_1.Vote.toJSON(message.voteA) : undefined);\n    message.voteB !== undefined && (obj.voteB = message.voteB ? types_1.Vote.toJSON(message.voteB) : undefined);\n    message.totalVotingPower !== undefined && (obj.totalVotingPower = (message.totalVotingPower || long_1.default.ZERO).toString());\n    message.validatorPower !== undefined && (obj.validatorPower = (message.validatorPower || long_1.default.ZERO).toString());\n    message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = createBaseDuplicateVoteEvidence();\n    message.voteA = object.voteA !== undefined && object.voteA !== null ? types_1.Vote.fromPartial(object.voteA) : undefined;\n    message.voteB = object.voteB !== undefined && object.voteB !== null ? types_1.Vote.fromPartial(object.voteB) : undefined;\n    message.totalVotingPower = object.totalVotingPower !== undefined && object.totalVotingPower !== null ? long_1.default.fromValue(object.totalVotingPower) : long_1.default.ZERO;\n    message.validatorPower = object.validatorPower !== undefined && object.validatorPower !== null ? long_1.default.fromValue(object.validatorPower) : long_1.default.ZERO;\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? timestamp_1.Timestamp.fromPartial(object.timestamp) : undefined;\n    return message;\n  }\n};\nfunction createBaseLightClientAttackEvidence() {\n  return {\n    conflictingBlock: undefined,\n    commonHeight: long_1.default.ZERO,\n    byzantineValidators: [],\n    totalVotingPower: long_1.default.ZERO,\n    timestamp: undefined\n  };\n}\nexports.LightClientAttackEvidence = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.conflictingBlock !== undefined) {\n      types_1.LightBlock.encode(message.conflictingBlock, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.commonHeight.isZero()) {\n      writer.uint32(16).int64(message.commonHeight);\n    }\n    var _iterator = _createForOfIteratorHelper(message.byzantineValidators),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        validator_1.Validator.encode(v, writer.uint32(26).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (!message.totalVotingPower.isZero()) {\n      writer.uint32(32).int64(message.totalVotingPower);\n    }\n    if (message.timestamp !== undefined) {\n      timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseLightClientAttackEvidence();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.conflictingBlock = types_1.LightBlock.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.commonHeight = reader.int64();\n          break;\n        case 3:\n          message.byzantineValidators.push(validator_1.Validator.decode(reader, reader.uint32()));\n          break;\n        case 4:\n          message.totalVotingPower = reader.int64();\n          break;\n        case 5:\n          message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      conflictingBlock: isSet(object.conflictingBlock) ? types_1.LightBlock.fromJSON(object.conflictingBlock) : undefined,\n      commonHeight: isSet(object.commonHeight) ? long_1.default.fromValue(object.commonHeight) : long_1.default.ZERO,\n      byzantineValidators: Array.isArray(object === null || object === void 0 ? void 0 : object.byzantineValidators) ? object.byzantineValidators.map(function (e) {\n        return validator_1.Validator.fromJSON(e);\n      }) : [],\n      totalVotingPower: isSet(object.totalVotingPower) ? long_1.default.fromValue(object.totalVotingPower) : long_1.default.ZERO,\n      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.conflictingBlock !== undefined && (obj.conflictingBlock = message.conflictingBlock ? types_1.LightBlock.toJSON(message.conflictingBlock) : undefined);\n    message.commonHeight !== undefined && (obj.commonHeight = (message.commonHeight || long_1.default.ZERO).toString());\n    if (message.byzantineValidators) {\n      obj.byzantineValidators = message.byzantineValidators.map(function (e) {\n        return e ? validator_1.Validator.toJSON(e) : undefined;\n      });\n    } else {\n      obj.byzantineValidators = [];\n    }\n    message.totalVotingPower !== undefined && (obj.totalVotingPower = (message.totalVotingPower || long_1.default.ZERO).toString());\n    message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n    var message = createBaseLightClientAttackEvidence();\n    message.conflictingBlock = object.conflictingBlock !== undefined && object.conflictingBlock !== null ? types_1.LightBlock.fromPartial(object.conflictingBlock) : undefined;\n    message.commonHeight = object.commonHeight !== undefined && object.commonHeight !== null ? long_1.default.fromValue(object.commonHeight) : long_1.default.ZERO;\n    message.byzantineValidators = ((_a = object.byzantineValidators) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      return validator_1.Validator.fromPartial(e);\n    })) || [];\n    message.totalVotingPower = object.totalVotingPower !== undefined && object.totalVotingPower !== null ? long_1.default.fromValue(object.totalVotingPower) : long_1.default.ZERO;\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? timestamp_1.Timestamp.fromPartial(object.timestamp) : undefined;\n    return message;\n  }\n};\nfunction createBaseEvidenceList() {\n  return {\n    evidence: []\n  };\n}\nexports.EvidenceList = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    var _iterator2 = _createForOfIteratorHelper(message.evidence),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var v = _step2.value;\n        exports.Evidence.encode(v, writer.uint32(10).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseEvidenceList();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.evidence.push(exports.Evidence.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    return {\n      evidence: Array.isArray(object === null || object === void 0 ? void 0 : object.evidence) ? object.evidence.map(function (e) {\n        return exports.Evidence.fromJSON(e);\n      }) : []\n    };\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    if (message.evidence) {\n      obj.evidence = message.evidence.map(function (e) {\n        return e ? exports.Evidence.toJSON(e) : undefined;\n      });\n    } else {\n      obj.evidence = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n    var message = createBaseEvidenceList();\n    message.evidence = ((_a = object.evidence) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      return exports.Evidence.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nfunction toTimestamp(date) {\n  var seconds = numberToLong(date.getTime() / 1000);\n  var nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds: seconds,\n    nanos: nanos\n  };\n}\nfunction fromTimestamp(t) {\n  var millis = t.seconds.toNumber() * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return toTimestamp(o);\n  } else if (typeof o === \"string\") {\n    return toTimestamp(new Date(o));\n  } else {\n    return timestamp_1.Timestamp.fromJSON(o);\n  }\n}\nfunction numberToLong(number) {\n  return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\nfunction isSet(value) {\n  return value !== null && value !== undefined;\n}","map":null,"metadata":{},"sourceType":"script"}