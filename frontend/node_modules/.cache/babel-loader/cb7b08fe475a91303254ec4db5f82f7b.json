{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgConnectionOpenTryResponse = exports.MsgConnectionOpenTry = exports.MsgConnectionOpenInitResponse = exports.MsgConnectionOpenInit = exports.MsgConnectionOpenConfirmResponse = exports.MsgConnectionOpenConfirm = exports.MsgConnectionOpenAckResponse = exports.MsgConnectionOpenAck = void 0;\nvar _connection = require(\"./connection\");\nvar _any = require(\"../../../../google/protobuf/any\");\nvar _client = require(\"../../client/v1/client\");\nvar _helpers = require(\"../../../../helpers\");\nvar _m0 = _interopRequireWildcard(require(\"protobufjs/minimal\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction createBaseMsgConnectionOpenInit() {\n  return {\n    clientId: \"\",\n    counterparty: _connection.Counterparty.fromPartial({}),\n    version: _connection.Version.fromPartial({}),\n    delayPeriod: _helpers.Long.UZERO,\n    signer: \"\"\n  };\n}\nvar MsgConnectionOpenInit = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.clientId !== \"\") {\n      writer.uint32(10).string(message.clientId);\n    }\n    if (message.counterparty !== undefined) {\n      _connection.Counterparty.encode(message.counterparty, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.version !== undefined) {\n      _connection.Version.encode(message.version, writer.uint32(26).fork()).ldelim();\n    }\n    if (!message.delayPeriod.isZero()) {\n      writer.uint32(32).uint64(message.delayPeriod);\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenInit();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.clientId = reader.string();\n          break;\n        case 2:\n          message.counterparty = _connection.Counterparty.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.version = _connection.Version.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.delayPeriod = reader.uint64();\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$clientId, _object$signer;\n    var message = createBaseMsgConnectionOpenInit();\n    message.clientId = (_object$clientId = object.clientId) !== null && _object$clientId !== void 0 ? _object$clientId : \"\";\n    message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? _connection.Counterparty.fromPartial(object.counterparty) : undefined;\n    message.version = object.version !== undefined && object.version !== null ? _connection.Version.fromPartial(object.version) : undefined;\n    message.delayPeriod = object.delayPeriod !== undefined && object.delayPeriod !== null ? _helpers.Long.fromValue(object.delayPeriod) : _helpers.Long.UZERO;\n    message.signer = (_object$signer = object.signer) !== null && _object$signer !== void 0 ? _object$signer : \"\";\n    return message;\n  }\n};\nexports.MsgConnectionOpenInit = MsgConnectionOpenInit;\nfunction createBaseMsgConnectionOpenInitResponse() {\n  return {};\n}\nvar MsgConnectionOpenInitResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenInitResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgConnectionOpenInitResponse();\n    return message;\n  }\n};\nexports.MsgConnectionOpenInitResponse = MsgConnectionOpenInitResponse;\nfunction createBaseMsgConnectionOpenTry() {\n  return {\n    clientId: \"\",\n    previousConnectionId: \"\",\n    clientState: undefined,\n    counterparty: _connection.Counterparty.fromPartial({}),\n    delayPeriod: _helpers.Long.UZERO,\n    counterpartyVersions: [],\n    proofHeight: _client.Height.fromPartial({}),\n    proofInit: new Uint8Array(),\n    proofClient: new Uint8Array(),\n    proofConsensus: new Uint8Array(),\n    consensusHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgConnectionOpenTry = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.clientId !== \"\") {\n      writer.uint32(10).string(message.clientId);\n    }\n    if (message.previousConnectionId !== \"\") {\n      writer.uint32(18).string(message.previousConnectionId);\n    }\n    if (message.clientState !== undefined) {\n      _any.Any.encode(message.clientState, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.counterparty !== undefined) {\n      _connection.Counterparty.encode(message.counterparty, writer.uint32(34).fork()).ldelim();\n    }\n    if (!message.delayPeriod.isZero()) {\n      writer.uint32(40).uint64(message.delayPeriod);\n    }\n    var _iterator = _createForOfIteratorHelper(message.counterpartyVersions),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        _connection.Version.encode(v, writer.uint32(50).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(58).fork()).ldelim();\n    }\n    if (message.proofInit.length !== 0) {\n      writer.uint32(66).bytes(message.proofInit);\n    }\n    if (message.proofClient.length !== 0) {\n      writer.uint32(74).bytes(message.proofClient);\n    }\n    if (message.proofConsensus.length !== 0) {\n      writer.uint32(82).bytes(message.proofConsensus);\n    }\n    if (message.consensusHeight !== undefined) {\n      _client.Height.encode(message.consensusHeight, writer.uint32(90).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(98).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenTry();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.clientId = reader.string();\n          break;\n        case 2:\n          message.previousConnectionId = reader.string();\n          break;\n        case 3:\n          message.clientState = _any.Any.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.counterparty = _connection.Counterparty.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.delayPeriod = reader.uint64();\n          break;\n        case 6:\n          message.counterpartyVersions.push(_connection.Version.decode(reader, reader.uint32()));\n          break;\n        case 7:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 8:\n          message.proofInit = reader.bytes();\n          break;\n        case 9:\n          message.proofClient = reader.bytes();\n          break;\n        case 10:\n          message.proofConsensus = reader.bytes();\n          break;\n        case 11:\n          message.consensusHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 12:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$clientId2, _object$previousConne, _object$counterpartyV, _object$proofInit, _object$proofClient, _object$proofConsensu, _object$signer2;\n    var message = createBaseMsgConnectionOpenTry();\n    message.clientId = (_object$clientId2 = object.clientId) !== null && _object$clientId2 !== void 0 ? _object$clientId2 : \"\";\n    message.previousConnectionId = (_object$previousConne = object.previousConnectionId) !== null && _object$previousConne !== void 0 ? _object$previousConne : \"\";\n    message.clientState = object.clientState !== undefined && object.clientState !== null ? _any.Any.fromPartial(object.clientState) : undefined;\n    message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? _connection.Counterparty.fromPartial(object.counterparty) : undefined;\n    message.delayPeriod = object.delayPeriod !== undefined && object.delayPeriod !== null ? _helpers.Long.fromValue(object.delayPeriod) : _helpers.Long.UZERO;\n    message.counterpartyVersions = ((_object$counterpartyV = object.counterpartyVersions) === null || _object$counterpartyV === void 0 ? void 0 : _object$counterpartyV.map(function (e) {\n      return _connection.Version.fromPartial(e);\n    })) || [];\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.proofInit = (_object$proofInit = object.proofInit) !== null && _object$proofInit !== void 0 ? _object$proofInit : new Uint8Array();\n    message.proofClient = (_object$proofClient = object.proofClient) !== null && _object$proofClient !== void 0 ? _object$proofClient : new Uint8Array();\n    message.proofConsensus = (_object$proofConsensu = object.proofConsensus) !== null && _object$proofConsensu !== void 0 ? _object$proofConsensu : new Uint8Array();\n    message.consensusHeight = object.consensusHeight !== undefined && object.consensusHeight !== null ? _client.Height.fromPartial(object.consensusHeight) : undefined;\n    message.signer = (_object$signer2 = object.signer) !== null && _object$signer2 !== void 0 ? _object$signer2 : \"\";\n    return message;\n  }\n};\nexports.MsgConnectionOpenTry = MsgConnectionOpenTry;\nfunction createBaseMsgConnectionOpenTryResponse() {\n  return {};\n}\nvar MsgConnectionOpenTryResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenTryResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgConnectionOpenTryResponse();\n    return message;\n  }\n};\nexports.MsgConnectionOpenTryResponse = MsgConnectionOpenTryResponse;\nfunction createBaseMsgConnectionOpenAck() {\n  return {\n    connectionId: \"\",\n    counterpartyConnectionId: \"\",\n    version: _connection.Version.fromPartial({}),\n    clientState: undefined,\n    proofHeight: _client.Height.fromPartial({}),\n    proofTry: new Uint8Array(),\n    proofClient: new Uint8Array(),\n    proofConsensus: new Uint8Array(),\n    consensusHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgConnectionOpenAck = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.connectionId !== \"\") {\n      writer.uint32(10).string(message.connectionId);\n    }\n    if (message.counterpartyConnectionId !== \"\") {\n      writer.uint32(18).string(message.counterpartyConnectionId);\n    }\n    if (message.version !== undefined) {\n      _connection.Version.encode(message.version, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.clientState !== undefined) {\n      _any.Any.encode(message.clientState, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.proofTry.length !== 0) {\n      writer.uint32(50).bytes(message.proofTry);\n    }\n    if (message.proofClient.length !== 0) {\n      writer.uint32(58).bytes(message.proofClient);\n    }\n    if (message.proofConsensus.length !== 0) {\n      writer.uint32(66).bytes(message.proofConsensus);\n    }\n    if (message.consensusHeight !== undefined) {\n      _client.Height.encode(message.consensusHeight, writer.uint32(74).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(82).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenAck();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connectionId = reader.string();\n          break;\n        case 2:\n          message.counterpartyConnectionId = reader.string();\n          break;\n        case 3:\n          message.version = _connection.Version.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.clientState = _any.Any.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.proofTry = reader.bytes();\n          break;\n        case 7:\n          message.proofClient = reader.bytes();\n          break;\n        case 8:\n          message.proofConsensus = reader.bytes();\n          break;\n        case 9:\n          message.consensusHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 10:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$connectionId, _object$counterpartyC, _object$proofTry, _object$proofClient2, _object$proofConsensu2, _object$signer3;\n    var message = createBaseMsgConnectionOpenAck();\n    message.connectionId = (_object$connectionId = object.connectionId) !== null && _object$connectionId !== void 0 ? _object$connectionId : \"\";\n    message.counterpartyConnectionId = (_object$counterpartyC = object.counterpartyConnectionId) !== null && _object$counterpartyC !== void 0 ? _object$counterpartyC : \"\";\n    message.version = object.version !== undefined && object.version !== null ? _connection.Version.fromPartial(object.version) : undefined;\n    message.clientState = object.clientState !== undefined && object.clientState !== null ? _any.Any.fromPartial(object.clientState) : undefined;\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.proofTry = (_object$proofTry = object.proofTry) !== null && _object$proofTry !== void 0 ? _object$proofTry : new Uint8Array();\n    message.proofClient = (_object$proofClient2 = object.proofClient) !== null && _object$proofClient2 !== void 0 ? _object$proofClient2 : new Uint8Array();\n    message.proofConsensus = (_object$proofConsensu2 = object.proofConsensus) !== null && _object$proofConsensu2 !== void 0 ? _object$proofConsensu2 : new Uint8Array();\n    message.consensusHeight = object.consensusHeight !== undefined && object.consensusHeight !== null ? _client.Height.fromPartial(object.consensusHeight) : undefined;\n    message.signer = (_object$signer3 = object.signer) !== null && _object$signer3 !== void 0 ? _object$signer3 : \"\";\n    return message;\n  }\n};\nexports.MsgConnectionOpenAck = MsgConnectionOpenAck;\nfunction createBaseMsgConnectionOpenAckResponse() {\n  return {};\n}\nvar MsgConnectionOpenAckResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenAckResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgConnectionOpenAckResponse();\n    return message;\n  }\n};\nexports.MsgConnectionOpenAckResponse = MsgConnectionOpenAckResponse;\nfunction createBaseMsgConnectionOpenConfirm() {\n  return {\n    connectionId: \"\",\n    proofAck: new Uint8Array(),\n    proofHeight: _client.Height.fromPartial({}),\n    signer: \"\"\n  };\n}\nvar MsgConnectionOpenConfirm = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.connectionId !== \"\") {\n      writer.uint32(10).string(message.connectionId);\n    }\n    if (message.proofAck.length !== 0) {\n      writer.uint32(18).bytes(message.proofAck);\n    }\n    if (message.proofHeight !== undefined) {\n      _client.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(34).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenConfirm();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connectionId = reader.string();\n          break;\n        case 2:\n          message.proofAck = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = _client.Height.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var _object$connectionId2, _object$proofAck, _object$signer4;\n    var message = createBaseMsgConnectionOpenConfirm();\n    message.connectionId = (_object$connectionId2 = object.connectionId) !== null && _object$connectionId2 !== void 0 ? _object$connectionId2 : \"\";\n    message.proofAck = (_object$proofAck = object.proofAck) !== null && _object$proofAck !== void 0 ? _object$proofAck : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_object$signer4 = object.signer) !== null && _object$signer4 !== void 0 ? _object$signer4 : \"\";\n    return message;\n  }\n};\nexports.MsgConnectionOpenConfirm = MsgConnectionOpenConfirm;\nfunction createBaseMsgConnectionOpenConfirmResponse() {\n  return {};\n}\nvar MsgConnectionOpenConfirmResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseMsgConnectionOpenConfirmResponse();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = createBaseMsgConnectionOpenConfirmResponse();\n    return message;\n  }\n};\nexports.MsgConnectionOpenConfirmResponse = MsgConnectionOpenConfirmResponse;","map":null,"metadata":{},"sourceType":"script"}