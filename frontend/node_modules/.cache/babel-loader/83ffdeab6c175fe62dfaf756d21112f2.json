{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/linanqi/Hackathon/GameRoom/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nvar utils_1 = require(\"@cosmjs/utils\");\nvar signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nvar tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nvar long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n  return signers.map(function (_ref) {\n    var pubkey = _ref.pubkey,\n      sequence = _ref.sequence;\n    return {\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    };\n  });\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit, feeGranter, feePayer) {\n  var signMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  // Required arguments 4 and 5 were added in CosmJS 0.29. Use runtime checks to help our non-TS users.\n  (0, utils_1.assert)(feeGranter === undefined || typeof feeGranter === \"string\", \"feeGranter must be undefined or string\");\n  (0, utils_1.assert)(feePayer === undefined || typeof feePayer === \"string\", \"feePayer must be undefined or string\");\n  var authInfo = tx_1.AuthInfo.fromPartial({\n    signerInfos: makeSignerInfos(signers, signMode),\n    fee: {\n      amount: _toConsumableArray(feeAmount),\n      gasLimit: long_1.default.fromNumber(gasLimit),\n      granter: feeGranter,\n      payer: feePayer\n    }\n  });\n  return tx_1.AuthInfo.encode(authInfo).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes(_ref2) {\n  var accountNumber = _ref2.accountNumber,\n    authInfoBytes = _ref2.authInfoBytes,\n    bodyBytes = _ref2.bodyBytes,\n    chainId = _ref2.chainId;\n  var signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;","map":null,"metadata":{},"sourceType":"script"}