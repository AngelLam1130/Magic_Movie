{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Block = void 0;\nvar _types = require(\"./types\");\nvar _evidence = require(\"./evidence\");\nvar _m0 = _interopRequireWildcard(require(\"protobufjs/minimal\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction createBaseBlock() {\n  return {\n    header: _types.Header.fromPartial({}),\n    data: _types.Data.fromPartial({}),\n    evidence: _evidence.EvidenceList.fromPartial({}),\n    lastCommit: _types.Commit.fromPartial({})\n  };\n}\nvar Block = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();\n    if (message.header !== undefined) {\n      _types.Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.data !== undefined) {\n      _types.Data.encode(message.data, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.evidence !== undefined) {\n      _evidence.EvidenceList.encode(message.evidence, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.lastCommit !== undefined) {\n      _types.Commit.encode(message.lastCommit, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = createBaseBlock();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.header = _types.Header.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.data = _types.Data.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.evidence = _evidence.EvidenceList.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.lastCommit = _types.Commit.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = createBaseBlock();\n    message.header = object.header !== undefined && object.header !== null ? _types.Header.fromPartial(object.header) : undefined;\n    message.data = object.data !== undefined && object.data !== null ? _types.Data.fromPartial(object.data) : undefined;\n    message.evidence = object.evidence !== undefined && object.evidence !== null ? _evidence.EvidenceList.fromPartial(object.evidence) : undefined;\n    message.lastCommit = object.lastCommit !== undefined && object.lastCommit !== null ? _types.Commit.fromPartial(object.lastCommit) : undefined;\n    return message;\n  }\n};\nexports.Block = Block;","map":null,"metadata":{},"sourceType":"script"}